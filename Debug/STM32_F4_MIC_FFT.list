
STM32_F4_MIC_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005734  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015540  08005900  08005900  00015900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae40  0801ae40  000301b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae40  0801ae40  0002ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae48  0801ae48  000301b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae48  0801ae48  0002ae48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae4c  0801ae4c  0002ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0801ae50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003144  200001b4  0801b004  000301b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032f8  0801b004  000332f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ba6  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  00046d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00049860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0004a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bef  00000000  00000000  0004ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f307  00000000  00000000  0006d947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8d0b  00000000  00000000  0007cc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  00155959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f68  00000000  00000000  00155a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a2c  00000000  00000000  0015898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b4 	.word	0x200001b4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080058e4 	.word	0x080058e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001b8 	.word	0x200001b8
 8000204:	080058e4 	.word	0x080058e4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b974 	b.w	8000e20 <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9d08      	ldr	r5, [sp, #32]
 8000b56:	4604      	mov	r4, r0
 8000b58:	468e      	mov	lr, r1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d14d      	bne.n	8000bfa <__udivmoddi4+0xaa>
 8000b5e:	428a      	cmp	r2, r1
 8000b60:	4694      	mov	ip, r2
 8000b62:	d969      	bls.n	8000c38 <__udivmoddi4+0xe8>
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	b152      	cbz	r2, 8000b80 <__udivmoddi4+0x30>
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	f1c2 0120 	rsb	r1, r2, #32
 8000b72:	fa20 f101 	lsr.w	r1, r0, r1
 8000b76:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7e:	4094      	lsls	r4, r2
 8000b80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b84:	0c21      	lsrs	r1, r4, #16
 8000b86:	fbbe f6f8 	udiv	r6, lr, r8
 8000b8a:	fa1f f78c 	uxth.w	r7, ip
 8000b8e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b96:	fb06 f107 	mul.w	r1, r6, r7
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x64>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba6:	f080 811f 	bcs.w	8000de8 <__udivmoddi4+0x298>
 8000baa:	4299      	cmp	r1, r3
 8000bac:	f240 811c 	bls.w	8000de8 <__udivmoddi4+0x298>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc4:	fb00 f707 	mul.w	r7, r0, r7
 8000bc8:	42a7      	cmp	r7, r4
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x92>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd4:	f080 810a 	bcs.w	8000dec <__udivmoddi4+0x29c>
 8000bd8:	42a7      	cmp	r7, r4
 8000bda:	f240 8107 	bls.w	8000dec <__udivmoddi4+0x29c>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be6:	1be4      	subs	r4, r4, r7
 8000be8:	2600      	movs	r6, #0
 8000bea:	b11d      	cbz	r5, 8000bf4 <__udivmoddi4+0xa4>
 8000bec:	40d4      	lsrs	r4, r2
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0xc2>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	f000 80ef 	beq.w	8000de2 <__udivmoddi4+0x292>
 8000c04:	2600      	movs	r6, #0
 8000c06:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	fab3 f683 	clz	r6, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d14a      	bne.n	8000cb0 <__udivmoddi4+0x160>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0xd4>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 80f9 	bhi.w	8000e16 <__udivmoddi4+0x2c6>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	469e      	mov	lr, r3
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0e0      	beq.n	8000bf4 <__udivmoddi4+0xa4>
 8000c32:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c36:	e7dd      	b.n	8000bf4 <__udivmoddi4+0xa4>
 8000c38:	b902      	cbnz	r2, 8000c3c <__udivmoddi4+0xec>
 8000c3a:	deff      	udf	#255	; 0xff
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	f040 8092 	bne.w	8000d6a <__udivmoddi4+0x21a>
 8000c46:	eba1 010c 	sub.w	r1, r1, ip
 8000c4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4e:	fa1f fe8c 	uxth.w	lr, ip
 8000c52:	2601      	movs	r6, #1
 8000c54:	0c20      	lsrs	r0, r4, #16
 8000c56:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c5a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c62:	fb0e f003 	mul.w	r0, lr, r3
 8000c66:	4288      	cmp	r0, r1
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x12c>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x12a>
 8000c74:	4288      	cmp	r0, r1
 8000c76:	f200 80cb 	bhi.w	8000e10 <__udivmoddi4+0x2c0>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	1a09      	subs	r1, r1, r0
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c84:	fb07 1110 	mls	r1, r7, r0, r1
 8000c88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x156>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x154>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2ca>
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x9a>
 8000cb0:	f1c6 0720 	rsb	r7, r6, #32
 8000cb4:	40b3      	lsls	r3, r6
 8000cb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cbe:	fa20 f407 	lsr.w	r4, r0, r7
 8000cc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc6:	431c      	orrs	r4, r3
 8000cc8:	40f9      	lsrs	r1, r7
 8000cca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cce:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd6:	0c20      	lsrs	r0, r4, #16
 8000cd8:	fa1f fe8c 	uxth.w	lr, ip
 8000cdc:	fb09 1118 	mls	r1, r9, r8, r1
 8000ce0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	fa02 f206 	lsl.w	r2, r2, r6
 8000cee:	d90b      	bls.n	8000d08 <__udivmoddi4+0x1b8>
 8000cf0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf8:	f080 8088 	bcs.w	8000e0c <__udivmoddi4+0x2bc>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f240 8085 	bls.w	8000e0c <__udivmoddi4+0x2bc>
 8000d02:	f1a8 0802 	sub.w	r8, r8, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d10:	fb09 1110 	mls	r1, r9, r0, r1
 8000d14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	458e      	cmp	lr, r1
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x1e2>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d28:	d26c      	bcs.n	8000e04 <__udivmoddi4+0x2b4>
 8000d2a:	458e      	cmp	lr, r1
 8000d2c:	d96a      	bls.n	8000e04 <__udivmoddi4+0x2b4>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4461      	add	r1, ip
 8000d32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d36:	fba0 9402 	umull	r9, r4, r0, r2
 8000d3a:	eba1 010e 	sub.w	r1, r1, lr
 8000d3e:	42a1      	cmp	r1, r4
 8000d40:	46c8      	mov	r8, r9
 8000d42:	46a6      	mov	lr, r4
 8000d44:	d356      	bcc.n	8000df4 <__udivmoddi4+0x2a4>
 8000d46:	d053      	beq.n	8000df0 <__udivmoddi4+0x2a0>
 8000d48:	b15d      	cbz	r5, 8000d62 <__udivmoddi4+0x212>
 8000d4a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d52:	fa01 f707 	lsl.w	r7, r1, r7
 8000d56:	fa22 f306 	lsr.w	r3, r2, r6
 8000d5a:	40f1      	lsrs	r1, r6
 8000d5c:	431f      	orrs	r7, r3
 8000d5e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d62:	2600      	movs	r6, #0
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	f1c2 0320 	rsb	r3, r2, #32
 8000d6e:	40d8      	lsrs	r0, r3
 8000d70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d74:	fa21 f303 	lsr.w	r3, r1, r3
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4301      	orrs	r1, r0
 8000d7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d88:	fb07 3610 	mls	r6, r7, r0, r3
 8000d8c:	0c0b      	lsrs	r3, r1, #16
 8000d8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d92:	fb00 f60e 	mul.w	r6, r0, lr
 8000d96:	429e      	cmp	r6, r3
 8000d98:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x260>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da6:	d22f      	bcs.n	8000e08 <__udivmoddi4+0x2b8>
 8000da8:	429e      	cmp	r6, r3
 8000daa:	d92d      	bls.n	8000e08 <__udivmoddi4+0x2b8>
 8000dac:	3802      	subs	r0, #2
 8000dae:	4463      	add	r3, ip
 8000db0:	1b9b      	subs	r3, r3, r6
 8000db2:	b289      	uxth	r1, r1
 8000db4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc0:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x28a>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dd0:	d216      	bcs.n	8000e00 <__udivmoddi4+0x2b0>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d914      	bls.n	8000e00 <__udivmoddi4+0x2b0>
 8000dd6:	3e02      	subs	r6, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000de0:	e738      	b.n	8000c54 <__udivmoddi4+0x104>
 8000de2:	462e      	mov	r6, r5
 8000de4:	4628      	mov	r0, r5
 8000de6:	e705      	b.n	8000bf4 <__udivmoddi4+0xa4>
 8000de8:	4606      	mov	r6, r0
 8000dea:	e6e3      	b.n	8000bb4 <__udivmoddi4+0x64>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6f8      	b.n	8000be2 <__udivmoddi4+0x92>
 8000df0:	454b      	cmp	r3, r9
 8000df2:	d2a9      	bcs.n	8000d48 <__udivmoddi4+0x1f8>
 8000df4:	ebb9 0802 	subs.w	r8, r9, r2
 8000df8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	e7a3      	b.n	8000d48 <__udivmoddi4+0x1f8>
 8000e00:	4646      	mov	r6, r8
 8000e02:	e7ea      	b.n	8000dda <__udivmoddi4+0x28a>
 8000e04:	4620      	mov	r0, r4
 8000e06:	e794      	b.n	8000d32 <__udivmoddi4+0x1e2>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	e7d1      	b.n	8000db0 <__udivmoddi4+0x260>
 8000e0c:	46d0      	mov	r8, sl
 8000e0e:	e77b      	b.n	8000d08 <__udivmoddi4+0x1b8>
 8000e10:	3b02      	subs	r3, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	e732      	b.n	8000c7c <__udivmoddi4+0x12c>
 8000e16:	4630      	mov	r0, r6
 8000e18:	e709      	b.n	8000c2e <__udivmoddi4+0xde>
 8000e1a:	4464      	add	r4, ip
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x156>

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	f5ad 4dc0 	sub.w	sp, sp, #24576	; 0x6000
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fd95 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f897 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 f9b3 	bl	80011a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e3a:	f000 f8ff 	bl	800103c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e3e:	f000 f985 	bl	800114c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000e42:	f000 f94d 	bl	80010e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  max_init();
 8000e46:	f000 fbaf 	bl	80015a8 <max_init>
  uint32_t configtime = HAL_GetTick();
 8000e4a:	f000 fded 	bl	8001a28 <HAL_GetTick>
 8000e4e:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000e52:	6018      	str	r0, [r3, #0]
  uint32_t g_ADCValueARRAY[BUFFER_SIZE];
  int g_MeasurementNumber;

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000e54:	483c      	ldr	r0, [pc, #240]	; (8000f48 <main+0x124>)
 8000e56:	f000 fe5b 	bl	8001b10 <HAL_ADC_Start>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <main+0x40>
  {
    Error_Handler();
 8000e60:	f000 fb50 	bl	8001504 <Error_Handler>
  }

  for (i = 1; i < 9; i++)
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <main+0x128>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e00f      	b.n	8000e8c <main+0x68>
  {
    write_max(i, display_matrix[i - 1]);
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <main+0x128>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <main+0x128>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	4936      	ldr	r1, [pc, #216]	; (8000f50 <main+0x12c>)
 8000e78:	5ccb      	ldrb	r3, [r1, r3]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f000 fb73 	bl	8001568 <write_max>
  for (i = 1; i < 9; i++)
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <main+0x128>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a30      	ldr	r2, [pc, #192]	; (8000f4c <main+0x128>)
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <main+0x128>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	ddeb      	ble.n	8000e6c <main+0x48>
  }
  write_string("ABCD");
 8000e94:	482f      	ldr	r0, [pc, #188]	; (8000f54 <main+0x130>)
 8000e96:	f000 fb9f 	bl	80015d8 <write_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	482e      	ldr	r0, [pc, #184]	; (8000f58 <main+0x134>)
 8000e9e:	f001 fc62 	bl	8002766 <HAL_GPIO_TogglePin>
  while (1)
  {
    configtime = HAL_GetTick();
 8000ea2:	f000 fdc1 	bl	8001a28 <HAL_GetTick>
 8000ea6:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000eaa:	6018      	str	r0, [r3, #0]
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	4825      	ldr	r0, [pc, #148]	; (8000f48 <main+0x124>)
 8000eb2:	f000 feff 	bl	8001cb4 <HAL_ADC_PollForConversion>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d13c      	bne.n	8000f36 <main+0x112>
    {
      for (i = 0; i < BUFFER_SIZE; i++)
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <main+0x128>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e012      	b.n	8000eea <main+0xc6>
      {
        Adc_input[i] = HAL_ADC_GetValue(&hadc1); // 0-4095
 8000ec4:	4820      	ldr	r0, [pc, #128]	; (8000f48 <main+0x124>)
 8000ec6:	f000 ff80 	bl	8001dca <HAL_ADC_GetValue>
 8000eca:	ee07 0a90 	vmov	s15, r0
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <main+0x128>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed6:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <main+0x138>)
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i < BUFFER_SIZE; i++)
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <main+0x128>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <main+0x128>)
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <main+0x128>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ef2:	dbe7      	blt.n	8000ec4 <main+0xa0>
      }

      configtime = HAL_GetTick() - configtime;
 8000ef4:	f000 fd98 	bl	8001a28 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
 8000f06:	6013      	str	r3, [r2, #0]
      g_ADCValue = HAL_ADC_GetValue(&hadc1); // 4096-0 returns
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <main+0x124>)
 8000f0a:	f000 ff5e 	bl	8001dca <HAL_ADC_GetValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <main+0x13c>)
 8000f12:	6013      	str	r3, [r2, #0]
      fft();
 8000f14:	f000 f9b2 	bl	800127c <fft>
      FFT_output_shrinker();
 8000f18:	f000 f9f2 	bl	8001300 <FFT_output_shrinker>
      displayfft();
 8000f1c:	f000 fa3c 	bl	8001398 <displayfft>
      g_MeasurementNumber++;
 8000f20:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000f24:	f103 0304 	add.w	r3, r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
 8000f30:	f102 0204 	add.w	r2, r2, #4
 8000f34:	6013      	str	r3, [r2, #0]
    //	{
    //		write_max(i + 1, 0x00);
    //	}
    // write_string("ABCD");

    HAL_Delay(10);
 8000f36:	200a      	movs	r0, #10
 8000f38:	f000 fd82 	bl	8001a40 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <main+0x134>)
 8000f40:	f001 fc11 	bl	8002766 <HAL_GPIO_TogglePin>
    configtime = HAL_GetTick();
 8000f44:	e7ad      	b.n	8000ea2 <main+0x7e>
 8000f46:	bf00      	nop
 8000f48:	200001d0 	.word	0x200001d0
 8000f4c:	200032f0 	.word	0x200032f0
 8000f50:	20000000 	.word	0x20000000
 8000f54:	08005900 	.word	0x08005900
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	200002b4 	.word	0x200002b4
 8000f60:	200032ec 	.word	0x200032ec

08000f64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2234      	movs	r2, #52	; 0x34
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fd70 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <SystemClock_Config+0xd0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a28      	ldr	r2, [pc, #160]	; (8001034 <SystemClock_Config+0xd0>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <SystemClock_Config+0xd0>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <SystemClock_Config+0xd4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <SystemClock_Config+0xd4>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <SystemClock_Config+0xd4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 164;
 8000fd8:	23a4      	movs	r3, #164	; 0xa4
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 ff1f 	bl	8002e30 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff8:	f000 fa84 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2105      	movs	r1, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fbbe 	bl	800279c <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001026:	f000 fa6d 	bl	8001504 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	; 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800105a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC1_Init+0x98>)
 800106a:	2201      	movs	r2, #1
 800106c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_ADC1_Init+0x98>)
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <MX_ADC1_Init+0xa0>)
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_ADC1_Init+0x98>)
 800108a:	2201      	movs	r2, #1
 800108c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_ADC1_Init+0x98>)
 800109e:	f000 fcf3 	bl	8001a88 <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a8:	f000 fa2c 	bl	8001504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_ADC1_Init+0x98>)
 80010be:	f000 fe91 	bl	8001de4 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c8:	f000 fa1c 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001d0 	.word	0x200001d0
 80010d8:	40012000 	.word	0x40012000
 80010dc:	0f000001 	.word	0x0f000001

080010e0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI2_Init+0x64>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <MX_SPI2_Init+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI2_Init+0x64>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI2_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_SPI2_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI2_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI2_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI2_Init+0x64>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI2_Init+0x64>)
 8001114:	2210      	movs	r2, #16
 8001116:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_SPI2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_SPI2_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI2_Init+0x64>)
 800112c:	220a      	movs	r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_SPI2_Init+0x64>)
 8001132:	f002 f91b 	bl	800336c <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800113c:	f000 f9e2 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000218 	.word	0x20000218
 8001148:	40003800 	.word	0x40003800

0800114c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART2_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001184:	f002 f97b 	bl	800347e <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 f9b9 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000270 	.word	0x20000270
 800119c:	40004400 	.word	0x40004400

080011a0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, clock_Pin | LD2_Pin | cs_Pin | DATA_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	21f0      	movs	r1, #240	; 0xf0
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <MX_GPIO_Init+0xd4>)
 800122c:	f001 fa82 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001236:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_GPIO_Init+0xd8>)
 8001248:	f001 f8e0 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : clock_Pin LD2_Pin cs_Pin DATA_Pin */
  GPIO_InitStruct.Pin = clock_Pin | LD2_Pin | cs_Pin | DATA_Pin;
 800124c:	23f0      	movs	r3, #240	; 0xf0
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0xd4>)
 8001264:	f001 f8d2 	bl	800240c <HAL_GPIO_Init>
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020800 	.word	0x40020800

0800127c <fft>:

/* USER CODE BEGIN 4 */
void fft(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  arm_status status;
  status = ARM_MATH_SUCCESS;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
  status = arm_cfft_init_f32(&varInstCfftF32, fftSize);
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <fft+0x64>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	4815      	ldr	r0, [pc, #84]	; (80012e4 <fft+0x68>)
 8001290:	f002 fbb6 	bl	8003a00 <arm_cfft_init_f32>
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Process the data through the CFFT/CIFFT module */
  arm_cfft_f32(&varInstCfftF32, Adc_input, ifftFlag, doBitReverse);
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <fft+0x6c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <fft+0x70>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <fft+0x74>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <fft+0x68>)
 80012a8:	f002 ff24 	bl	80040f4 <arm_cfft_f32>
  /* Process the data through the Complex Magnitude Module for
  calculating the magnitude at each bin */
  arm_cmplx_mag_f32(Adc_input, FFT_output, fftSize);
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <fft+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4910      	ldr	r1, [pc, #64]	; (80012f4 <fft+0x78>)
 80012b4:	480e      	ldr	r0, [pc, #56]	; (80012f0 <fft+0x74>)
 80012b6:	f002 ffb5 	bl	8004224 <arm_cmplx_mag_f32>
  FFT_output[0] = FFT_output[1];
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <fft+0x78>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <fft+0x78>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Calculates maxValue and returns corresponding BIN value */

  status = (testIndex != refIndex) ? ARM_MATH_TEST_FAILURE : ARM_MATH_SUCCESS;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <fft+0x7c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <fft+0x80>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d002      	beq.n	80012d4 <fft+0x58>
 80012ce:	f06f 0305 	mvn.w	r3, #5
 80012d2:	e000      	b.n	80012d6 <fft+0x5a>
 80012d4:	2300      	movs	r3, #0
 80012d6:	71fb      	strb	r3, [r7, #7]
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000008 	.word	0x20000008
 80012e4:	200032d8 	.word	0x200032d8
 80012e8:	200032d4 	.word	0x200032d4
 80012ec:	2000000c 	.word	0x2000000c
 80012f0:	200002b4 	.word	0x200002b4
 80012f4:	200022b4 	.word	0x200022b4
 80012f8:	200032e8 	.word	0x200032e8
 80012fc:	20000010 	.word	0x20000010

08001300 <FFT_output_shrinker>:

void FFT_output_shrinker()
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
  int count = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  float32_t temp_average = 0.0;
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  for (int j = 0; j < 8; j++)
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e030      	b.n	8001378 <FFT_output_shrinker+0x78>
  {
    for (int i = count, k = 0; k < (BUFFER_SIZE / 2) / 8 / 2; i++, k++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	e011      	b.n	8001344 <FFT_output_shrinker+0x44>
    {
      temp_average = temp_average + FFT_output[i];
 8001320:	4a1a      	ldr	r2, [pc, #104]	; (800138c <FFT_output_shrinker+0x8c>)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001334:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = count, k = 0; k < (BUFFER_SIZE / 2) / 8 / 2; i++, k++)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3301      	adds	r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b3f      	cmp	r3, #63	; 0x3f
 8001348:	ddea      	ble.n	8001320 <FFT_output_shrinker+0x20>
    }
    temp_average = temp_average / ((BUFFER_SIZE / 2) / 8 / 2);
 800134a:	ed97 7a04 	vldr	s14, [r7, #16]
 800134e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001390 <FFT_output_shrinker+0x90>
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	edc7 7a04 	vstr	s15, [r7, #16]
    smol_FFT_out[j] = temp_average;
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <FFT_output_shrinker+0x94>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	601a      	str	r2, [r3, #0]
    temp_average = 0.0;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
    count = count + ((BUFFER_SIZE / 2) / 8 / 2);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3340      	adds	r3, #64	; 0x40
 8001370:	617b      	str	r3, [r7, #20]
  for (int j = 0; j < 8; j++)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b07      	cmp	r3, #7
 800137c:	ddcb      	ble.n	8001316 <FFT_output_shrinker+0x16>
  }
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	200022b4 	.word	0x200022b4
 8001390:	42800000 	.word	0x42800000
 8001394:	200032b4 	.word	0x200032b4

08001398 <displayfft>:

void displayfft()
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b092      	sub	sp, #72	; 0x48
 800139c:	af00      	add	r7, sp, #0
  float32_t max_in_smol_fft = smol_FFT_out[0];
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <displayfft+0x160>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
  for (int j = 0; j < 8; j++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
 80013a8:	e015      	b.n	80013d6 <displayfft+0x3e>
  {
    if (smol_FFT_out[j] > max_in_smol_fft)
 80013aa:	4a53      	ldr	r2, [pc, #332]	; (80014f8 <displayfft+0x160>)
 80013ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d505      	bpl.n	80013d0 <displayfft+0x38>
      max_in_smol_fft = smol_FFT_out[j];
 80013c4:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <displayfft+0x160>)
 80013c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  for (int j = 0; j < 8; j++)
 80013d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d2:	3301      	adds	r3, #1
 80013d4:	643b      	str	r3, [r7, #64]	; 0x40
 80013d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d8:	2b07      	cmp	r3, #7
 80013da:	dde6      	ble.n	80013aa <displayfft+0x12>
  }
  int OldRange = ((int)max_in_smol_fft + 1 - 0);
 80013dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	3301      	adds	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  int NewRange = (8 - 0);
 80013ec:	2308      	movs	r3, #8
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  int smol_FFT_out_in_8_range[8];

  for (int j = 0; j < 8; j++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013f4:	e018      	b.n	8001428 <displayfft+0x90>
  {
    smol_FFT_out_in_8_range[j] = (((int)smol_FFT_out[j] - 0) * NewRange) / OldRange + 0;
 80013f6:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <displayfft+0x160>)
 80013f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001406:	ee17 2a90 	vmov	r2, s15
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	fb03 f202 	mul.w	r2, r3, r2
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	fb92 f2f3 	sdiv	r2, r2, r3
 8001416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	3348      	adds	r3, #72	; 0x48
 800141c:	443b      	add	r3, r7
 800141e:	f843 2c40 	str.w	r2, [r3, #-64]
  for (int j = 0; j < 8; j++)
 8001422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001424:	3301      	adds	r3, #1
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142a:	2b07      	cmp	r3, #7
 800142c:	dde3      	ble.n	80013f6 <displayfft+0x5e>
  }

  uint8_t fft_display[8] =
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <displayfft+0x164>)
 8001430:	463b      	mov	r3, r7
 8001432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001436:	e883 0003 	stmia.w	r3, {r0, r1}
  {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
  for (int i = 0; i < 8; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
 800143e:	e038      	b.n	80014b2 <displayfft+0x11a>
  {
    for (int j = 0; j < smol_FFT_out_in_8_range[i]; j++)
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
 8001444:	e029      	b.n	800149a <displayfft+0x102>
    {
      fft_display[i] = (fft_display[i] + pow(0x2,j));
 8001446:	463a      	mov	r2, r7
 8001448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f82c 	bl	80004ac <__aeabi_i2d>
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
 8001458:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800145a:	f7ff f827 	bl	80004ac <__aeabi_i2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ec43 2b11 	vmov	d1, r2, r3
 8001466:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80014f0 <displayfft+0x158>
 800146a:	f003 fafd 	bl	8004a68 <pow>
 800146e:	ec53 2b10 	vmov	r2, r3, d0
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe fecd 	bl	8000214 <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb2d 	bl	8000ae0 <__aeabi_d2uiz>
 8001486:	4603      	mov	r3, r0
 8001488:	b2d9      	uxtb	r1, r3
 800148a:	463a      	mov	r2, r7
 800148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148e:	4413      	add	r3, r2
 8001490:	460a      	mov	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < smol_FFT_out_in_8_range[i]; j++)
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	3301      	adds	r3, #1
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3348      	adds	r3, #72	; 0x48
 80014a0:	443b      	add	r3, r7
 80014a2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80014a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbcc      	blt.n	8001446 <displayfft+0xae>
  for (int i = 0; i < 8; i++)
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	3301      	adds	r3, #1
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80014b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b4:	2b07      	cmp	r3, #7
 80014b6:	ddc3      	ble.n	8001440 <displayfft+0xa8>
      
    }
  }
 display_matrix[0] = (uint8_t)fft_display[0];
 80014b8:	783a      	ldrb	r2, [r7, #0]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <displayfft+0x168>)
 80014bc:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < 9; i++)
 80014be:	2301      	movs	r3, #1
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
 80014c2:	e00c      	b.n	80014de <displayfft+0x146>
  {
    write_max(i, (uint8_t)fft_display[i - 1]);
 80014c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c6:	3b01      	subs	r3, #1
 80014c8:	3348      	adds	r3, #72	; 0x48
 80014ca:	443b      	add	r3, r7
 80014cc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014d4:	f000 f848 	bl	8001568 <write_max>
  for (int i = 1; i < 9; i++)
 80014d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014da:	3301      	adds	r3, #1
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	ddef      	ble.n	80014c4 <displayfft+0x12c>
  //			       write_max (i,disp1ay[(*str - 55)][i-1]);
  //			   }
  //		*str++;
  //		HAL_Delay (500);
  //	}
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3748      	adds	r7, #72	; 0x48
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bdb0      	pop	{r4, r5, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40000000 	.word	0x40000000
 80014f8:	200032b4 	.word	0x200032b4
 80014fc:	08005908 	.word	0x08005908
 8001500:	20000000 	.word	0x20000000

08001504 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <write_byte>:
{0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y
{0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F},//Z
};

void write_byte (uint8_t byte)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	e018      	b.n	8001552 <write_byte+0x42>
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, 0);  // pull the clock pin low
 8001520:	2200      	movs	r2, #0
 8001522:	2110      	movs	r1, #16
 8001524:	480f      	ldr	r0, [pc, #60]	; (8001564 <write_byte+0x54>)
 8001526:	f001 f905 	bl	8002734 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, byte&0x80);  // write the MSB bit to the data pin
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <write_byte+0x54>)
 8001538:	f001 f8fc 	bl	8002734 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, 1);  // pull the clock pin HIGH
 8001542:	2201      	movs	r2, #1
 8001544:	2110      	movs	r1, #16
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <write_byte+0x54>)
 8001548:	f001 f8f4 	bl	8002734 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b07      	cmp	r3, #7
 8001556:	dde3      	ble.n	8001520 <write_byte+0x10>
	}
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020000 	.word	0x40020000

08001568 <write_max>:

void write_max (uint8_t address, uint8_t data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 0);  // pull the CS pin LOW
 8001578:	2200      	movs	r2, #0
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <write_max+0x3c>)
 800157e:	f001 f8d9 	bl	8002734 <HAL_GPIO_WritePin>
	write_byte (address);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffc3 	bl	8001510 <write_byte>
	write_byte (data); 
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffbf 	bl	8001510 <write_byte>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 1);  // pull the CS pin HIGH
 8001592:	2201      	movs	r2, #1
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <write_max+0x3c>)
 8001598:	f001 f8cc 	bl	8002734 <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020000 	.word	0x40020000

080015a8 <max_init>:

void max_init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
 write_max(0x09, 0x00);       //  no decoding
 80015ac:	2100      	movs	r1, #0
 80015ae:	2009      	movs	r0, #9
 80015b0:	f7ff ffda 	bl	8001568 <write_max>
 write_max(0x0a, 0x03);       //  brightness intensity
 80015b4:	2103      	movs	r1, #3
 80015b6:	200a      	movs	r0, #10
 80015b8:	f7ff ffd6 	bl	8001568 <write_max>
 write_max(0x0b, 0x07);       //  scan limit = 8 LEDs
 80015bc:	2107      	movs	r1, #7
 80015be:	200b      	movs	r0, #11
 80015c0:	f7ff ffd2 	bl	8001568 <write_max>
 write_max(0x0c, 0x01);       //  power down =0,normal mode = 1
 80015c4:	2101      	movs	r1, #1
 80015c6:	200c      	movs	r0, #12
 80015c8:	f7ff ffce 	bl	8001568 <write_max>
 write_max(0x0f, 0x00);       //  no test display
 80015cc:	2100      	movs	r1, #0
 80015ce:	200f      	movs	r0, #15
 80015d0:	f7ff ffca 	bl	8001568 <write_max>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <write_string>:

void write_string (char *str)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	while (*str)
 80015e0:	e01f      	b.n	8001622 <write_string+0x4a>
	{
		for(int i=1;i<9;i++)
 80015e2:	2301      	movs	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e012      	b.n	800160e <write_string+0x36>
			   {
			       write_max (i,disp1ay[(*str - 55)][i-1]);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	b2d8      	uxtb	r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <write_string+0x5c>)
 80015fa:	00d2      	lsls	r2, r2, #3
 80015fc:	440a      	add	r2, r1
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff ffb0 	bl	8001568 <write_max>
		for(int i=1;i<9;i++)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b08      	cmp	r3, #8
 8001612:	dde9      	ble.n	80015e8 <write_string+0x10>
			   }
		*str++;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
		HAL_Delay (500);
 800161a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161e:	f000 fa0f 	bl	8001a40 <HAL_Delay>
	while (*str)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1db      	bne.n	80015e2 <write_string+0xa>
	}
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000014 	.word	0x20000014

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_MspInit+0x4c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f000 fe94 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_ADC_MspInit+0x7c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d127      	bne.n	80016fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_ADC_MspInit+0x80>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <HAL_ADC_MspInit+0x80>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_ADC_MspInit+0x80>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_ADC_MspInit+0x80>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_ADC_MspInit+0x80>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_ADC_MspInit+0x80>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MIC_IN_Pin;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_IN_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_ADC_MspInit+0x84>)
 80016f6:	f000 fe89 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40012000 	.word	0x40012000
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_SPI_MspInit+0xe0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d15a      	bne.n	80017e8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_SPI_MspInit+0xe4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001786:	2302      	movs	r3, #2
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001796:	2307      	movs	r3, #7
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4815      	ldr	r0, [pc, #84]	; (80017f8 <HAL_SPI_MspInit+0xe8>)
 80017a2:	f000 fe33 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a6:	2304      	movs	r3, #4
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b6:	2305      	movs	r3, #5
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <HAL_SPI_MspInit+0xe8>)
 80017c2:	f000 fe23 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d8:	2305      	movs	r3, #5
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <HAL_SPI_MspInit+0xec>)
 80017e4:	f000 fe12 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40003800 	.word	0x40003800
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020400 	.word	0x40020400

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_UART_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x88>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_UART_MspInit+0x8c>)
 8001876:	f000 fdc9 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40004400 	.word	0x40004400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <NMI_Handler+0x4>

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018dc:	f000 f890 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001932:	f7ff ffd7 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f003 f86b 	bl	8004a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7ff fa73 	bl	8000e24 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 800194c:	0801ae50 	.word	0x0801ae50
  ldr r2, =_sbss
 8001950:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001954:	200032f8 	.word	0x200032f8

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 fd0d 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fe52 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fd17 	bl	80023f2 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 fced 	bl	80023ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000144 	.word	0x20000144
 80019f8:	2000014c 	.word	0x2000014c
 80019fc:	20000148 	.word	0x20000148

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000014c 	.word	0x2000014c
 8001a24:	200032f4 	.word	0x200032f4

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200032f4 	.word	0x200032f4

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000014c 	.word	0x2000014c

08001a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e033      	b.n	8001b06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fdee 	bl	8001688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ace:	f023 0302 	bic.w	r3, r3, #2
 8001ad2:	f043 0202 	orr.w	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fab4 	bl	8002048 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
 8001af6:	e001      	b.n	8001afc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Start+0x1a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e0b2      	b.n	8001c90 <HAL_ADC_Start+0x180>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d018      	beq.n	8001b72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <HAL_ADC_Start+0x18c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_ADC_Start+0x190>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0c9a      	lsrs	r2, r3, #18
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b64:	e002      	b.n	8001b6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d17a      	bne.n	8001c76 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001baa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbe:	d106      	bne.n	8001bce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f023 0206 	bic.w	r2, r3, #6
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_ADC_Start+0x194>)
 8001bde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001be8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d12a      	bne.n	8001c4c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ca8 <HAL_ADC_Start+0x198>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d015      	beq.n	8001c2c <HAL_ADC_Start+0x11c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_ADC_Start+0x19c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_Start+0x106>
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_ADC_Start+0x194>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_ADC_Start+0x1a0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d136      	bne.n	8001c8e <HAL_ADC_Start+0x17e>
 8001c20:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_ADC_Start+0x194>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d130      	bne.n	8001c8e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d129      	bne.n	8001c8e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	e020      	b.n	8001c8e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_ADC_Start+0x198>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11b      	bne.n	8001c8e <HAL_ADC_Start+0x17e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d114      	bne.n	8001c8e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e00b      	b.n	8001c8e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0210 	orr.w	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000144 	.word	0x20000144
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	40012100 	.word	0x40012100
 8001cb0:	40012200 	.word	0x40012200

08001cb4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d113      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce0:	d10b      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e063      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cfa:	f7ff fe95 	bl	8001a28 <HAL_GetTick>
 8001cfe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d00:	e021      	b.n	8001d46 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d01d      	beq.n	8001d46 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x6c>
 8001d10:	f7ff fe8a 	bl	8001a28 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d212      	bcs.n	8001d46 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d00b      	beq.n	8001d46 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0204 	orr.w	r2, r3, #4
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e03d      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d1d6      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0212 	mvn.w	r2, #18
 8001d5c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d123      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11f      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d111      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e113      	b.n	8002028 <HAL_ADC_ConfigChannel+0x244>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d925      	bls.n	8001e5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68d9      	ldr	r1, [r3, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	3b1e      	subs	r3, #30
 8001e26:	2207      	movs	r2, #7
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4403      	add	r3, r0
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	409a      	lsls	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	e022      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	2207      	movs	r2, #7
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4403      	add	r3, r0
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d824      	bhi.n	8001ef4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b05      	subs	r3, #5
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b05      	subs	r3, #5
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef2:	e04c      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d824      	bhi.n	8001f46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b23      	subs	r3, #35	; 0x23
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b23      	subs	r3, #35	; 0x23
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
 8001f44:	e023      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b41      	subs	r3, #65	; 0x41
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b41      	subs	r3, #65	; 0x41
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_ADC_ConfigChannel+0x250>)
 8001f90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_ADC_ConfigChannel+0x254>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10f      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1d8>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b12      	cmp	r3, #18
 8001fa2:	d10b      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_ADC_ConfigChannel+0x254>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_ADC_ConfigChannel+0x23a>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_ADC_ConfigChannel+0x258>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b11      	cmp	r3, #17
 8001fd6:	d122      	bne.n	800201e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x258>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d111      	bne.n	800201e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_ADC_ConfigChannel+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_ADC_ConfigChannel+0x260>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	0c9a      	lsrs	r2, r3, #18
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002010:	e002      	b.n	8002018 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40012300 	.word	0x40012300
 8002038:	40012000 	.word	0x40012000
 800203c:	10000012 	.word	0x10000012
 8002040:	20000144 	.word	0x20000144
 8002044:	431bde83 	.word	0x431bde83

08002048 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002050:	4b79      	ldr	r3, [pc, #484]	; (8002238 <ADC_Init+0x1f0>)
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	431a      	orrs	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800207c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	021a      	lsls	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	4a58      	ldr	r2, [pc, #352]	; (800223c <ADC_Init+0x1f4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e00f      	b.n	8002146 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002144:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0202 	bic.w	r2, r2, #2
 8002154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
 8002160:	005a      	lsls	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002182:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002192:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	3b01      	subs	r3, #1
 80021a0:	035a      	lsls	r2, r3, #13
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e007      	b.n	80021bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	051a      	lsls	r2, r3, #20
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021fe:	025a      	lsls	r2, r3, #9
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	029a      	lsls	r2, r3, #10
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40012300 	.word	0x40012300
 800223c:	0f000001 	.word	0x0f000001

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff47 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff5c 	bl	8002288 <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff8e 	bl	80022f8 <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5d 	bl	80022a4 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffb0 	bl	8002360 <SysTick_Config>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e165      	b.n	80026f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 8154 	bne.w	80026ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d005      	beq.n	800245e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245a:	2b02      	cmp	r3, #2
 800245c:	d130      	bne.n	80024c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0201 	and.w	r2, r3, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d017      	beq.n	80024fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d123      	bne.n	8002550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80ae 	beq.w	80026ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b5d      	ldr	r3, [pc, #372]	; (800270c <HAL_GPIO_Init+0x300>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a5c      	ldr	r2, [pc, #368]	; (800270c <HAL_GPIO_Init+0x300>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_GPIO_Init+0x300>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a58      	ldr	r2, [pc, #352]	; (8002710 <HAL_GPIO_Init+0x304>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x308>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x30c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_GPIO_Init+0x310>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x314>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_GPIO_Init+0x318>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x20a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_GPIO_Init+0x31c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x206>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x320>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x202>
 800260a:	2306      	movs	r3, #6
 800260c:	e00c      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 800260e:	2307      	movs	r3, #7
 8002610:	e00a      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002612:	2305      	movs	r3, #5
 8002614:	e008      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002616:	2304      	movs	r3, #4
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 800261a:	2303      	movs	r3, #3
 800261c:	e004      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 800261e:	2302      	movs	r3, #2
 8002620:	e002      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002626:	2300      	movs	r3, #0
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f002 0203 	and.w	r2, r2, #3
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	4093      	lsls	r3, r2
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002638:	4935      	ldr	r1, [pc, #212]	; (8002710 <HAL_GPIO_Init+0x304>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_GPIO_Init+0x324>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266a:	4a31      	ldr	r2, [pc, #196]	; (8002730 <HAL_GPIO_Init+0x324>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_GPIO_Init+0x324>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002694:	4a26      	ldr	r2, [pc, #152]	; (8002730 <HAL_GPIO_Init+0x324>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_GPIO_Init+0x324>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_GPIO_Init+0x324>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_GPIO_Init+0x324>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_GPIO_Init+0x324>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	f67f ae96 	bls.w	8002428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	40013800 	.word	0x40013800
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400
 800271c:	40020800 	.word	0x40020800
 8002720:	40020c00 	.word	0x40020c00
 8002724:	40021000 	.word	0x40021000
 8002728:	40021400 	.word	0x40021400
 800272c:	40021800 	.word	0x40021800
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	041a      	lsls	r2, r3, #16
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43d9      	mvns	r1, r3
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	400b      	ands	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0cc      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d90c      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b65      	ldr	r3, [pc, #404]	; (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d044      	beq.n	80028bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d119      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d003      	beq.n	800285a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	2b03      	cmp	r3, #3
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e067      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287a:	4b37      	ldr	r3, [pc, #220]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0203 	bic.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4934      	ldr	r1, [pc, #208]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800288c:	f7ff f8cc 	bl	8001a28 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	e00a      	b.n	80028aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7ff f8c8 	bl	8001a28 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e04f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 020c 	and.w	r2, r3, #12
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1eb      	bne.n	8002894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d20c      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f855 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	; (800295c <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f82c 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00
 8002958:	40023800 	.word	0x40023800
 800295c:	08005910 	.word	0x08005910
 8002960:	20000144 	.word	0x20000144
 8002964:	20000148 	.word	0x20000148

08002968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000144 	.word	0x20000144

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002984:	f7ff fff0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0a9b      	lsrs	r3, r3, #10
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08005920 	.word	0x08005920

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029ac:	f7ff ffdc 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0b5b      	lsrs	r3, r3, #13
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	08005920 	.word	0x08005920

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d4:	b0ae      	sub	sp, #184	; 0xb8
 80029d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f6:	4bcb      	ldr	r3, [pc, #812]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	f200 8206 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x440>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002e11 	.word	0x08002e11
 8002a14:	08002e11 	.word	0x08002e11
 8002a18:	08002e11 	.word	0x08002e11
 8002a1c:	08002a49 	.word	0x08002a49
 8002a20:	08002e11 	.word	0x08002e11
 8002a24:	08002e11 	.word	0x08002e11
 8002a28:	08002e11 	.word	0x08002e11
 8002a2c:	08002a51 	.word	0x08002a51
 8002a30:	08002e11 	.word	0x08002e11
 8002a34:	08002e11 	.word	0x08002e11
 8002a38:	08002e11 	.word	0x08002e11
 8002a3c:	08002c41 	.word	0x08002c41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4bb9      	ldr	r3, [pc, #740]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a46:	e1e7      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a48:	4bb8      	ldr	r3, [pc, #736]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a4e:	e1e3      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a50:	4bb4      	ldr	r3, [pc, #720]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5c:	4bb1      	ldr	r3, [pc, #708]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d071      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a68:	4bae      	ldr	r3, [pc, #696]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a74:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	0159      	lsls	r1, r3, #5
 8002a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa0:	0150      	lsls	r0, r2, #5
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	1a51      	subs	r1, r2, r1
 8002aaa:	6439      	str	r1, [r7, #64]	; 0x40
 8002aac:	4629      	mov	r1, r5
 8002aae:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	018b      	lsls	r3, r1, #6
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aca:	4641      	mov	r1, r8
 8002acc:	018a      	lsls	r2, r1, #6
 8002ace:	4641      	mov	r1, r8
 8002ad0:	1a51      	subs	r1, r2, r1
 8002ad2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ae8:	4649      	mov	r1, r9
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4641      	mov	r1, r8
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4641      	mov	r1, r8
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4622      	mov	r2, r4
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
 8002b02:	462b      	mov	r3, r5
 8002b04:	460a      	mov	r2, r1
 8002b06:	eb42 0303 	adc.w	r3, r2, r3
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b18:	4629      	mov	r1, r5
 8002b1a:	024b      	lsls	r3, r1, #9
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b22:	4621      	mov	r1, r4
 8002b24:	024a      	lsls	r2, r1, #9
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b3c:	f7fd fff0 	bl	8000b20 <__aeabi_uldivmod>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4613      	mov	r3, r2
 8002b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b4a:	e067      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b58:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b66:	2300      	movs	r3, #0
 8002b68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4641      	mov	r1, r8
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4641      	mov	r1, r8
 8002bb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bce:	4692      	mov	sl, r2
 8002bd0:	469b      	mov	fp, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	028b      	lsls	r3, r1, #10
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	028a      	lsls	r2, r1, #10
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c04:	2200      	movs	r2, #0
 8002c06:	673b      	str	r3, [r7, #112]	; 0x70
 8002c08:	677a      	str	r2, [r7, #116]	; 0x74
 8002c0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c0e:	f7fd ff87 	bl	8000b20 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4613      	mov	r3, r2
 8002c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	3301      	adds	r3, #1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c3e:	e0eb      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c40:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d06b      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	2200      	movs	r2, #0
 8002c60:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c74:	4622      	mov	r2, r4
 8002c76:	462b      	mov	r3, r5
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0159      	lsls	r1, r3, #5
 8002c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c86:	0150      	lsls	r0, r2, #5
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	1a51      	subs	r1, r2, r1
 8002c90:	61b9      	str	r1, [r7, #24]
 8002c92:	4629      	mov	r1, r5
 8002c94:	eb63 0301 	sbc.w	r3, r3, r1
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ca6:	4659      	mov	r1, fp
 8002ca8:	018b      	lsls	r3, r1, #6
 8002caa:	4651      	mov	r1, sl
 8002cac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	018a      	lsls	r2, r1, #6
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	ebb2 0801 	subs.w	r8, r2, r1
 8002cba:	4659      	mov	r1, fp
 8002cbc:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ccc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd4:	4690      	mov	r8, r2
 8002cd6:	4699      	mov	r9, r3
 8002cd8:	4623      	mov	r3, r4
 8002cda:	eb18 0303 	adds.w	r3, r8, r3
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	eb49 0303 	adc.w	r3, r9, r3
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	024b      	lsls	r3, r1, #9
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cfe:	4621      	mov	r1, r4
 8002d00:	024a      	lsls	r2, r1, #9
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d0e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d14:	f7fd ff04 	bl	8000b20 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d22:	e065      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x420>
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d30:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	2200      	movs	r2, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
 8002d42:	2300      	movs	r3, #0
 8002d44:	657b      	str	r3, [r7, #84]	; 0x54
 8002d46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4641      	mov	r1, r8
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	4649      	mov	r1, r9
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	1a54      	subs	r4, r2, r1
 8002d8e:	4659      	mov	r1, fp
 8002d90:	eb63 0501 	sbc.w	r5, r3, r1
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	00eb      	lsls	r3, r5, #3
 8002d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da2:	00e2      	lsls	r2, r4, #3
 8002da4:	4614      	mov	r4, r2
 8002da6:	461d      	mov	r5, r3
 8002da8:	4643      	mov	r3, r8
 8002daa:	18e3      	adds	r3, r4, r3
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	464b      	mov	r3, r9
 8002db0:	eb45 0303 	adc.w	r3, r5, r3
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	028b      	lsls	r3, r1, #10
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dcc:	4621      	mov	r1, r4
 8002dce:	028a      	lsls	r2, r1, #10
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd8:	2200      	movs	r2, #0
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ddc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002de2:	f7fd fe9d 	bl	8000b20 <__aeabi_uldivmod>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4613      	mov	r3, r2
 8002dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0f1b      	lsrs	r3, r3, #28
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e0e:	e003      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	37b8      	adds	r7, #184	; 0xb8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00f42400 	.word	0x00f42400

08002e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e28d      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8083 	beq.w	8002f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e50:	4b94      	ldr	r3, [pc, #592]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d019      	beq.n	8002e90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e5c:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e68:	4b8e      	ldr	r3, [pc, #568]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e74:	d00c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05b      	beq.n	8002f54 <HAL_RCC_OscConfig+0x124>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d157      	bne.n	8002f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e25a      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x90>
 8002eb2:	4b7c      	ldr	r3, [pc, #496]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7b      	ldr	r2, [pc, #492]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xcc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xb4>
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a75      	ldr	r2, [pc, #468]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b73      	ldr	r3, [pc, #460]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a72      	ldr	r2, [pc, #456]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xcc>
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6e      	ldr	r2, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6b      	ldr	r2, [pc, #428]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fd90 	bl	8001a28 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fd8c 	bl	8001a28 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e21f      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xdc>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fd7c 	bl	8001a28 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe fd78 	bl	8001a28 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e20b      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b57      	ldr	r3, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x104>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06f      	beq.n	8003042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f62:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d11c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x186>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1d3      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4937      	ldr	r1, [pc, #220]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e03a      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x278>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe fd25 	bl	8001a28 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fe fd21 	bl	8001a28 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e1b4      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4925      	ldr	r1, [pc, #148]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	e015      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_OscConfig+0x278>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fd04 	bl	8001a28 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7fe fd00 	bl	8001a28 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e193      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d036      	beq.n	80030bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0x27c>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fce4 	bl	8001a28 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe fce0 	bl	8001a28 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e173      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x234>
 8003082:	e01b      	b.n	80030bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_OscConfig+0x27c>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe fccd 	bl	8001a28 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	e00e      	b.n	80030b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003092:	f7fe fcc9 	bl	8001a28 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d907      	bls.n	80030b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e15c      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	42470000 	.word	0x42470000
 80030ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b8a      	ldr	r3, [pc, #552]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8097 	beq.w	80031f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b83      	ldr	r3, [pc, #524]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b7f      	ldr	r3, [pc, #508]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a7e      	ldr	r2, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7fe fc89 	bl	8001a28 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fe fc85 	bl	8001a28 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e118      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b6c      	ldr	r3, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x31e>
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x358>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x340>
 8003156:	4b61      	ldr	r3, [pc, #388]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a60      	ldr	r2, [pc, #384]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0x358>
 8003170:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a59      	ldr	r2, [pc, #356]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	4b57      	ldr	r3, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a56      	ldr	r2, [pc, #344]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fe fc4a 	bl	8001a28 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fe fc46 	bl	8001a28 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0d7      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ee      	beq.n	8003198 <HAL_RCC_OscConfig+0x368>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fe fc34 	bl	8001a28 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fe fc30 	bl	8001a28 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0c1      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	4b40      	ldr	r3, [pc, #256]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ee      	bne.n	80031c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80ad 	beq.w	800335c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d060      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d145      	bne.n	80032a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCC_OscConfig+0x4b4>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fc04 	bl	8001a28 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fc00 	bl	8001a28 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e093      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	3b01      	subs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x4b4>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fbd5 	bl	8001a28 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fbd1 	bl	8001a28 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e064      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x452>
 80032a0:	e05c      	b.n	800335c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCC_OscConfig+0x4b4>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fbbe 	bl	8001a28 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fbba 	bl	8001a28 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04d      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x480>
 80032ce:	e045      	b.n	800335c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e040      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e8:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <HAL_RCC_OscConfig+0x538>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d030      	beq.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d129      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d122      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	4293      	cmp	r3, r2
 8003322:	d119      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d10f      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07b      	b.n	8003476 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338e:	d009      	beq.n	80033a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
 8003396:	e005      	b.n	80033a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe f9a6 	bl	8001710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0104 	and.w	r1, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0210 	and.w	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e03f      	b.n	8003510 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fe f9ab 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2224      	movs	r2, #36	; 0x24
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f828 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b0c0      	sub	sp, #256	; 0x100
 800351e:	af00      	add	r7, sp, #0
 8003520:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	ea40 0301 	orr.w	r3, r0, r1
 8003540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003570:	f021 010c 	bic.w	r1, r1, #12
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800357e:	430b      	orrs	r3, r1
 8003580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	6999      	ldr	r1, [r3, #24]
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	ea40 0301 	orr.w	r3, r0, r1
 800359e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b8f      	ldr	r3, [pc, #572]	; (80037e4 <UART_SetConfig+0x2cc>)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d005      	beq.n	80035b8 <UART_SetConfig+0xa0>
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b8d      	ldr	r3, [pc, #564]	; (80037e8 <UART_SetConfig+0x2d0>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d104      	bne.n	80035c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7ff f9f6 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 80035bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035c0:	e003      	b.n	80035ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035c2:	f7ff f9dd 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 80035c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d4:	f040 810c 	bne.w	80037f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035f2:	415b      	adcs	r3, r3
 80035f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fa:	4621      	mov	r1, r4
 80035fc:	eb12 0801 	adds.w	r8, r2, r1
 8003600:	4629      	mov	r1, r5
 8003602:	eb43 0901 	adc.w	r9, r3, r1
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800361a:	4690      	mov	r8, r2
 800361c:	4699      	mov	r9, r3
 800361e:	4623      	mov	r3, r4
 8003620:	eb18 0303 	adds.w	r3, r8, r3
 8003624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003628:	462b      	mov	r3, r5
 800362a:	eb49 0303 	adc.w	r3, r9, r3
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800363e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003646:	460b      	mov	r3, r1
 8003648:	18db      	adds	r3, r3, r3
 800364a:	653b      	str	r3, [r7, #80]	; 0x50
 800364c:	4613      	mov	r3, r2
 800364e:	eb42 0303 	adc.w	r3, r2, r3
 8003652:	657b      	str	r3, [r7, #84]	; 0x54
 8003654:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800365c:	f7fd fa60 	bl	8000b20 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <UART_SetConfig+0x2d4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003678:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800367c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	64b9      	str	r1, [r7, #72]	; 0x48
 8003688:	415b      	adcs	r3, r3
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003690:	4641      	mov	r1, r8
 8003692:	eb12 0a01 	adds.w	sl, r2, r1
 8003696:	4649      	mov	r1, r9
 8003698:	eb43 0b01 	adc.w	fp, r3, r1
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b0:	4692      	mov	sl, r2
 80036b2:	469b      	mov	fp, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036be:	464b      	mov	r3, r9
 80036c0:	eb4b 0303 	adc.w	r3, fp, r3
 80036c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036dc:	460b      	mov	r3, r1
 80036de:	18db      	adds	r3, r3, r3
 80036e0:	643b      	str	r3, [r7, #64]	; 0x40
 80036e2:	4613      	mov	r3, r2
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036f2:	f7fd fa15 	bl	8000b20 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <UART_SetConfig+0x2d4>)
 80036fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2264      	movs	r2, #100	; 0x64
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <UART_SetConfig+0x2d4>)
 8003714:	fba3 2302 	umull	r2, r3, r3, r2
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003720:	441c      	add	r4, r3
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800372c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003730:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	63b9      	str	r1, [r7, #56]	; 0x38
 800373c:	415b      	adcs	r3, r3
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6339      	str	r1, [r7, #48]	; 0x30
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003778:	464b      	mov	r3, r9
 800377a:	460a      	mov	r2, r1
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003790:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003798:	460b      	mov	r3, r1
 800379a:	18db      	adds	r3, r3, r3
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
 800379e:	4613      	mov	r3, r2
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037ae:	f7fd f9b7 	bl	8000b20 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <UART_SetConfig+0x2d4>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2164      	movs	r1, #100	; 0x64
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <UART_SetConfig+0x2d4>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4422      	add	r2, r4
 80037de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e0:	e105      	b.n	80039ee <UART_SetConfig+0x4d6>
 80037e2:	bf00      	nop
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40011400 	.word	0x40011400
 80037ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003802:	4642      	mov	r2, r8
 8003804:	464b      	mov	r3, r9
 8003806:	1891      	adds	r1, r2, r2
 8003808:	6239      	str	r1, [r7, #32]
 800380a:	415b      	adcs	r3, r3
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003812:	4641      	mov	r1, r8
 8003814:	1854      	adds	r4, r2, r1
 8003816:	4649      	mov	r1, r9
 8003818:	eb43 0501 	adc.w	r5, r3, r1
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	00eb      	lsls	r3, r5, #3
 8003826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382a:	00e2      	lsls	r2, r4, #3
 800382c:	4614      	mov	r4, r2
 800382e:	461d      	mov	r5, r3
 8003830:	4643      	mov	r3, r8
 8003832:	18e3      	adds	r3, r4, r3
 8003834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003838:	464b      	mov	r3, r9
 800383a:	eb45 0303 	adc.w	r3, r5, r3
 800383e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800384e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800385e:	4629      	mov	r1, r5
 8003860:	008b      	lsls	r3, r1, #2
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003868:	4621      	mov	r1, r4
 800386a:	008a      	lsls	r2, r1, #2
 800386c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003870:	f7fd f956 	bl	8000b20 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4b60      	ldr	r3, [pc, #384]	; (80039fc <UART_SetConfig+0x4e4>)
 800387a:	fba3 2302 	umull	r2, r3, r3, r2
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	011c      	lsls	r4, r3, #4
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800388c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	61b9      	str	r1, [r7, #24]
 800389c:	415b      	adcs	r3, r3
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6139      	str	r1, [r7, #16]
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038fc:	4649      	mov	r1, r9
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	4641      	mov	r1, r8
 8003902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003906:	4641      	mov	r1, r8
 8003908:	008a      	lsls	r2, r1, #2
 800390a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800390e:	f7fd f907 	bl	8000b20 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <UART_SetConfig+0x4e4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <UART_SetConfig+0x4e4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	441c      	add	r4, r3
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
 8003940:	677a      	str	r2, [r7, #116]	; 0x74
 8003942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003946:	4642      	mov	r2, r8
 8003948:	464b      	mov	r3, r9
 800394a:	1891      	adds	r1, r2, r2
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	415b      	adcs	r3, r3
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003956:	4641      	mov	r1, r8
 8003958:	1851      	adds	r1, r2, r1
 800395a:	6039      	str	r1, [r7, #0]
 800395c:	4649      	mov	r1, r9
 800395e:	414b      	adcs	r3, r1
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800396e:	4659      	mov	r1, fp
 8003970:	00cb      	lsls	r3, r1, #3
 8003972:	4651      	mov	r1, sl
 8003974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003978:	4651      	mov	r1, sl
 800397a:	00ca      	lsls	r2, r1, #3
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	4603      	mov	r3, r0
 8003982:	4642      	mov	r2, r8
 8003984:	189b      	adds	r3, r3, r2
 8003986:	66bb      	str	r3, [r7, #104]	; 0x68
 8003988:	464b      	mov	r3, r9
 800398a:	460a      	mov	r2, r1
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	663b      	str	r3, [r7, #96]	; 0x60
 800399c:	667a      	str	r2, [r7, #100]	; 0x64
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039aa:	4649      	mov	r1, r9
 80039ac:	008b      	lsls	r3, r1, #2
 80039ae:	4641      	mov	r1, r8
 80039b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b4:	4641      	mov	r1, r8
 80039b6:	008a      	lsls	r2, r1, #2
 80039b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039bc:	f7fd f8b0 	bl	8000b20 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <UART_SetConfig+0x4e4>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2164      	movs	r1, #100	; 0x64
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <UART_SetConfig+0x4e4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4422      	add	r2, r4
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	51eb851f 	.word	0x51eb851f

08003a00 <arm_cfft_init_f32>:
 8003a00:	4603      	mov	r3, r0
 8003a02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	b410      	push	{r4}
 8003a0c:	8019      	strh	r1, [r3, #0]
 8003a0e:	6058      	str	r0, [r3, #4]
 8003a10:	d033      	beq.n	8003a7a <arm_cfft_init_f32+0x7a>
 8003a12:	d918      	bls.n	8003a46 <arm_cfft_init_f32+0x46>
 8003a14:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003a18:	d027      	beq.n	8003a6a <arm_cfft_init_f32+0x6a>
 8003a1a:	d90c      	bls.n	8003a36 <arm_cfft_init_f32+0x36>
 8003a1c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a20:	d11e      	bne.n	8003a60 <arm_cfft_init_f32+0x60>
 8003a22:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <arm_cfft_init_f32+0x80>)
 8003a24:	8994      	ldrh	r4, [r2, #12]
 8003a26:	819c      	strh	r4, [r3, #12]
 8003a28:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8003a2c:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8003a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a3a:	d018      	beq.n	8003a6e <arm_cfft_init_f32+0x6e>
 8003a3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003a40:	d10e      	bne.n	8003a60 <arm_cfft_init_f32+0x60>
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <arm_cfft_init_f32+0x84>)
 8003a44:	e7ee      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a46:	2940      	cmp	r1, #64	; 0x40
 8003a48:	d013      	beq.n	8003a72 <arm_cfft_init_f32+0x72>
 8003a4a:	d903      	bls.n	8003a54 <arm_cfft_init_f32+0x54>
 8003a4c:	2980      	cmp	r1, #128	; 0x80
 8003a4e:	d107      	bne.n	8003a60 <arm_cfft_init_f32+0x60>
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <arm_cfft_init_f32+0x88>)
 8003a52:	e7e7      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a54:	2910      	cmp	r1, #16
 8003a56:	d00e      	beq.n	8003a76 <arm_cfft_init_f32+0x76>
 8003a58:	2920      	cmp	r1, #32
 8003a5a:	d101      	bne.n	8003a60 <arm_cfft_init_f32+0x60>
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <arm_cfft_init_f32+0x8c>)
 8003a5e:	e7e1      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	4a09      	ldr	r2, [pc, #36]	; (8003a90 <arm_cfft_init_f32+0x90>)
 8003a6c:	e7da      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <arm_cfft_init_f32+0x94>)
 8003a70:	e7d8      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <arm_cfft_init_f32+0x98>)
 8003a74:	e7d6      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <arm_cfft_init_f32+0x9c>)
 8003a78:	e7d4      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <arm_cfft_init_f32+0xa0>)
 8003a7c:	e7d2      	b.n	8003a24 <arm_cfft_init_f32+0x24>
 8003a7e:	bf00      	nop
 8003a80:	08005988 	.word	0x08005988
 8003a84:	08005928 	.word	0x08005928
 8003a88:	08005938 	.word	0x08005938
 8003a8c:	08005978 	.word	0x08005978
 8003a90:	08005958 	.word	0x08005958
 8003a94:	08005998 	.word	0x08005998
 8003a98:	080059a8 	.word	0x080059a8
 8003a9c:	08005948 	.word	0x08005948
 8003aa0:	08005968 	.word	0x08005968

08003aa4 <arm_cfft_radix8by2_f32>:
 8003aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa8:	ed2d 8b08 	vpush	{d8-d11}
 8003aac:	f8b0 c000 	ldrh.w	ip, [r0]
 8003ab0:	6842      	ldr	r2, [r0, #4]
 8003ab2:	4607      	mov	r7, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003aba:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8003abe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	f000 80b0 	beq.w	8003c28 <arm_cfft_radix8by2_f32+0x184>
 8003ac8:	008c      	lsls	r4, r1, #2
 8003aca:	3410      	adds	r4, #16
 8003acc:	f100 0310 	add.w	r3, r0, #16
 8003ad0:	1906      	adds	r6, r0, r4
 8003ad2:	3210      	adds	r2, #16
 8003ad4:	4444      	add	r4, r8
 8003ad6:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003ada:	f108 0510 	add.w	r5, r8, #16
 8003ade:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003ae2:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003ae6:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003aea:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003aee:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003af2:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003af6:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003afa:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003afe:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003b02:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003b06:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003b0a:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003b0e:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003b12:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003b16:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003b1a:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003b1e:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003b22:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003b26:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003b2a:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003b2e:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003b32:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003b36:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003b3a:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003b3e:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003b42:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003b46:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003b4a:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003b4e:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003b52:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003b56:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003b5a:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003b5e:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003b62:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003b66:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003b6a:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003b6e:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003b72:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003b76:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003b7a:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003b7e:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003b82:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003b86:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003b8a:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003b8e:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003b92:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003b96:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003b9a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003b9e:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003ba2:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003ba6:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003baa:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003bae:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003bb2:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003bb6:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003bba:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003bbe:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003bc2:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003bc6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003bca:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003bce:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003bd2:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003bd6:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003bda:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003bde:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003be2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003be6:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003bea:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003bee:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003bf2:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003bf6:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003bfa:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003bfe:	3310      	adds	r3, #16
 8003c00:	4563      	cmp	r3, ip
 8003c02:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003c06:	f106 0610 	add.w	r6, r6, #16
 8003c0a:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003c0e:	f102 0210 	add.w	r2, r2, #16
 8003c12:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003c16:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003c1a:	f105 0510 	add.w	r5, r5, #16
 8003c1e:	f104 0410 	add.w	r4, r4, #16
 8003c22:	f47f af5c 	bne.w	8003ade <arm_cfft_radix8by2_f32+0x3a>
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	b289      	uxth	r1, r1
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	9101      	str	r1, [sp, #4]
 8003c2e:	f000 fc1d 	bl	800446c <arm_radix8_butterfly_f32>
 8003c32:	9901      	ldr	r1, [sp, #4]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4640      	mov	r0, r8
 8003c38:	2302      	movs	r3, #2
 8003c3a:	b002      	add	sp, #8
 8003c3c:	ecbd 8b08 	vpop	{d8-d11}
 8003c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c44:	f000 bc12 	b.w	800446c <arm_radix8_butterfly_f32>

08003c48 <arm_cfft_radix8by4_f32>:
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4c:	ed2d 8b0a 	vpush	{d8-d12}
 8003c50:	8803      	ldrh	r3, [r0, #0]
 8003c52:	6842      	ldr	r2, [r0, #4]
 8003c54:	b08d      	sub	sp, #52	; 0x34
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	900a      	str	r0, [sp, #40]	; 0x28
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c60:	edd1 5a00 	vldr	s11, [r1]
 8003c64:	edd0 7a00 	vldr	s15, [r0]
 8003c68:	edd1 3a01 	vldr	s7, [r1, #4]
 8003c6c:	ed90 5a01 	vldr	s10, [r0, #4]
 8003c70:	9108      	str	r1, [sp, #32]
 8003c72:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8003c76:	ed96 7a00 	vldr	s14, [r6]
 8003c7a:	ed96 4a01 	vldr	s8, [r6, #4]
 8003c7e:	9607      	str	r6, [sp, #28]
 8003c80:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003c84:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8003c88:	edd8 4a00 	vldr	s9, [r8]
 8003c8c:	ed98 3a01 	vldr	s6, [r8, #4]
 8003c90:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003c94:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003c98:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	edc0 6a00 	vstr	s13, [r0]
 8003ca2:	edd6 5a01 	vldr	s11, [r6, #4]
 8003ca6:	edd8 2a01 	vldr	s5, [r8, #4]
 8003caa:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003cae:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003cb2:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003cb6:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003cba:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003cbe:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003cc2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003cc6:	3408      	adds	r4, #8
 8003cc8:	ee35 4a47 	vsub.f32	s8, s10, s14
 8003ccc:	460d      	mov	r5, r1
 8003cce:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003cd2:	4637      	mov	r7, r6
 8003cd4:	9402      	str	r4, [sp, #8]
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	460c      	mov	r4, r1
 8003cda:	3508      	adds	r5, #8
 8003cdc:	0859      	lsrs	r1, r3, #1
 8003cde:	9109      	str	r1, [sp, #36]	; 0x24
 8003ce0:	9706      	str	r7, [sp, #24]
 8003ce2:	9505      	str	r5, [sp, #20]
 8003ce4:	f102 0708 	add.w	r7, r2, #8
 8003ce8:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003cec:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003cf0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003cf4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003cf8:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003cfc:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003d00:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003d04:	3902      	subs	r1, #2
 8003d06:	4645      	mov	r5, r8
 8003d08:	9701      	str	r7, [sp, #4]
 8003d0a:	f102 0c18 	add.w	ip, r2, #24
 8003d0e:	f102 0710 	add.w	r7, r2, #16
 8003d12:	3508      	adds	r5, #8
 8003d14:	0849      	lsrs	r1, r1, #1
 8003d16:	edc0 5a01 	vstr	s11, [r0, #4]
 8003d1a:	9703      	str	r7, [sp, #12]
 8003d1c:	edc6 3a00 	vstr	s7, [r6]
 8003d20:	ed86 5a01 	vstr	s10, [r6, #4]
 8003d24:	f8cd c000 	str.w	ip, [sp]
 8003d28:	ed84 6a00 	vstr	s12, [r4]
 8003d2c:	edc4 6a01 	vstr	s13, [r4, #4]
 8003d30:	9504      	str	r5, [sp, #16]
 8003d32:	edc8 7a00 	vstr	s15, [r8]
 8003d36:	ed88 7a01 	vstr	s14, [r8, #4]
 8003d3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d3c:	f000 8138 	beq.w	8003fb0 <arm_cfft_radix8by4_f32+0x368>
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	3b0c      	subs	r3, #12
 8003d44:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003d48:	f106 0510 	add.w	r5, r6, #16
 8003d4c:	4626      	mov	r6, r4
 8003d4e:	46bb      	mov	fp, r7
 8003d50:	f102 0a20 	add.w	sl, r2, #32
 8003d54:	f102 0930 	add.w	r9, r2, #48	; 0x30
 8003d58:	f106 0710 	add.w	r7, r6, #16
 8003d5c:	4443      	add	r3, r8
 8003d5e:	f100 0e10 	add.w	lr, r0, #16
 8003d62:	3c0c      	subs	r4, #12
 8003d64:	f1a8 060c 	sub.w	r6, r8, #12
 8003d68:	f108 0210 	add.w	r2, r8, #16
 8003d6c:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003d70:	ed57 5a02 	vldr	s11, [r7, #-8]
 8003d74:	ed55 7a02 	vldr	s15, [r5, #-8]
 8003d78:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003d7c:	ed57 6a01 	vldr	s13, [r7, #-4]
 8003d80:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003d84:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003d88:	ed15 8a01 	vldr	s16, [r5, #-4]
 8003d8c:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003d90:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003d94:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003d98:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003d9c:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003da0:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003da4:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003da8:	ed15 7a01 	vldr	s14, [r5, #-4]
 8003dac:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003db0:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003db4:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003db8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003dbc:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003dc0:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003dc4:	ed96 7a02 	vldr	s14, [r6, #8]
 8003dc8:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003dcc:	ed94 ba02 	vldr	s22, [r4, #8]
 8003dd0:	edd3 9a02 	vldr	s19, [r3, #8]
 8003dd4:	edd6 2a01 	vldr	s5, [r6, #4]
 8003dd8:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003ddc:	ed93 5a01 	vldr	s10, [r3, #4]
 8003de0:	edd4 0a01 	vldr	s1, [r4, #4]
 8003de4:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003de8:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003dec:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003df0:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003df4:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003df8:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003dfc:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003e00:	ed94 7a01 	vldr	s14, [r4, #4]
 8003e04:	edd3 8a01 	vldr	s17, [r3, #4]
 8003e08:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003e0c:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003e10:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003e14:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003e18:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003e1c:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8003e20:	ed1b aa02 	vldr	s20, [fp, #-8]
 8003e24:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003e28:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003e2c:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003e30:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003e34:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003e38:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003e3c:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003e40:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003e44:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003e48:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003e4c:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003e50:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003e54:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003e58:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003e5c:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003e60:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003e64:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003e68:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003e6c:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003e70:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003e74:	ed05 7a02 	vstr	s14, [r5, #-8]
 8003e78:	ed45 3a01 	vstr	s7, [r5, #-4]
 8003e7c:	edc4 8a01 	vstr	s17, [r4, #4]
 8003e80:	ed84 aa02 	vstr	s20, [r4, #8]
 8003e84:	ed5a 3a04 	vldr	s7, [sl, #-16]
 8003e88:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003e8c:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003e90:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8003e94:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003e98:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003e9c:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003ea0:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003ea4:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003ea8:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003eac:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003eb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003eb4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003eb8:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003ebc:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003ec0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003ec4:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003ec8:	ee79 3a29 	vadd.f32	s7, s18, s19
 8003ecc:	ee75 6a60 	vsub.f32	s13, s10, s1
 8003ed0:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8003ed4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003ed8:	ed47 3a02 	vstr	s7, [r7, #-8]
 8003edc:	ed07 6a01 	vstr	s12, [r7, #-4]
 8003ee0:	ed86 7a01 	vstr	s14, [r6, #4]
 8003ee4:	ed86 4a02 	vstr	s8, [r6, #8]
 8003ee8:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003eec:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003ef0:	ed59 5a06 	vldr	s11, [r9, #-24]	; 0xffffffe8
 8003ef4:	ed59 6a05 	vldr	s13, [r9, #-20]	; 0xffffffec
 8003ef8:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003efc:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003f00:	ee67 2a26 	vmul.f32	s5, s14, s13
 8003f04:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003f08:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003f0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003f10:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003f14:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003f18:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003f1c:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003f20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003f24:	ee75 5a24 	vadd.f32	s11, s10, s9
 8003f28:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003f2c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003f30:	3901      	subs	r1, #1
 8003f32:	ed42 5a02 	vstr	s11, [r2, #-8]
 8003f36:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003f3a:	f10e 0e08 	add.w	lr, lr, #8
 8003f3e:	ed83 3a02 	vstr	s6, [r3, #8]
 8003f42:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f46:	f1ac 0c08 	sub.w	ip, ip, #8
 8003f4a:	f10b 0b08 	add.w	fp, fp, #8
 8003f4e:	f105 0508 	add.w	r5, r5, #8
 8003f52:	f1a4 0408 	sub.w	r4, r4, #8
 8003f56:	f10a 0a10 	add.w	sl, sl, #16
 8003f5a:	f107 0708 	add.w	r7, r7, #8
 8003f5e:	f1a6 0608 	sub.w	r6, r6, #8
 8003f62:	f109 0918 	add.w	r9, r9, #24
 8003f66:	f102 0208 	add.w	r2, r2, #8
 8003f6a:	f1a3 0308 	sub.w	r3, r3, #8
 8003f6e:	f47f aefd 	bne.w	8003d6c <arm_cfft_radix8by4_f32+0x124>
 8003f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f74:	9902      	ldr	r1, [sp, #8]
 8003f76:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003f7a:	9102      	str	r1, [sp, #8]
 8003f7c:	9901      	ldr	r1, [sp, #4]
 8003f7e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003f82:	9101      	str	r1, [sp, #4]
 8003f84:	9906      	ldr	r1, [sp, #24]
 8003f86:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003f8a:	9106      	str	r1, [sp, #24]
 8003f8c:	9903      	ldr	r1, [sp, #12]
 8003f8e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003f92:	9103      	str	r1, [sp, #12]
 8003f94:	9905      	ldr	r1, [sp, #20]
 8003f96:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003f9a:	9105      	str	r1, [sp, #20]
 8003f9c:	9904      	ldr	r1, [sp, #16]
 8003f9e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003fa2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003fa6:	9204      	str	r2, [sp, #16]
 8003fa8:	9a00      	ldr	r2, [sp, #0]
 8003faa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	9902      	ldr	r1, [sp, #8]
 8003fb2:	9d05      	ldr	r5, [sp, #20]
 8003fb4:	ed91 4a00 	vldr	s8, [r1]
 8003fb8:	edd5 6a00 	vldr	s13, [r5]
 8003fbc:	9b06      	ldr	r3, [sp, #24]
 8003fbe:	9c04      	ldr	r4, [sp, #16]
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ed94 3a00 	vldr	s6, [r4]
 8003fc8:	edd5 4a01 	vldr	s9, [r5, #4]
 8003fcc:	edd1 3a01 	vldr	s7, [r1, #4]
 8003fd0:	ed94 2a01 	vldr	s4, [r4, #4]
 8003fd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fd8:	9a01      	ldr	r2, [sp, #4]
 8003fda:	ee34 6a26 	vadd.f32	s12, s8, s13
 8003fde:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8003fe2:	ee37 5a86 	vadd.f32	s10, s15, s12
 8003fe6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003fea:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003fee:	ee74 6a66 	vsub.f32	s13, s8, s13
 8003ff2:	ed81 5a00 	vstr	s10, [r1]
 8003ff6:	ed93 5a01 	vldr	s10, [r3, #4]
 8003ffa:	edd4 4a01 	vldr	s9, [r4, #4]
 8003ffe:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004002:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004006:	ee35 5a24 	vadd.f32	s10, s10, s9
 800400a:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800400e:	ed81 5a01 	vstr	s10, [r1, #4]
 8004012:	edd2 1a00 	vldr	s3, [r2]
 8004016:	edd2 2a01 	vldr	s5, [r2, #4]
 800401a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800401e:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004022:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004026:	ee36 6a67 	vsub.f32	s12, s12, s15
 800402a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800402e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004032:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004036:	ee25 5a21 	vmul.f32	s10, s10, s3
 800403a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800403e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004042:	edc3 2a00 	vstr	s5, [r3]
 8004046:	ed83 5a01 	vstr	s10, [r3, #4]
 800404a:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800404e:	9b03      	ldr	r3, [sp, #12]
 8004050:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004054:	ed93 4a01 	vldr	s8, [r3, #4]
 8004058:	ed93 5a00 	vldr	s10, [r3]
 800405c:	9b00      	ldr	r3, [sp, #0]
 800405e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004062:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004066:	ee25 5a85 	vmul.f32	s10, s11, s10
 800406a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800406e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004072:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004076:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800407a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800407e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004082:	ed85 6a01 	vstr	s12, [r5, #4]
 8004086:	edc5 5a00 	vstr	s11, [r5]
 800408a:	edd3 5a01 	vldr	s11, [r3, #4]
 800408e:	edd3 6a00 	vldr	s13, [r3]
 8004092:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004096:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800409a:	ee27 6a26 	vmul.f32	s12, s14, s13
 800409e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040a2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80040a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80040aa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80040ae:	ee76 7a27 	vadd.f32	s15, s12, s15
 80040b2:	ed84 7a01 	vstr	s14, [r4, #4]
 80040b6:	edc4 7a00 	vstr	s15, [r4]
 80040ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80040bc:	9100      	str	r1, [sp, #0]
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	2304      	movs	r3, #4
 80040c2:	f000 f9d3 	bl	800446c <arm_radix8_butterfly_f32>
 80040c6:	9807      	ldr	r0, [sp, #28]
 80040c8:	9900      	ldr	r1, [sp, #0]
 80040ca:	6862      	ldr	r2, [r4, #4]
 80040cc:	2304      	movs	r3, #4
 80040ce:	f000 f9cd 	bl	800446c <arm_radix8_butterfly_f32>
 80040d2:	9808      	ldr	r0, [sp, #32]
 80040d4:	9900      	ldr	r1, [sp, #0]
 80040d6:	6862      	ldr	r2, [r4, #4]
 80040d8:	2304      	movs	r3, #4
 80040da:	f000 f9c7 	bl	800446c <arm_radix8_butterfly_f32>
 80040de:	9900      	ldr	r1, [sp, #0]
 80040e0:	6862      	ldr	r2, [r4, #4]
 80040e2:	4640      	mov	r0, r8
 80040e4:	2304      	movs	r3, #4
 80040e6:	b00d      	add	sp, #52	; 0x34
 80040e8:	ecbd 8b0a 	vpop	{d8-d12}
 80040ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f0:	f000 b9bc 	b.w	800446c <arm_radix8_butterfly_f32>

080040f4 <arm_cfft_f32>:
 80040f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f8:	2a01      	cmp	r2, #1
 80040fa:	8805      	ldrh	r5, [r0, #0]
 80040fc:	4607      	mov	r7, r0
 80040fe:	4690      	mov	r8, r2
 8004100:	460c      	mov	r4, r1
 8004102:	4699      	mov	r9, r3
 8004104:	d05c      	beq.n	80041c0 <arm_cfft_f32+0xcc>
 8004106:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800410a:	d054      	beq.n	80041b6 <arm_cfft_f32+0xc2>
 800410c:	d810      	bhi.n	8004130 <arm_cfft_f32+0x3c>
 800410e:	2d40      	cmp	r5, #64	; 0x40
 8004110:	d015      	beq.n	800413e <arm_cfft_f32+0x4a>
 8004112:	d94c      	bls.n	80041ae <arm_cfft_f32+0xba>
 8004114:	2d80      	cmp	r5, #128	; 0x80
 8004116:	d103      	bne.n	8004120 <arm_cfft_f32+0x2c>
 8004118:	4621      	mov	r1, r4
 800411a:	4638      	mov	r0, r7
 800411c:	f7ff fcc2 	bl	8003aa4 <arm_cfft_radix8by2_f32>
 8004120:	f1b9 0f00 	cmp.w	r9, #0
 8004124:	d114      	bne.n	8004150 <arm_cfft_f32+0x5c>
 8004126:	f1b8 0f01 	cmp.w	r8, #1
 800412a:	d019      	beq.n	8004160 <arm_cfft_f32+0x6c>
 800412c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004130:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004134:	d03f      	beq.n	80041b6 <arm_cfft_f32+0xc2>
 8004136:	d933      	bls.n	80041a0 <arm_cfft_f32+0xac>
 8004138:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800413c:	d1f0      	bne.n	8004120 <arm_cfft_f32+0x2c>
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	2301      	movs	r3, #1
 8004142:	4629      	mov	r1, r5
 8004144:	4620      	mov	r0, r4
 8004146:	f000 f991 	bl	800446c <arm_radix8_butterfly_f32>
 800414a:	f1b9 0f00 	cmp.w	r9, #0
 800414e:	d0ea      	beq.n	8004126 <arm_cfft_f32+0x32>
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	89b9      	ldrh	r1, [r7, #12]
 8004154:	4620      	mov	r0, r4
 8004156:	f000 f845 	bl	80041e4 <arm_bitreversal_32>
 800415a:	f1b8 0f01 	cmp.w	r8, #1
 800415e:	d1e5      	bne.n	800412c <arm_cfft_f32+0x38>
 8004160:	ee07 5a90 	vmov	s15, r5
 8004164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800416c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004170:	2d00      	cmp	r5, #0
 8004172:	d0db      	beq.n	800412c <arm_cfft_f32+0x38>
 8004174:	f104 0108 	add.w	r1, r4, #8
 8004178:	2300      	movs	r3, #0
 800417a:	3301      	adds	r3, #1
 800417c:	429d      	cmp	r5, r3
 800417e:	f101 0108 	add.w	r1, r1, #8
 8004182:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004186:	ed51 7a03 	vldr	s15, [r1, #-12]
 800418a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800418e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004192:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004196:	ed41 7a03 	vstr	s15, [r1, #-12]
 800419a:	d1ee      	bne.n	800417a <arm_cfft_f32+0x86>
 800419c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80041a4:	d0cb      	beq.n	800413e <arm_cfft_f32+0x4a>
 80041a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80041aa:	d0b5      	beq.n	8004118 <arm_cfft_f32+0x24>
 80041ac:	e7b8      	b.n	8004120 <arm_cfft_f32+0x2c>
 80041ae:	2d10      	cmp	r5, #16
 80041b0:	d0b2      	beq.n	8004118 <arm_cfft_f32+0x24>
 80041b2:	2d20      	cmp	r5, #32
 80041b4:	d1b4      	bne.n	8004120 <arm_cfft_f32+0x2c>
 80041b6:	4621      	mov	r1, r4
 80041b8:	4638      	mov	r0, r7
 80041ba:	f7ff fd45 	bl	8003c48 <arm_cfft_radix8by4_f32>
 80041be:	e7af      	b.n	8004120 <arm_cfft_f32+0x2c>
 80041c0:	b16d      	cbz	r5, 80041de <arm_cfft_f32+0xea>
 80041c2:	310c      	adds	r1, #12
 80041c4:	2600      	movs	r6, #0
 80041c6:	ed51 7a02 	vldr	s15, [r1, #-8]
 80041ca:	3601      	adds	r6, #1
 80041cc:	eef1 7a67 	vneg.f32	s15, s15
 80041d0:	42b5      	cmp	r5, r6
 80041d2:	ed41 7a02 	vstr	s15, [r1, #-8]
 80041d6:	f101 0108 	add.w	r1, r1, #8
 80041da:	d1f4      	bne.n	80041c6 <arm_cfft_f32+0xd2>
 80041dc:	e793      	b.n	8004106 <arm_cfft_f32+0x12>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0a4      	beq.n	800412c <arm_cfft_f32+0x38>
 80041e2:	e7b5      	b.n	8004150 <arm_cfft_f32+0x5c>

080041e4 <arm_bitreversal_32>:
 80041e4:	b1e9      	cbz	r1, 8004222 <arm_bitreversal_32+0x3e>
 80041e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e8:	2500      	movs	r5, #0
 80041ea:	f102 0e02 	add.w	lr, r2, #2
 80041ee:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80041f2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80041f6:	08a4      	lsrs	r4, r4, #2
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80041fe:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8004202:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8004206:	00a6      	lsls	r6, r4, #2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800420e:	3304      	adds	r3, #4
 8004210:	1d34      	adds	r4, r6, #4
 8004212:	3502      	adds	r5, #2
 8004214:	58c6      	ldr	r6, [r0, r3]
 8004216:	5907      	ldr	r7, [r0, r4]
 8004218:	50c7      	str	r7, [r0, r3]
 800421a:	428d      	cmp	r5, r1
 800421c:	5106      	str	r6, [r0, r4]
 800421e:	d3e6      	bcc.n	80041ee <arm_bitreversal_32+0xa>
 8004220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004222:	4770      	bx	lr

08004224 <arm_cmplx_mag_f32>:
 8004224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	ed2d 8b02 	vpush	{d8}
 800422c:	0897      	lsrs	r7, r2, #2
 800422e:	b084      	sub	sp, #16
 8004230:	d077      	beq.n	8004322 <arm_cmplx_mag_f32+0xfe>
 8004232:	f04f 0800 	mov.w	r8, #0
 8004236:	f100 0420 	add.w	r4, r0, #32
 800423a:	f101 0510 	add.w	r5, r1, #16
 800423e:	463e      	mov	r6, r7
 8004240:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8004244:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8004248:	ee20 0a00 	vmul.f32	s0, s0, s0
 800424c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004250:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004254:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425c:	f2c0 80c5 	blt.w	80043ea <arm_cmplx_mag_f32+0x1c6>
 8004260:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004268:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800426c:	f100 80cb 	bmi.w	8004406 <arm_cmplx_mag_f32+0x1e2>
 8004270:	ed05 8a04 	vstr	s16, [r5, #-16]
 8004274:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8004278:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800427c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004280:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004284:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004288:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	f2c0 80a8 	blt.w	80043e4 <arm_cmplx_mag_f32+0x1c0>
 8004294:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80042a0:	f100 80a8 	bmi.w	80043f4 <arm_cmplx_mag_f32+0x1d0>
 80042a4:	ed05 8a03 	vstr	s16, [r5, #-12]
 80042a8:	ed14 0a04 	vldr	s0, [r4, #-16]
 80042ac:	ed54 7a03 	vldr	s15, [r4, #-12]
 80042b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80042b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80042bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	f2c0 808b 	blt.w	80043de <arm_cmplx_mag_f32+0x1ba>
 80042c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80042d4:	f100 80a9 	bmi.w	800442a <arm_cmplx_mag_f32+0x206>
 80042d8:	ed05 8a02 	vstr	s16, [r5, #-8]
 80042dc:	ed14 0a02 	vldr	s0, [r4, #-8]
 80042e0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80042e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80042e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80042f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80042f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f8:	db6e      	blt.n	80043d8 <arm_cmplx_mag_f32+0x1b4>
 80042fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004306:	f100 8087 	bmi.w	8004418 <arm_cmplx_mag_f32+0x1f4>
 800430a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800430e:	3e01      	subs	r6, #1
 8004310:	f104 0420 	add.w	r4, r4, #32
 8004314:	f105 0510 	add.w	r5, r5, #16
 8004318:	d192      	bne.n	8004240 <arm_cmplx_mag_f32+0x1c>
 800431a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800431e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8004322:	f012 0203 	ands.w	r2, r2, #3
 8004326:	d052      	beq.n	80043ce <arm_cmplx_mag_f32+0x1aa>
 8004328:	ed90 0a00 	vldr	s0, [r0]
 800432c:	edd0 7a01 	vldr	s15, [r0, #4]
 8004330:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004334:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004338:	2300      	movs	r3, #0
 800433a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800433e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	bfb8      	it	lt
 8004348:	600b      	strlt	r3, [r1, #0]
 800434a:	db08      	blt.n	800435e <arm_cmplx_mag_f32+0x13a>
 800434c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004358:	d479      	bmi.n	800444e <arm_cmplx_mag_f32+0x22a>
 800435a:	ed81 8a00 	vstr	s16, [r1]
 800435e:	3a01      	subs	r2, #1
 8004360:	d035      	beq.n	80043ce <arm_cmplx_mag_f32+0x1aa>
 8004362:	ed90 0a02 	vldr	s0, [r0, #8]
 8004366:	edd0 7a03 	vldr	s15, [r0, #12]
 800436a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800436e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004372:	2300      	movs	r3, #0
 8004374:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004378:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	bfb8      	it	lt
 8004382:	604b      	strlt	r3, [r1, #4]
 8004384:	db08      	blt.n	8004398 <arm_cmplx_mag_f32+0x174>
 8004386:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004392:	d453      	bmi.n	800443c <arm_cmplx_mag_f32+0x218>
 8004394:	ed81 8a01 	vstr	s16, [r1, #4]
 8004398:	2a01      	cmp	r2, #1
 800439a:	d018      	beq.n	80043ce <arm_cmplx_mag_f32+0x1aa>
 800439c:	ed90 0a04 	vldr	s0, [r0, #16]
 80043a0:	edd0 7a05 	vldr	s15, [r0, #20]
 80043a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80043a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043ac:	2300      	movs	r3, #0
 80043ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80043b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	db19      	blt.n	80043f0 <arm_cmplx_mag_f32+0x1cc>
 80043bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80043c8:	d44a      	bmi.n	8004460 <arm_cmplx_mag_f32+0x23c>
 80043ca:	ed81 8a02 	vstr	s16, [r1, #8]
 80043ce:	b004      	add	sp, #16
 80043d0:	ecbd 8b02 	vpop	{d8}
 80043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d8:	f845 8c04 	str.w	r8, [r5, #-4]
 80043dc:	e797      	b.n	800430e <arm_cmplx_mag_f32+0xea>
 80043de:	f845 8c08 	str.w	r8, [r5, #-8]
 80043e2:	e77b      	b.n	80042dc <arm_cmplx_mag_f32+0xb8>
 80043e4:	f845 8c0c 	str.w	r8, [r5, #-12]
 80043e8:	e75e      	b.n	80042a8 <arm_cmplx_mag_f32+0x84>
 80043ea:	f845 8c10 	str.w	r8, [r5, #-16]
 80043ee:	e741      	b.n	8004274 <arm_cmplx_mag_f32+0x50>
 80043f0:	608b      	str	r3, [r1, #8]
 80043f2:	e7ec      	b.n	80043ce <arm_cmplx_mag_f32+0x1aa>
 80043f4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043f8:	9001      	str	r0, [sp, #4]
 80043fa:	f000 fba5 	bl	8004b48 <sqrtf>
 80043fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004402:	9801      	ldr	r0, [sp, #4]
 8004404:	e74e      	b.n	80042a4 <arm_cmplx_mag_f32+0x80>
 8004406:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800440a:	9001      	str	r0, [sp, #4]
 800440c:	f000 fb9c 	bl	8004b48 <sqrtf>
 8004410:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004414:	9801      	ldr	r0, [sp, #4]
 8004416:	e72b      	b.n	8004270 <arm_cmplx_mag_f32+0x4c>
 8004418:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800441c:	9001      	str	r0, [sp, #4]
 800441e:	f000 fb93 	bl	8004b48 <sqrtf>
 8004422:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004426:	9801      	ldr	r0, [sp, #4]
 8004428:	e76f      	b.n	800430a <arm_cmplx_mag_f32+0xe6>
 800442a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800442e:	9001      	str	r0, [sp, #4]
 8004430:	f000 fb8a 	bl	8004b48 <sqrtf>
 8004434:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004438:	9801      	ldr	r0, [sp, #4]
 800443a:	e74d      	b.n	80042d8 <arm_cmplx_mag_f32+0xb4>
 800443c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004440:	9201      	str	r2, [sp, #4]
 8004442:	f000 fb81 	bl	8004b48 <sqrtf>
 8004446:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800444a:	9903      	ldr	r1, [sp, #12]
 800444c:	e7a2      	b.n	8004394 <arm_cmplx_mag_f32+0x170>
 800444e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004452:	9201      	str	r2, [sp, #4]
 8004454:	f000 fb78 	bl	8004b48 <sqrtf>
 8004458:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800445c:	9903      	ldr	r1, [sp, #12]
 800445e:	e77c      	b.n	800435a <arm_cmplx_mag_f32+0x136>
 8004460:	9101      	str	r1, [sp, #4]
 8004462:	f000 fb71 	bl	8004b48 <sqrtf>
 8004466:	9901      	ldr	r1, [sp, #4]
 8004468:	e7af      	b.n	80043ca <arm_cmplx_mag_f32+0x1a6>
 800446a:	bf00      	nop

0800446c <arm_radix8_butterfly_f32>:
 800446c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004470:	ed2d 8b10 	vpush	{d8-d15}
 8004474:	b093      	sub	sp, #76	; 0x4c
 8004476:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800447a:	4603      	mov	r3, r0
 800447c:	3304      	adds	r3, #4
 800447e:	ed9f bac0 	vldr	s22, [pc, #768]	; 8004780 <arm_radix8_butterfly_f32+0x314>
 8004482:	9010      	str	r0, [sp, #64]	; 0x40
 8004484:	468b      	mov	fp, r1
 8004486:	9311      	str	r3, [sp, #68]	; 0x44
 8004488:	4689      	mov	r9, r1
 800448a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800448c:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8004490:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8004494:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8004498:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800449c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80044a0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 80044a4:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80044a8:	9100      	str	r1, [sp, #0]
 80044aa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80044ae:	f108 0004 	add.w	r0, r8, #4
 80044b2:	f10e 0104 	add.w	r1, lr, #4
 80044b6:	462e      	mov	r6, r5
 80044b8:	4420      	add	r0, r4
 80044ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044be:	4421      	add	r1, r4
 80044c0:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80044c4:	960d      	str	r6, [sp, #52]	; 0x34
 80044c6:	9402      	str	r4, [sp, #8]
 80044c8:	012c      	lsls	r4, r5, #4
 80044ca:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 80044ce:	9403      	str	r4, [sp, #12]
 80044d0:	00ec      	lsls	r4, r5, #3
 80044d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80044d4:	9404      	str	r4, [sp, #16]
 80044d6:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80044da:	9405      	str	r4, [sp, #20]
 80044dc:	016c      	lsls	r4, r5, #5
 80044de:	9401      	str	r4, [sp, #4]
 80044e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80044e2:	9c00      	ldr	r4, [sp, #0]
 80044e4:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 80044e8:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80044ec:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80044f0:	f04f 0c00 	mov.w	ip, #0
 80044f4:	edd6 6a00 	vldr	s13, [r6]
 80044f8:	edd7 1a00 	vldr	s3, [r7]
 80044fc:	ed15 aa01 	vldr	s20, [r5, #-4]
 8004500:	edd2 5a00 	vldr	s11, [r2]
 8004504:	ed51 9a01 	vldr	s19, [r1, #-4]
 8004508:	ed94 6a00 	vldr	s12, [r4]
 800450c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8004510:	ed93 3a00 	vldr	s6, [r3]
 8004514:	ee39 0a86 	vadd.f32	s0, s19, s12
 8004518:	ee33 2a21 	vadd.f32	s4, s6, s3
 800451c:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8004520:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8004524:	ee35 7a02 	vadd.f32	s14, s10, s4
 8004528:	ee34 4a80 	vadd.f32	s8, s9, s0
 800452c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004530:	ee74 6a07 	vadd.f32	s13, s8, s14
 8004534:	ee34 4a47 	vsub.f32	s8, s8, s14
 8004538:	ed45 6a01 	vstr	s13, [r5, #-4]
 800453c:	ed82 4a00 	vstr	s8, [r2]
 8004540:	edd0 6a00 	vldr	s13, [r0]
 8004544:	ed96 9a01 	vldr	s18, [r6, #4]
 8004548:	edd3 2a01 	vldr	s5, [r3, #4]
 800454c:	edd7 8a01 	vldr	s17, [r7, #4]
 8004550:	edd5 0a00 	vldr	s1, [r5]
 8004554:	edd2 3a01 	vldr	s7, [r2, #4]
 8004558:	ed94 8a01 	vldr	s16, [r4, #4]
 800455c:	ed91 7a00 	vldr	s14, [r1]
 8004560:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004564:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004568:	ee72 aae8 	vsub.f32	s21, s5, s17
 800456c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004570:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004574:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004578:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800457c:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004580:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004584:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004588:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800458c:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004590:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004594:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004598:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800459c:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80045a0:	ee76 6a89 	vadd.f32	s13, s13, s18
 80045a4:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80045a8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80045ac:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80045b0:	ee35 5a42 	vsub.f32	s10, s10, s4
 80045b4:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80045b8:	ee33 2a20 	vadd.f32	s4, s6, s1
 80045bc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80045c0:	ee33 3a60 	vsub.f32	s6, s6, s1
 80045c4:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80045c8:	ee77 0a01 	vadd.f32	s1, s14, s2
 80045cc:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80045d0:	ee37 7a41 	vsub.f32	s14, s14, s2
 80045d4:	ee73 1a84 	vadd.f32	s3, s7, s8
 80045d8:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80045dc:	ee76 3a27 	vadd.f32	s7, s12, s15
 80045e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80045e4:	ee32 8a00 	vadd.f32	s16, s4, s0
 80045e8:	ee33 1a45 	vsub.f32	s2, s6, s10
 80045ec:	ee32 2a40 	vsub.f32	s4, s4, s0
 80045f0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80045f4:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80045f8:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80045fc:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004600:	ee34 6a67 	vsub.f32	s12, s8, s15
 8004604:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004608:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800460c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004610:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004614:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8004618:	44dc      	add	ip, fp
 800461a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800461e:	45e1      	cmp	r9, ip
 8004620:	ed85 8a00 	vstr	s16, [r5]
 8004624:	ed82 2a01 	vstr	s4, [r2, #4]
 8004628:	4455      	add	r5, sl
 800462a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800462e:	4452      	add	r2, sl
 8004630:	edc4 6a00 	vstr	s13, [r4]
 8004634:	ed81 1a00 	vstr	s2, [r1]
 8004638:	ed84 5a01 	vstr	s10, [r4, #4]
 800463c:	4451      	add	r1, sl
 800463e:	ed00 3a01 	vstr	s6, [r0, #-4]
 8004642:	4454      	add	r4, sl
 8004644:	edc7 2a00 	vstr	s5, [r7]
 8004648:	edc6 4a00 	vstr	s9, [r6]
 800464c:	ed83 7a00 	vstr	s14, [r3]
 8004650:	edc0 5a00 	vstr	s11, [r0]
 8004654:	edc7 3a01 	vstr	s7, [r7, #4]
 8004658:	4450      	add	r0, sl
 800465a:	ed86 6a01 	vstr	s12, [r6, #4]
 800465e:	4457      	add	r7, sl
 8004660:	edc3 7a01 	vstr	s15, [r3, #4]
 8004664:	4456      	add	r6, sl
 8004666:	4453      	add	r3, sl
 8004668:	f63f af44 	bhi.w	80044f4 <arm_radix8_butterfly_f32+0x88>
 800466c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800466e:	2b07      	cmp	r3, #7
 8004670:	f240 81c3 	bls.w	80049fa <arm_radix8_butterfly_f32+0x58e>
 8004674:	9805      	ldr	r0, [sp, #20]
 8004676:	9a01      	ldr	r2, [sp, #4]
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	9d04      	ldr	r5, [sp, #16]
 800467c:	9902      	ldr	r1, [sp, #8]
 800467e:	f100 0c08 	add.w	ip, r0, #8
 8004682:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004684:	3208      	adds	r2, #8
 8004686:	1882      	adds	r2, r0, r2
 8004688:	3308      	adds	r3, #8
 800468a:	920a      	str	r2, [sp, #40]	; 0x28
 800468c:	4602      	mov	r2, r0
 800468e:	18d3      	adds	r3, r2, r3
 8004690:	3108      	adds	r1, #8
 8004692:	3508      	adds	r5, #8
 8004694:	1851      	adds	r1, r2, r1
 8004696:	9307      	str	r3, [sp, #28]
 8004698:	4613      	mov	r3, r2
 800469a:	442a      	add	r2, r5
 800469c:	9206      	str	r2, [sp, #24]
 800469e:	461a      	mov	r2, r3
 80046a0:	4462      	add	r2, ip
 80046a2:	f10e 0e0c 	add.w	lr, lr, #12
 80046a6:	9205      	str	r2, [sp, #20]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4472      	add	r2, lr
 80046ac:	f108 0808 	add.w	r8, r8, #8
 80046b0:	330c      	adds	r3, #12
 80046b2:	4440      	add	r0, r8
 80046b4:	f04f 0e00 	mov.w	lr, #0
 80046b8:	9203      	str	r2, [sp, #12]
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	465a      	mov	r2, fp
 80046be:	464b      	mov	r3, r9
 80046c0:	46f3      	mov	fp, lr
 80046c2:	46d1      	mov	r9, sl
 80046c4:	9009      	str	r0, [sp, #36]	; 0x24
 80046c6:	9108      	str	r1, [sp, #32]
 80046c8:	f04f 0801 	mov.w	r8, #1
 80046cc:	469a      	mov	sl, r3
 80046ce:	4696      	mov	lr, r2
 80046d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d2:	449b      	add	fp, r3
 80046d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046da:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80046de:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 80046e2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80046e6:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 80046ea:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 80046ee:	930c      	str	r3, [sp, #48]	; 0x30
 80046f0:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 80046f4:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 80046f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80046fa:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 80046fe:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8004702:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	edd3 da01 	vldr	s27, [r3, #4]
 8004714:	9b01      	ldr	r3, [sp, #4]
 8004716:	edd0 7a00 	vldr	s15, [r0]
 800471a:	ed93 da01 	vldr	s26, [r3, #4]
 800471e:	9b02      	ldr	r3, [sp, #8]
 8004720:	edcd 7a02 	vstr	s15, [sp, #8]
 8004724:	ed93 ca01 	vldr	s24, [r3, #4]
 8004728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800472a:	eddc ca01 	vldr	s25, [ip, #4]
 800472e:	edd3 7a00 	vldr	s15, [r3]
 8004732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004734:	edcd 7a01 	vstr	s15, [sp, #4]
 8004738:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800473c:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	ed92 fa01 	vldr	s30, [r2, #4]
 800474e:	9a00      	ldr	r2, [sp, #0]
 8004750:	edd1 ea01 	vldr	s29, [r1, #4]
 8004754:	ed92 ea01 	vldr	s28, [r2, #4]
 8004758:	edd7 ba00 	vldr	s23, [r7]
 800475c:	edd6 aa00 	vldr	s21, [r6]
 8004760:	ed95 aa00 	vldr	s20, [r5]
 8004764:	edd4 9a00 	vldr	s19, [r4]
 8004768:	edcd 7a00 	vstr	s15, [sp]
 800476c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8004770:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8004774:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8004778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800477c:	46c4      	mov	ip, r8
 800477e:	e001      	b.n	8004784 <arm_radix8_butterfly_f32+0x318>
 8004780:	3f3504f3 	.word	0x3f3504f3
 8004784:	ed91 6a00 	vldr	s12, [r1]
 8004788:	ed93 5a00 	vldr	s10, [r3]
 800478c:	edd0 fa00 	vldr	s31, [r0]
 8004790:	edd4 7a00 	vldr	s15, [r4]
 8004794:	ed95 7a00 	vldr	s14, [r5]
 8004798:	ed56 3a01 	vldr	s7, [r6, #-4]
 800479c:	ed17 3a01 	vldr	s6, [r7, #-4]
 80047a0:	ed92 2a00 	vldr	s4, [r2]
 80047a4:	ed96 0a00 	vldr	s0, [r6]
 80047a8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80047ac:	ee32 1a06 	vadd.f32	s2, s4, s12
 80047b0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80047b4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80047b8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80047bc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80047c0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80047c4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80047c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047cc:	ed06 6a01 	vstr	s12, [r6, #-4]
 80047d0:	edd4 8a01 	vldr	s17, [r4, #4]
 80047d4:	ed92 9a01 	vldr	s18, [r2, #4]
 80047d8:	edd7 0a00 	vldr	s1, [r7]
 80047dc:	edd1 2a01 	vldr	s5, [r1, #4]
 80047e0:	ed95 7a01 	vldr	s14, [r5, #4]
 80047e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80047e8:	edd0 5a01 	vldr	s11, [r0, #4]
 80047ec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80047f0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80047f4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80047f8:	ee78 fac7 	vsub.f32	s31, s17, s14
 80047fc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004800:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004804:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004808:	ee79 2a22 	vadd.f32	s5, s18, s5
 800480c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004810:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004814:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004818:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800481c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004820:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8004824:	ee32 1a08 	vadd.f32	s2, s4, s16
 8004828:	ee72 fa87 	vadd.f32	s31, s5, s14
 800482c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004830:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004834:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004838:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800483c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004840:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004844:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004848:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800484c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004850:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004854:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004858:	ee36 0a28 	vadd.f32	s0, s12, s17
 800485c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004860:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004864:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004868:	ee73 8a09 	vadd.f32	s17, s6, s18
 800486c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004870:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004874:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004878:	ee35 3a85 	vadd.f32	s6, s11, s10
 800487c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004880:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004884:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004888:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800488c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004890:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004894:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004898:	ee73 3a82 	vadd.f32	s7, s7, s4
 800489c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80048a0:	ed9d 2a00 	vldr	s4, [sp]
 80048a4:	eddd 1a01 	vldr	s3, [sp, #4]
 80048a8:	ee35 5a43 	vsub.f32	s10, s10, s6
 80048ac:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80048b0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80048b4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80048b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80048bc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80048c0:	ee76 5a49 	vsub.f32	s11, s12, s18
 80048c4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80048c8:	ee39 6a06 	vadd.f32	s12, s18, s12
 80048cc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80048d0:	ee21 4a84 	vmul.f32	s8, s3, s8
 80048d4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80048d8:	ee22 7a07 	vmul.f32	s14, s4, s14
 80048dc:	ee22 2a08 	vmul.f32	s4, s4, s16
 80048e0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80048e4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80048e8:	ee31 1a09 	vadd.f32	s2, s2, s18
 80048ec:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80048f0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80048f4:	ee74 0a60 	vsub.f32	s1, s8, s1
 80048f8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80048fc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004900:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8004904:	ee72 1a21 	vadd.f32	s3, s4, s3
 8004908:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800490c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004910:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8004914:	ee38 8a04 	vadd.f32	s16, s16, s8
 8004918:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800491c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8004920:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8004924:	eddd 5a02 	vldr	s11, [sp, #8]
 8004928:	edc6 fa00 	vstr	s31, [r6]
 800492c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8004930:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004934:	ee30 0a45 	vsub.f32	s0, s0, s10
 8004938:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800493c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8004940:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8004944:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8004948:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800494c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004950:	ee74 4a89 	vadd.f32	s9, s9, s18
 8004954:	ee34 3a43 	vsub.f32	s6, s8, s6
 8004958:	ee78 8a85 	vadd.f32	s17, s17, s10
 800495c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004960:	44f4      	add	ip, lr
 8004962:	45e2      	cmp	sl, ip
 8004964:	edc3 3a00 	vstr	s7, [r3]
 8004968:	edc3 6a01 	vstr	s13, [r3, #4]
 800496c:	444e      	add	r6, r9
 800496e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8004972:	edc7 0a00 	vstr	s1, [r7]
 8004976:	444b      	add	r3, r9
 8004978:	ed80 2a00 	vstr	s4, [r0]
 800497c:	edc0 2a01 	vstr	s5, [r0, #4]
 8004980:	444f      	add	r7, r9
 8004982:	edc2 1a00 	vstr	s3, [r2]
 8004986:	ed82 7a01 	vstr	s14, [r2, #4]
 800498a:	4448      	add	r0, r9
 800498c:	ed85 8a00 	vstr	s16, [r5]
 8004990:	ed85 0a01 	vstr	s0, [r5, #4]
 8004994:	444a      	add	r2, r9
 8004996:	edc1 4a00 	vstr	s9, [r1]
 800499a:	444d      	add	r5, r9
 800499c:	ed81 3a01 	vstr	s6, [r1, #4]
 80049a0:	edc4 8a00 	vstr	s17, [r4]
 80049a4:	ed84 6a01 	vstr	s12, [r4, #4]
 80049a8:	4449      	add	r1, r9
 80049aa:	444c      	add	r4, r9
 80049ac:	f63f aeea 	bhi.w	8004784 <arm_radix8_butterfly_f32+0x318>
 80049b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b2:	3308      	adds	r3, #8
 80049b4:	930a      	str	r3, [sp, #40]	; 0x28
 80049b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b8:	3308      	adds	r3, #8
 80049ba:	9309      	str	r3, [sp, #36]	; 0x24
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	3308      	adds	r3, #8
 80049c0:	9308      	str	r3, [sp, #32]
 80049c2:	9b07      	ldr	r3, [sp, #28]
 80049c4:	3308      	adds	r3, #8
 80049c6:	9307      	str	r3, [sp, #28]
 80049c8:	9b06      	ldr	r3, [sp, #24]
 80049ca:	3308      	adds	r3, #8
 80049cc:	9306      	str	r3, [sp, #24]
 80049ce:	9b05      	ldr	r3, [sp, #20]
 80049d0:	3308      	adds	r3, #8
 80049d2:	9305      	str	r3, [sp, #20]
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	3308      	adds	r3, #8
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	3308      	adds	r3, #8
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049e2:	f108 0801 	add.w	r8, r8, #1
 80049e6:	4543      	cmp	r3, r8
 80049e8:	f47f ae72 	bne.w	80046d0 <arm_radix8_butterfly_f32+0x264>
 80049ec:	469b      	mov	fp, r3
 80049ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	46d1      	mov	r9, sl
 80049f6:	930e      	str	r3, [sp, #56]	; 0x38
 80049f8:	e547      	b.n	800448a <arm_radix8_butterfly_f32+0x1e>
 80049fa:	b013      	add	sp, #76	; 0x4c
 80049fc:	ecbd 8b10 	vpop	{d8-d15}
 8004a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a04 <__errno>:
 8004a04:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <__errno+0x8>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000150 	.word	0x20000150

08004a10 <__libc_init_array>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	4d0d      	ldr	r5, [pc, #52]	; (8004a48 <__libc_init_array+0x38>)
 8004a14:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <__libc_init_array+0x3c>)
 8004a16:	1b64      	subs	r4, r4, r5
 8004a18:	10a4      	asrs	r4, r4, #2
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	42a6      	cmp	r6, r4
 8004a1e:	d109      	bne.n	8004a34 <__libc_init_array+0x24>
 8004a20:	4d0b      	ldr	r5, [pc, #44]	; (8004a50 <__libc_init_array+0x40>)
 8004a22:	4c0c      	ldr	r4, [pc, #48]	; (8004a54 <__libc_init_array+0x44>)
 8004a24:	f000 ff5e 	bl	80058e4 <_init>
 8004a28:	1b64      	subs	r4, r4, r5
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	2600      	movs	r6, #0
 8004a2e:	42a6      	cmp	r6, r4
 8004a30:	d105      	bne.n	8004a3e <__libc_init_array+0x2e>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a38:	4798      	blx	r3
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7ee      	b.n	8004a1c <__libc_init_array+0xc>
 8004a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a42:	4798      	blx	r3
 8004a44:	3601      	adds	r6, #1
 8004a46:	e7f2      	b.n	8004a2e <__libc_init_array+0x1e>
 8004a48:	0801ae48 	.word	0x0801ae48
 8004a4c:	0801ae48 	.word	0x0801ae48
 8004a50:	0801ae48 	.word	0x0801ae48
 8004a54:	0801ae4c 	.word	0x0801ae4c

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <pow>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	ed2d 8b02 	vpush	{d8}
 8004a6e:	eeb0 8a40 	vmov.f32	s16, s0
 8004a72:	eef0 8a60 	vmov.f32	s17, s1
 8004a76:	ec55 4b11 	vmov	r4, r5, d1
 8004a7a:	f000 f885 	bl	8004b88 <__ieee754_pow>
 8004a7e:	4622      	mov	r2, r4
 8004a80:	462b      	mov	r3, r5
 8004a82:	4620      	mov	r0, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	ec57 6b10 	vmov	r6, r7, d0
 8004a8a:	f7fc f813 	bl	8000ab4 <__aeabi_dcmpun>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d13b      	bne.n	8004b0a <pow+0xa2>
 8004a92:	ec51 0b18 	vmov	r0, r1, d8
 8004a96:	2200      	movs	r2, #0
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f7fb ffd9 	bl	8000a50 <__aeabi_dcmpeq>
 8004a9e:	b1b8      	cbz	r0, 8004ad0 <pow+0x68>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb ffd2 	bl	8000a50 <__aeabi_dcmpeq>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d146      	bne.n	8004b3e <pow+0xd6>
 8004ab0:	ec45 4b10 	vmov	d0, r4, r5
 8004ab4:	f000 fe84 	bl	80057c0 <finite>
 8004ab8:	b338      	cbz	r0, 8004b0a <pow+0xa2>
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fb ffcf 	bl	8000a64 <__aeabi_dcmplt>
 8004ac6:	b300      	cbz	r0, 8004b0a <pow+0xa2>
 8004ac8:	f7ff ff9c 	bl	8004a04 <__errno>
 8004acc:	2322      	movs	r3, #34	; 0x22
 8004ace:	e01b      	b.n	8004b08 <pow+0xa0>
 8004ad0:	ec47 6b10 	vmov	d0, r6, r7
 8004ad4:	f000 fe74 	bl	80057c0 <finite>
 8004ad8:	b9e0      	cbnz	r0, 8004b14 <pow+0xac>
 8004ada:	eeb0 0a48 	vmov.f32	s0, s16
 8004ade:	eef0 0a68 	vmov.f32	s1, s17
 8004ae2:	f000 fe6d 	bl	80057c0 <finite>
 8004ae6:	b1a8      	cbz	r0, 8004b14 <pow+0xac>
 8004ae8:	ec45 4b10 	vmov	d0, r4, r5
 8004aec:	f000 fe68 	bl	80057c0 <finite>
 8004af0:	b180      	cbz	r0, 8004b14 <pow+0xac>
 8004af2:	4632      	mov	r2, r6
 8004af4:	463b      	mov	r3, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	4639      	mov	r1, r7
 8004afa:	f7fb ffdb 	bl	8000ab4 <__aeabi_dcmpun>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0e2      	beq.n	8004ac8 <pow+0x60>
 8004b02:	f7ff ff7f 	bl	8004a04 <__errno>
 8004b06:	2321      	movs	r3, #33	; 0x21
 8004b08:	6003      	str	r3, [r0, #0]
 8004b0a:	ecbd 8b02 	vpop	{d8}
 8004b0e:	ec47 6b10 	vmov	d0, r6, r7
 8004b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	f7fb ff98 	bl	8000a50 <__aeabi_dcmpeq>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d0f2      	beq.n	8004b0a <pow+0xa2>
 8004b24:	eeb0 0a48 	vmov.f32	s0, s16
 8004b28:	eef0 0a68 	vmov.f32	s1, s17
 8004b2c:	f000 fe48 	bl	80057c0 <finite>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d0ea      	beq.n	8004b0a <pow+0xa2>
 8004b34:	ec45 4b10 	vmov	d0, r4, r5
 8004b38:	f000 fe42 	bl	80057c0 <finite>
 8004b3c:	e7c3      	b.n	8004ac6 <pow+0x5e>
 8004b3e:	4f01      	ldr	r7, [pc, #4]	; (8004b44 <pow+0xdc>)
 8004b40:	2600      	movs	r6, #0
 8004b42:	e7e2      	b.n	8004b0a <pow+0xa2>
 8004b44:	3ff00000 	.word	0x3ff00000

08004b48 <sqrtf>:
 8004b48:	b508      	push	{r3, lr}
 8004b4a:	ed2d 8b02 	vpush	{d8}
 8004b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8004b52:	f000 fdf9 	bl	8005748 <__ieee754_sqrtf>
 8004b56:	eeb4 8a48 	vcmp.f32	s16, s16
 8004b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5e:	d60c      	bvs.n	8004b7a <sqrtf+0x32>
 8004b60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004b80 <sqrtf+0x38>
 8004b64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	d505      	bpl.n	8004b7a <sqrtf+0x32>
 8004b6e:	f7ff ff49 	bl	8004a04 <__errno>
 8004b72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004b76:	2321      	movs	r3, #33	; 0x21
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	ecbd 8b02 	vpop	{d8}
 8004b7e:	bd08      	pop	{r3, pc}
	...

08004b88 <__ieee754_pow>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	ed2d 8b06 	vpush	{d8-d10}
 8004b90:	b089      	sub	sp, #36	; 0x24
 8004b92:	ed8d 1b00 	vstr	d1, [sp]
 8004b96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004b9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004b9e:	ea58 0102 	orrs.w	r1, r8, r2
 8004ba2:	ec57 6b10 	vmov	r6, r7, d0
 8004ba6:	d115      	bne.n	8004bd4 <__ieee754_pow+0x4c>
 8004ba8:	19b3      	adds	r3, r6, r6
 8004baa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004bae:	4152      	adcs	r2, r2
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	4b89      	ldr	r3, [pc, #548]	; (8004dd8 <__ieee754_pow+0x250>)
 8004bb4:	4193      	sbcs	r3, r2
 8004bb6:	f080 84d2 	bcs.w	800555e <__ieee754_pow+0x9d6>
 8004bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb fb27 	bl	8000214 <__adddf3>
 8004bc6:	ec41 0b10 	vmov	d0, r0, r1
 8004bca:	b009      	add	sp, #36	; 0x24
 8004bcc:	ecbd 8b06 	vpop	{d8-d10}
 8004bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd4:	4b81      	ldr	r3, [pc, #516]	; (8004ddc <__ieee754_pow+0x254>)
 8004bd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	ee10 aa10 	vmov	sl, s0
 8004be0:	463d      	mov	r5, r7
 8004be2:	dc06      	bgt.n	8004bf2 <__ieee754_pow+0x6a>
 8004be4:	d101      	bne.n	8004bea <__ieee754_pow+0x62>
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	d1e7      	bne.n	8004bba <__ieee754_pow+0x32>
 8004bea:	4598      	cmp	r8, r3
 8004bec:	dc01      	bgt.n	8004bf2 <__ieee754_pow+0x6a>
 8004bee:	d10f      	bne.n	8004c10 <__ieee754_pow+0x88>
 8004bf0:	b172      	cbz	r2, 8004c10 <__ieee754_pow+0x88>
 8004bf2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004bf6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004bfa:	ea55 050a 	orrs.w	r5, r5, sl
 8004bfe:	d1dc      	bne.n	8004bba <__ieee754_pow+0x32>
 8004c00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004c04:	18db      	adds	r3, r3, r3
 8004c06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004c0a:	4152      	adcs	r2, r2
 8004c0c:	429d      	cmp	r5, r3
 8004c0e:	e7d0      	b.n	8004bb2 <__ieee754_pow+0x2a>
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	da3b      	bge.n	8004c8c <__ieee754_pow+0x104>
 8004c14:	4b72      	ldr	r3, [pc, #456]	; (8004de0 <__ieee754_pow+0x258>)
 8004c16:	4598      	cmp	r8, r3
 8004c18:	dc51      	bgt.n	8004cbe <__ieee754_pow+0x136>
 8004c1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004c1e:	4598      	cmp	r8, r3
 8004c20:	f340 84ac 	ble.w	800557c <__ieee754_pow+0x9f4>
 8004c24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c2c:	2b14      	cmp	r3, #20
 8004c2e:	dd0f      	ble.n	8004c50 <__ieee754_pow+0xc8>
 8004c30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004c34:	fa22 f103 	lsr.w	r1, r2, r3
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	f040 849d 	bne.w	800557c <__ieee754_pow+0x9f4>
 8004c42:	f001 0101 	and.w	r1, r1, #1
 8004c46:	f1c1 0302 	rsb	r3, r1, #2
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	b182      	cbz	r2, 8004c70 <__ieee754_pow+0xe8>
 8004c4e:	e05f      	b.n	8004d10 <__ieee754_pow+0x188>
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d15b      	bne.n	8004d0c <__ieee754_pow+0x184>
 8004c54:	f1c3 0314 	rsb	r3, r3, #20
 8004c58:	fa48 f103 	asr.w	r1, r8, r3
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	4543      	cmp	r3, r8
 8004c62:	f040 8488 	bne.w	8005576 <__ieee754_pow+0x9ee>
 8004c66:	f001 0101 	and.w	r1, r1, #1
 8004c6a:	f1c1 0302 	rsb	r3, r1, #2
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <__ieee754_pow+0x25c>)
 8004c72:	4598      	cmp	r8, r3
 8004c74:	d132      	bne.n	8004cdc <__ieee754_pow+0x154>
 8004c76:	f1b9 0f00 	cmp.w	r9, #0
 8004c7a:	f280 8478 	bge.w	800556e <__ieee754_pow+0x9e6>
 8004c7e:	4959      	ldr	r1, [pc, #356]	; (8004de4 <__ieee754_pow+0x25c>)
 8004c80:	4632      	mov	r2, r6
 8004c82:	463b      	mov	r3, r7
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fb fda5 	bl	80007d4 <__aeabi_ddiv>
 8004c8a:	e79c      	b.n	8004bc6 <__ieee754_pow+0x3e>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	d13d      	bne.n	8004d10 <__ieee754_pow+0x188>
 8004c94:	4b51      	ldr	r3, [pc, #324]	; (8004ddc <__ieee754_pow+0x254>)
 8004c96:	4598      	cmp	r8, r3
 8004c98:	d1ea      	bne.n	8004c70 <__ieee754_pow+0xe8>
 8004c9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004c9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8004ca6:	f000 845a 	beq.w	800555e <__ieee754_pow+0x9d6>
 8004caa:	4b4f      	ldr	r3, [pc, #316]	; (8004de8 <__ieee754_pow+0x260>)
 8004cac:	429c      	cmp	r4, r3
 8004cae:	dd08      	ble.n	8004cc2 <__ieee754_pow+0x13a>
 8004cb0:	f1b9 0f00 	cmp.w	r9, #0
 8004cb4:	f2c0 8457 	blt.w	8005566 <__ieee754_pow+0x9de>
 8004cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cbc:	e783      	b.n	8004bc6 <__ieee754_pow+0x3e>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e7e5      	b.n	8004c8e <__ieee754_pow+0x106>
 8004cc2:	f1b9 0f00 	cmp.w	r9, #0
 8004cc6:	f04f 0000 	mov.w	r0, #0
 8004cca:	f04f 0100 	mov.w	r1, #0
 8004cce:	f6bf af7a 	bge.w	8004bc6 <__ieee754_pow+0x3e>
 8004cd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004cd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cda:	e774      	b.n	8004bc6 <__ieee754_pow+0x3e>
 8004cdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004ce0:	d106      	bne.n	8004cf0 <__ieee754_pow+0x168>
 8004ce2:	4632      	mov	r2, r6
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	4639      	mov	r1, r7
 8004cea:	f7fb fc49 	bl	8000580 <__aeabi_dmul>
 8004cee:	e76a      	b.n	8004bc6 <__ieee754_pow+0x3e>
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <__ieee754_pow+0x264>)
 8004cf2:	4599      	cmp	r9, r3
 8004cf4:	d10c      	bne.n	8004d10 <__ieee754_pow+0x188>
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	db0a      	blt.n	8004d10 <__ieee754_pow+0x188>
 8004cfa:	ec47 6b10 	vmov	d0, r6, r7
 8004cfe:	b009      	add	sp, #36	; 0x24
 8004d00:	ecbd 8b06 	vpop	{d8-d10}
 8004d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d08:	f000 bc6c 	b.w	80055e4 <__ieee754_sqrt>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	ec47 6b10 	vmov	d0, r6, r7
 8004d14:	f000 fd4b 	bl	80057ae <fabs>
 8004d18:	ec51 0b10 	vmov	r0, r1, d0
 8004d1c:	f1ba 0f00 	cmp.w	sl, #0
 8004d20:	d129      	bne.n	8004d76 <__ieee754_pow+0x1ee>
 8004d22:	b124      	cbz	r4, 8004d2e <__ieee754_pow+0x1a6>
 8004d24:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <__ieee754_pow+0x25c>)
 8004d26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d123      	bne.n	8004d76 <__ieee754_pow+0x1ee>
 8004d2e:	f1b9 0f00 	cmp.w	r9, #0
 8004d32:	da05      	bge.n	8004d40 <__ieee754_pow+0x1b8>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	2000      	movs	r0, #0
 8004d3a:	492a      	ldr	r1, [pc, #168]	; (8004de4 <__ieee754_pow+0x25c>)
 8004d3c:	f7fb fd4a 	bl	80007d4 <__aeabi_ddiv>
 8004d40:	2d00      	cmp	r5, #0
 8004d42:	f6bf af40 	bge.w	8004bc6 <__ieee754_pow+0x3e>
 8004d46:	9b04      	ldr	r3, [sp, #16]
 8004d48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004d4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004d50:	4323      	orrs	r3, r4
 8004d52:	d108      	bne.n	8004d66 <__ieee754_pow+0x1de>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f7fb fa58 	bl	8000210 <__aeabi_dsub>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	e78f      	b.n	8004c86 <__ieee754_pow+0xfe>
 8004d66:	9b04      	ldr	r3, [sp, #16]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	f47f af2c 	bne.w	8004bc6 <__ieee754_pow+0x3e>
 8004d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d72:	4619      	mov	r1, r3
 8004d74:	e727      	b.n	8004bc6 <__ieee754_pow+0x3e>
 8004d76:	0feb      	lsrs	r3, r5, #31
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	9306      	str	r3, [sp, #24]
 8004d7c:	9a06      	ldr	r2, [sp, #24]
 8004d7e:	9b04      	ldr	r3, [sp, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	d102      	bne.n	8004d8a <__ieee754_pow+0x202>
 8004d84:	4632      	mov	r2, r6
 8004d86:	463b      	mov	r3, r7
 8004d88:	e7e6      	b.n	8004d58 <__ieee754_pow+0x1d0>
 8004d8a:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <__ieee754_pow+0x268>)
 8004d8c:	4598      	cmp	r8, r3
 8004d8e:	f340 80fb 	ble.w	8004f88 <__ieee754_pow+0x400>
 8004d92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004d96:	4598      	cmp	r8, r3
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <__ieee754_pow+0x260>)
 8004d9a:	dd0c      	ble.n	8004db6 <__ieee754_pow+0x22e>
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	dc0f      	bgt.n	8004dc0 <__ieee754_pow+0x238>
 8004da0:	f1b9 0f00 	cmp.w	r9, #0
 8004da4:	da0f      	bge.n	8004dc6 <__ieee754_pow+0x23e>
 8004da6:	2000      	movs	r0, #0
 8004da8:	b009      	add	sp, #36	; 0x24
 8004daa:	ecbd 8b06 	vpop	{d8-d10}
 8004dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db2:	f000 bcf3 	b.w	800579c <__math_oflow>
 8004db6:	429c      	cmp	r4, r3
 8004db8:	dbf2      	blt.n	8004da0 <__ieee754_pow+0x218>
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <__ieee754_pow+0x25c>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	dd19      	ble.n	8004df4 <__ieee754_pow+0x26c>
 8004dc0:	f1b9 0f00 	cmp.w	r9, #0
 8004dc4:	dcef      	bgt.n	8004da6 <__ieee754_pow+0x21e>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	b009      	add	sp, #36	; 0x24
 8004dca:	ecbd 8b06 	vpop	{d8-d10}
 8004dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd2:	f000 bcda 	b.w	800578a <__math_uflow>
 8004dd6:	bf00      	nop
 8004dd8:	fff00000 	.word	0xfff00000
 8004ddc:	7ff00000 	.word	0x7ff00000
 8004de0:	433fffff 	.word	0x433fffff
 8004de4:	3ff00000 	.word	0x3ff00000
 8004de8:	3fefffff 	.word	0x3fefffff
 8004dec:	3fe00000 	.word	0x3fe00000
 8004df0:	41e00000 	.word	0x41e00000
 8004df4:	4b60      	ldr	r3, [pc, #384]	; (8004f78 <__ieee754_pow+0x3f0>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	f7fb fa0a 	bl	8000210 <__aeabi_dsub>
 8004dfc:	a354      	add	r3, pc, #336	; (adr r3, 8004f50 <__ieee754_pow+0x3c8>)
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	4604      	mov	r4, r0
 8004e04:	460d      	mov	r5, r1
 8004e06:	f7fb fbbb 	bl	8000580 <__aeabi_dmul>
 8004e0a:	a353      	add	r3, pc, #332	; (adr r3, 8004f58 <__ieee754_pow+0x3d0>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	4606      	mov	r6, r0
 8004e12:	460f      	mov	r7, r1
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fbb2 	bl	8000580 <__aeabi_dmul>
 8004e1c:	4b57      	ldr	r3, [pc, #348]	; (8004f7c <__ieee754_pow+0x3f4>)
 8004e1e:	4682      	mov	sl, r0
 8004e20:	468b      	mov	fp, r1
 8004e22:	2200      	movs	r2, #0
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	f7fb fbaa 	bl	8000580 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	a14b      	add	r1, pc, #300	; (adr r1, 8004f60 <__ieee754_pow+0x3d8>)
 8004e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e36:	f7fb f9eb 	bl	8000210 <__aeabi_dsub>
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	f7fb fb9f 	bl	8000580 <__aeabi_dmul>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	2000      	movs	r0, #0
 8004e48:	494d      	ldr	r1, [pc, #308]	; (8004f80 <__ieee754_pow+0x3f8>)
 8004e4a:	f7fb f9e1 	bl	8000210 <__aeabi_dsub>
 8004e4e:	4622      	mov	r2, r4
 8004e50:	4680      	mov	r8, r0
 8004e52:	4689      	mov	r9, r1
 8004e54:	462b      	mov	r3, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f7fb fb91 	bl	8000580 <__aeabi_dmul>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb fb8b 	bl	8000580 <__aeabi_dmul>
 8004e6a:	a33f      	add	r3, pc, #252	; (adr r3, 8004f68 <__ieee754_pow+0x3e0>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb fb86 	bl	8000580 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4650      	mov	r0, sl
 8004e7a:	4659      	mov	r1, fp
 8004e7c:	f7fb f9c8 	bl	8000210 <__aeabi_dsub>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4680      	mov	r8, r0
 8004e86:	4689      	mov	r9, r1
 8004e88:	4630      	mov	r0, r6
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	f7fb f9c2 	bl	8000214 <__adddf3>
 8004e90:	2000      	movs	r0, #0
 8004e92:	4632      	mov	r2, r6
 8004e94:	463b      	mov	r3, r7
 8004e96:	4604      	mov	r4, r0
 8004e98:	460d      	mov	r5, r1
 8004e9a:	f7fb f9b9 	bl	8000210 <__aeabi_dsub>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	f7fb f9b3 	bl	8000210 <__aeabi_dsub>
 8004eaa:	9b04      	ldr	r3, [sp, #16]
 8004eac:	9a06      	ldr	r2, [sp, #24]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	4682      	mov	sl, r0
 8004eb4:	468b      	mov	fp, r1
 8004eb6:	f040 81e7 	bne.w	8005288 <__ieee754_pow+0x700>
 8004eba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004f70 <__ieee754_pow+0x3e8>
 8004ebe:	eeb0 8a47 	vmov.f32	s16, s14
 8004ec2:	eef0 8a67 	vmov.f32	s17, s15
 8004ec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004eca:	2600      	movs	r6, #0
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed4:	f7fb f99c 	bl	8000210 <__aeabi_dsub>
 8004ed8:	4622      	mov	r2, r4
 8004eda:	462b      	mov	r3, r5
 8004edc:	f7fb fb50 	bl	8000580 <__aeabi_dmul>
 8004ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	4689      	mov	r9, r1
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	f7fb fb48 	bl	8000580 <__aeabi_dmul>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	f7fb f98c 	bl	8000214 <__adddf3>
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	4680      	mov	r8, r0
 8004f02:	4689      	mov	r9, r1
 8004f04:	4620      	mov	r0, r4
 8004f06:	4629      	mov	r1, r5
 8004f08:	f7fb fb3a 	bl	8000580 <__aeabi_dmul>
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460d      	mov	r5, r1
 8004f12:	4602      	mov	r2, r0
 8004f14:	4649      	mov	r1, r9
 8004f16:	4640      	mov	r0, r8
 8004f18:	f7fb f97c 	bl	8000214 <__adddf3>
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <__ieee754_pow+0x3fc>)
 8004f1e:	4299      	cmp	r1, r3
 8004f20:	ec45 4b19 	vmov	d9, r4, r5
 8004f24:	4606      	mov	r6, r0
 8004f26:	460f      	mov	r7, r1
 8004f28:	468b      	mov	fp, r1
 8004f2a:	f340 82f1 	ble.w	8005510 <__ieee754_pow+0x988>
 8004f2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004f32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004f36:	4303      	orrs	r3, r0
 8004f38:	f000 81e4 	beq.w	8005304 <__ieee754_pow+0x77c>
 8004f3c:	ec51 0b18 	vmov	r0, r1, d8
 8004f40:	2200      	movs	r2, #0
 8004f42:	2300      	movs	r3, #0
 8004f44:	f7fb fd8e 	bl	8000a64 <__aeabi_dcmplt>
 8004f48:	3800      	subs	r0, #0
 8004f4a:	bf18      	it	ne
 8004f4c:	2001      	movne	r0, #1
 8004f4e:	e72b      	b.n	8004da8 <__ieee754_pow+0x220>
 8004f50:	60000000 	.word	0x60000000
 8004f54:	3ff71547 	.word	0x3ff71547
 8004f58:	f85ddf44 	.word	0xf85ddf44
 8004f5c:	3e54ae0b 	.word	0x3e54ae0b
 8004f60:	55555555 	.word	0x55555555
 8004f64:	3fd55555 	.word	0x3fd55555
 8004f68:	652b82fe 	.word	0x652b82fe
 8004f6c:	3ff71547 	.word	0x3ff71547
 8004f70:	00000000 	.word	0x00000000
 8004f74:	bff00000 	.word	0xbff00000
 8004f78:	3ff00000 	.word	0x3ff00000
 8004f7c:	3fd00000 	.word	0x3fd00000
 8004f80:	3fe00000 	.word	0x3fe00000
 8004f84:	408fffff 	.word	0x408fffff
 8004f88:	4bd5      	ldr	r3, [pc, #852]	; (80052e0 <__ieee754_pow+0x758>)
 8004f8a:	402b      	ands	r3, r5
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	b92b      	cbnz	r3, 8004f9c <__ieee754_pow+0x414>
 8004f90:	4bd4      	ldr	r3, [pc, #848]	; (80052e4 <__ieee754_pow+0x75c>)
 8004f92:	f7fb faf5 	bl	8000580 <__aeabi_dmul>
 8004f96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	1523      	asrs	r3, r4, #20
 8004f9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004fa2:	4413      	add	r3, r2
 8004fa4:	9305      	str	r3, [sp, #20]
 8004fa6:	4bd0      	ldr	r3, [pc, #832]	; (80052e8 <__ieee754_pow+0x760>)
 8004fa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004fac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004fb6:	dd08      	ble.n	8004fca <__ieee754_pow+0x442>
 8004fb8:	4bcc      	ldr	r3, [pc, #816]	; (80052ec <__ieee754_pow+0x764>)
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	f340 8162 	ble.w	8005284 <__ieee754_pow+0x6fc>
 8004fc0:	9b05      	ldr	r3, [sp, #20]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	9305      	str	r3, [sp, #20]
 8004fc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004fca:	2400      	movs	r4, #0
 8004fcc:	00e3      	lsls	r3, r4, #3
 8004fce:	9307      	str	r3, [sp, #28]
 8004fd0:	4bc7      	ldr	r3, [pc, #796]	; (80052f0 <__ieee754_pow+0x768>)
 8004fd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fd6:	ed93 7b00 	vldr	d7, [r3]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	ec53 2b17 	vmov	r2, r3, d7
 8004fe0:	eeb0 9a47 	vmov.f32	s18, s14
 8004fe4:	eef0 9a67 	vmov.f32	s19, s15
 8004fe8:	4682      	mov	sl, r0
 8004fea:	f7fb f911 	bl	8000210 <__aeabi_dsub>
 8004fee:	4652      	mov	r2, sl
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	460f      	mov	r7, r1
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	ec51 0b19 	vmov	r0, r1, d9
 8004ffa:	f7fb f90b 	bl	8000214 <__adddf3>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	2000      	movs	r0, #0
 8005004:	49bb      	ldr	r1, [pc, #748]	; (80052f4 <__ieee754_pow+0x76c>)
 8005006:	f7fb fbe5 	bl	80007d4 <__aeabi_ddiv>
 800500a:	ec41 0b1a 	vmov	d10, r0, r1
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fab3 	bl	8000580 <__aeabi_dmul>
 800501a:	2300      	movs	r3, #0
 800501c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005026:	46ab      	mov	fp, r5
 8005028:	106d      	asrs	r5, r5, #1
 800502a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800502e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005032:	ec41 0b18 	vmov	d8, r0, r1
 8005036:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800503a:	2200      	movs	r2, #0
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	4614      	mov	r4, r2
 8005042:	461d      	mov	r5, r3
 8005044:	f7fb fa9c 	bl	8000580 <__aeabi_dmul>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4630      	mov	r0, r6
 800504e:	4639      	mov	r1, r7
 8005050:	f7fb f8de 	bl	8000210 <__aeabi_dsub>
 8005054:	ec53 2b19 	vmov	r2, r3, d9
 8005058:	4606      	mov	r6, r0
 800505a:	460f      	mov	r7, r1
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb f8d6 	bl	8000210 <__aeabi_dsub>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4650      	mov	r0, sl
 800506a:	4659      	mov	r1, fp
 800506c:	f7fb f8d0 	bl	8000210 <__aeabi_dsub>
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	f7fb fa84 	bl	8000580 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4630      	mov	r0, r6
 800507e:	4639      	mov	r1, r7
 8005080:	f7fb f8c6 	bl	8000210 <__aeabi_dsub>
 8005084:	ec53 2b1a 	vmov	r2, r3, d10
 8005088:	f7fb fa7a 	bl	8000580 <__aeabi_dmul>
 800508c:	ec53 2b18 	vmov	r2, r3, d8
 8005090:	ec41 0b19 	vmov	d9, r0, r1
 8005094:	ec51 0b18 	vmov	r0, r1, d8
 8005098:	f7fb fa72 	bl	8000580 <__aeabi_dmul>
 800509c:	a37c      	add	r3, pc, #496	; (adr r3, 8005290 <__ieee754_pow+0x708>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	4604      	mov	r4, r0
 80050a4:	460d      	mov	r5, r1
 80050a6:	f7fb fa6b 	bl	8000580 <__aeabi_dmul>
 80050aa:	a37b      	add	r3, pc, #492	; (adr r3, 8005298 <__ieee754_pow+0x710>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb f8b0 	bl	8000214 <__adddf3>
 80050b4:	4622      	mov	r2, r4
 80050b6:	462b      	mov	r3, r5
 80050b8:	f7fb fa62 	bl	8000580 <__aeabi_dmul>
 80050bc:	a378      	add	r3, pc, #480	; (adr r3, 80052a0 <__ieee754_pow+0x718>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb f8a7 	bl	8000214 <__adddf3>
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	f7fb fa59 	bl	8000580 <__aeabi_dmul>
 80050ce:	a376      	add	r3, pc, #472	; (adr r3, 80052a8 <__ieee754_pow+0x720>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb f89e 	bl	8000214 <__adddf3>
 80050d8:	4622      	mov	r2, r4
 80050da:	462b      	mov	r3, r5
 80050dc:	f7fb fa50 	bl	8000580 <__aeabi_dmul>
 80050e0:	a373      	add	r3, pc, #460	; (adr r3, 80052b0 <__ieee754_pow+0x728>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f7fb f895 	bl	8000214 <__adddf3>
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	f7fb fa47 	bl	8000580 <__aeabi_dmul>
 80050f2:	a371      	add	r3, pc, #452	; (adr r3, 80052b8 <__ieee754_pow+0x730>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f88c 	bl	8000214 <__adddf3>
 80050fc:	4622      	mov	r2, r4
 80050fe:	4606      	mov	r6, r0
 8005100:	460f      	mov	r7, r1
 8005102:	462b      	mov	r3, r5
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb fa3a 	bl	8000580 <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb fa34 	bl	8000580 <__aeabi_dmul>
 8005118:	4642      	mov	r2, r8
 800511a:	4604      	mov	r4, r0
 800511c:	460d      	mov	r5, r1
 800511e:	464b      	mov	r3, r9
 8005120:	ec51 0b18 	vmov	r0, r1, d8
 8005124:	f7fb f876 	bl	8000214 <__adddf3>
 8005128:	ec53 2b19 	vmov	r2, r3, d9
 800512c:	f7fb fa28 	bl	8000580 <__aeabi_dmul>
 8005130:	4622      	mov	r2, r4
 8005132:	462b      	mov	r3, r5
 8005134:	f7fb f86e 	bl	8000214 <__adddf3>
 8005138:	4642      	mov	r2, r8
 800513a:	4682      	mov	sl, r0
 800513c:	468b      	mov	fp, r1
 800513e:	464b      	mov	r3, r9
 8005140:	4640      	mov	r0, r8
 8005142:	4649      	mov	r1, r9
 8005144:	f7fb fa1c 	bl	8000580 <__aeabi_dmul>
 8005148:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <__ieee754_pow+0x770>)
 800514a:	2200      	movs	r2, #0
 800514c:	4606      	mov	r6, r0
 800514e:	460f      	mov	r7, r1
 8005150:	f7fb f860 	bl	8000214 <__adddf3>
 8005154:	4652      	mov	r2, sl
 8005156:	465b      	mov	r3, fp
 8005158:	f7fb f85c 	bl	8000214 <__adddf3>
 800515c:	2000      	movs	r0, #0
 800515e:	4604      	mov	r4, r0
 8005160:	460d      	mov	r5, r1
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4640      	mov	r0, r8
 8005168:	4649      	mov	r1, r9
 800516a:	f7fb fa09 	bl	8000580 <__aeabi_dmul>
 800516e:	4b62      	ldr	r3, [pc, #392]	; (80052f8 <__ieee754_pow+0x770>)
 8005170:	4680      	mov	r8, r0
 8005172:	4689      	mov	r9, r1
 8005174:	2200      	movs	r2, #0
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fb f849 	bl	8000210 <__aeabi_dsub>
 800517e:	4632      	mov	r2, r6
 8005180:	463b      	mov	r3, r7
 8005182:	f7fb f845 	bl	8000210 <__aeabi_dsub>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4650      	mov	r0, sl
 800518c:	4659      	mov	r1, fp
 800518e:	f7fb f83f 	bl	8000210 <__aeabi_dsub>
 8005192:	ec53 2b18 	vmov	r2, r3, d8
 8005196:	f7fb f9f3 	bl	8000580 <__aeabi_dmul>
 800519a:	4622      	mov	r2, r4
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	462b      	mov	r3, r5
 80051a2:	ec51 0b19 	vmov	r0, r1, d9
 80051a6:	f7fb f9eb 	bl	8000580 <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4630      	mov	r0, r6
 80051b0:	4639      	mov	r1, r7
 80051b2:	f7fb f82f 	bl	8000214 <__adddf3>
 80051b6:	4606      	mov	r6, r0
 80051b8:	460f      	mov	r7, r1
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f7fb f827 	bl	8000214 <__adddf3>
 80051c6:	a33e      	add	r3, pc, #248	; (adr r3, 80052c0 <__ieee754_pow+0x738>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	2000      	movs	r0, #0
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	f7fb f9d5 	bl	8000580 <__aeabi_dmul>
 80051d6:	4642      	mov	r2, r8
 80051d8:	ec41 0b18 	vmov	d8, r0, r1
 80051dc:	464b      	mov	r3, r9
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	f7fb f815 	bl	8000210 <__aeabi_dsub>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4630      	mov	r0, r6
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fb f80f 	bl	8000210 <__aeabi_dsub>
 80051f2:	a335      	add	r3, pc, #212	; (adr r3, 80052c8 <__ieee754_pow+0x740>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f9c2 	bl	8000580 <__aeabi_dmul>
 80051fc:	a334      	add	r3, pc, #208	; (adr r3, 80052d0 <__ieee754_pow+0x748>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	4606      	mov	r6, r0
 8005204:	460f      	mov	r7, r1
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fb f9b9 	bl	8000580 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4630      	mov	r0, r6
 8005214:	4639      	mov	r1, r7
 8005216:	f7fa fffd 	bl	8000214 <__adddf3>
 800521a:	9a07      	ldr	r2, [sp, #28]
 800521c:	4b37      	ldr	r3, [pc, #220]	; (80052fc <__ieee754_pow+0x774>)
 800521e:	4413      	add	r3, r2
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f7fa fff6 	bl	8000214 <__adddf3>
 8005228:	4682      	mov	sl, r0
 800522a:	9805      	ldr	r0, [sp, #20]
 800522c:	468b      	mov	fp, r1
 800522e:	f7fb f93d 	bl	80004ac <__aeabi_i2d>
 8005232:	9a07      	ldr	r2, [sp, #28]
 8005234:	4b32      	ldr	r3, [pc, #200]	; (8005300 <__ieee754_pow+0x778>)
 8005236:	4413      	add	r3, r2
 8005238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800523c:	4606      	mov	r6, r0
 800523e:	460f      	mov	r7, r1
 8005240:	4652      	mov	r2, sl
 8005242:	465b      	mov	r3, fp
 8005244:	ec51 0b18 	vmov	r0, r1, d8
 8005248:	f7fa ffe4 	bl	8000214 <__adddf3>
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	f7fa ffe0 	bl	8000214 <__adddf3>
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	f7fa ffdc 	bl	8000214 <__adddf3>
 800525c:	2000      	movs	r0, #0
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	4604      	mov	r4, r0
 8005264:	460d      	mov	r5, r1
 8005266:	f7fa ffd3 	bl	8000210 <__aeabi_dsub>
 800526a:	4642      	mov	r2, r8
 800526c:	464b      	mov	r3, r9
 800526e:	f7fa ffcf 	bl	8000210 <__aeabi_dsub>
 8005272:	ec53 2b18 	vmov	r2, r3, d8
 8005276:	f7fa ffcb 	bl	8000210 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4650      	mov	r0, sl
 8005280:	4659      	mov	r1, fp
 8005282:	e610      	b.n	8004ea6 <__ieee754_pow+0x31e>
 8005284:	2401      	movs	r4, #1
 8005286:	e6a1      	b.n	8004fcc <__ieee754_pow+0x444>
 8005288:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80052d8 <__ieee754_pow+0x750>
 800528c:	e617      	b.n	8004ebe <__ieee754_pow+0x336>
 800528e:	bf00      	nop
 8005290:	4a454eef 	.word	0x4a454eef
 8005294:	3fca7e28 	.word	0x3fca7e28
 8005298:	93c9db65 	.word	0x93c9db65
 800529c:	3fcd864a 	.word	0x3fcd864a
 80052a0:	a91d4101 	.word	0xa91d4101
 80052a4:	3fd17460 	.word	0x3fd17460
 80052a8:	518f264d 	.word	0x518f264d
 80052ac:	3fd55555 	.word	0x3fd55555
 80052b0:	db6fabff 	.word	0xdb6fabff
 80052b4:	3fdb6db6 	.word	0x3fdb6db6
 80052b8:	33333303 	.word	0x33333303
 80052bc:	3fe33333 	.word	0x3fe33333
 80052c0:	e0000000 	.word	0xe0000000
 80052c4:	3feec709 	.word	0x3feec709
 80052c8:	dc3a03fd 	.word	0xdc3a03fd
 80052cc:	3feec709 	.word	0x3feec709
 80052d0:	145b01f5 	.word	0x145b01f5
 80052d4:	be3e2fe0 	.word	0xbe3e2fe0
 80052d8:	00000000 	.word	0x00000000
 80052dc:	3ff00000 	.word	0x3ff00000
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	43400000 	.word	0x43400000
 80052e8:	0003988e 	.word	0x0003988e
 80052ec:	000bb679 	.word	0x000bb679
 80052f0:	0801ae10 	.word	0x0801ae10
 80052f4:	3ff00000 	.word	0x3ff00000
 80052f8:	40080000 	.word	0x40080000
 80052fc:	0801ae30 	.word	0x0801ae30
 8005300:	0801ae20 	.word	0x0801ae20
 8005304:	a3b5      	add	r3, pc, #724	; (adr r3, 80055dc <__ieee754_pow+0xa54>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	4640      	mov	r0, r8
 800530c:	4649      	mov	r1, r9
 800530e:	f7fa ff81 	bl	8000214 <__adddf3>
 8005312:	4622      	mov	r2, r4
 8005314:	ec41 0b1a 	vmov	d10, r0, r1
 8005318:	462b      	mov	r3, r5
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	f7fa ff77 	bl	8000210 <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	ec51 0b1a 	vmov	r0, r1, d10
 800532a:	f7fb fbb9 	bl	8000aa0 <__aeabi_dcmpgt>
 800532e:	2800      	cmp	r0, #0
 8005330:	f47f ae04 	bne.w	8004f3c <__ieee754_pow+0x3b4>
 8005334:	4aa4      	ldr	r2, [pc, #656]	; (80055c8 <__ieee754_pow+0xa40>)
 8005336:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800533a:	4293      	cmp	r3, r2
 800533c:	f340 8108 	ble.w	8005550 <__ieee754_pow+0x9c8>
 8005340:	151b      	asrs	r3, r3, #20
 8005342:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005346:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800534a:	fa4a f303 	asr.w	r3, sl, r3
 800534e:	445b      	add	r3, fp
 8005350:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005354:	4e9d      	ldr	r6, [pc, #628]	; (80055cc <__ieee754_pow+0xa44>)
 8005356:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800535a:	4116      	asrs	r6, r2
 800535c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005360:	2000      	movs	r0, #0
 8005362:	ea23 0106 	bic.w	r1, r3, r6
 8005366:	f1c2 0214 	rsb	r2, r2, #20
 800536a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800536e:	fa4a fa02 	asr.w	sl, sl, r2
 8005372:	f1bb 0f00 	cmp.w	fp, #0
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	bfb8      	it	lt
 8005380:	f1ca 0a00 	rsblt	sl, sl, #0
 8005384:	f7fa ff44 	bl	8000210 <__aeabi_dsub>
 8005388:	ec41 0b19 	vmov	d9, r0, r1
 800538c:	4642      	mov	r2, r8
 800538e:	464b      	mov	r3, r9
 8005390:	ec51 0b19 	vmov	r0, r1, d9
 8005394:	f7fa ff3e 	bl	8000214 <__adddf3>
 8005398:	a37b      	add	r3, pc, #492	; (adr r3, 8005588 <__ieee754_pow+0xa00>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	2000      	movs	r0, #0
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	f7fb f8ec 	bl	8000580 <__aeabi_dmul>
 80053a8:	ec53 2b19 	vmov	r2, r3, d9
 80053ac:	4606      	mov	r6, r0
 80053ae:	460f      	mov	r7, r1
 80053b0:	4620      	mov	r0, r4
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7fa ff2c 	bl	8000210 <__aeabi_dsub>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4640      	mov	r0, r8
 80053be:	4649      	mov	r1, r9
 80053c0:	f7fa ff26 	bl	8000210 <__aeabi_dsub>
 80053c4:	a372      	add	r3, pc, #456	; (adr r3, 8005590 <__ieee754_pow+0xa08>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fb f8d9 	bl	8000580 <__aeabi_dmul>
 80053ce:	a372      	add	r3, pc, #456	; (adr r3, 8005598 <__ieee754_pow+0xa10>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	4680      	mov	r8, r0
 80053d6:	4689      	mov	r9, r1
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fb f8d0 	bl	8000580 <__aeabi_dmul>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4640      	mov	r0, r8
 80053e6:	4649      	mov	r1, r9
 80053e8:	f7fa ff14 	bl	8000214 <__adddf3>
 80053ec:	4604      	mov	r4, r0
 80053ee:	460d      	mov	r5, r1
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4630      	mov	r0, r6
 80053f6:	4639      	mov	r1, r7
 80053f8:	f7fa ff0c 	bl	8000214 <__adddf3>
 80053fc:	4632      	mov	r2, r6
 80053fe:	463b      	mov	r3, r7
 8005400:	4680      	mov	r8, r0
 8005402:	4689      	mov	r9, r1
 8005404:	f7fa ff04 	bl	8000210 <__aeabi_dsub>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4620      	mov	r0, r4
 800540e:	4629      	mov	r1, r5
 8005410:	f7fa fefe 	bl	8000210 <__aeabi_dsub>
 8005414:	4642      	mov	r2, r8
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	464b      	mov	r3, r9
 800541c:	4640      	mov	r0, r8
 800541e:	4649      	mov	r1, r9
 8005420:	f7fb f8ae 	bl	8000580 <__aeabi_dmul>
 8005424:	a35e      	add	r3, pc, #376	; (adr r3, 80055a0 <__ieee754_pow+0xa18>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	4604      	mov	r4, r0
 800542c:	460d      	mov	r5, r1
 800542e:	f7fb f8a7 	bl	8000580 <__aeabi_dmul>
 8005432:	a35d      	add	r3, pc, #372	; (adr r3, 80055a8 <__ieee754_pow+0xa20>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fa feea 	bl	8000210 <__aeabi_dsub>
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	f7fb f89e 	bl	8000580 <__aeabi_dmul>
 8005444:	a35a      	add	r3, pc, #360	; (adr r3, 80055b0 <__ieee754_pow+0xa28>)
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fa fee3 	bl	8000214 <__adddf3>
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	f7fb f895 	bl	8000580 <__aeabi_dmul>
 8005456:	a358      	add	r3, pc, #352	; (adr r3, 80055b8 <__ieee754_pow+0xa30>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fa fed8 	bl	8000210 <__aeabi_dsub>
 8005460:	4622      	mov	r2, r4
 8005462:	462b      	mov	r3, r5
 8005464:	f7fb f88c 	bl	8000580 <__aeabi_dmul>
 8005468:	a355      	add	r3, pc, #340	; (adr r3, 80055c0 <__ieee754_pow+0xa38>)
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	f7fa fed1 	bl	8000214 <__adddf3>
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	f7fb f883 	bl	8000580 <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4640      	mov	r0, r8
 8005480:	4649      	mov	r1, r9
 8005482:	f7fa fec5 	bl	8000210 <__aeabi_dsub>
 8005486:	4604      	mov	r4, r0
 8005488:	460d      	mov	r5, r1
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fb f875 	bl	8000580 <__aeabi_dmul>
 8005496:	2200      	movs	r2, #0
 8005498:	ec41 0b19 	vmov	d9, r0, r1
 800549c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054a0:	4620      	mov	r0, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	f7fa feb4 	bl	8000210 <__aeabi_dsub>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	ec51 0b19 	vmov	r0, r1, d9
 80054b0:	f7fb f990 	bl	80007d4 <__aeabi_ddiv>
 80054b4:	4632      	mov	r2, r6
 80054b6:	4604      	mov	r4, r0
 80054b8:	460d      	mov	r5, r1
 80054ba:	463b      	mov	r3, r7
 80054bc:	4640      	mov	r0, r8
 80054be:	4649      	mov	r1, r9
 80054c0:	f7fb f85e 	bl	8000580 <__aeabi_dmul>
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	f7fa fea4 	bl	8000214 <__adddf3>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fa fe9c 	bl	8000210 <__aeabi_dsub>
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	f7fa fe98 	bl	8000210 <__aeabi_dsub>
 80054e0:	460b      	mov	r3, r1
 80054e2:	4602      	mov	r2, r0
 80054e4:	493a      	ldr	r1, [pc, #232]	; (80055d0 <__ieee754_pow+0xa48>)
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7fa fe92 	bl	8000210 <__aeabi_dsub>
 80054ec:	ec41 0b10 	vmov	d0, r0, r1
 80054f0:	ee10 3a90 	vmov	r3, s1
 80054f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80054f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fc:	da2b      	bge.n	8005556 <__ieee754_pow+0x9ce>
 80054fe:	4650      	mov	r0, sl
 8005500:	f000 f96a 	bl	80057d8 <scalbn>
 8005504:	ec51 0b10 	vmov	r0, r1, d0
 8005508:	ec53 2b18 	vmov	r2, r3, d8
 800550c:	f7ff bbed 	b.w	8004cea <__ieee754_pow+0x162>
 8005510:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <__ieee754_pow+0xa4c>)
 8005512:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005516:	429e      	cmp	r6, r3
 8005518:	f77f af0c 	ble.w	8005334 <__ieee754_pow+0x7ac>
 800551c:	4b2e      	ldr	r3, [pc, #184]	; (80055d8 <__ieee754_pow+0xa50>)
 800551e:	440b      	add	r3, r1
 8005520:	4303      	orrs	r3, r0
 8005522:	d009      	beq.n	8005538 <__ieee754_pow+0x9b0>
 8005524:	ec51 0b18 	vmov	r0, r1, d8
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	f7fb fa9a 	bl	8000a64 <__aeabi_dcmplt>
 8005530:	3800      	subs	r0, #0
 8005532:	bf18      	it	ne
 8005534:	2001      	movne	r0, #1
 8005536:	e447      	b.n	8004dc8 <__ieee754_pow+0x240>
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	f7fa fe68 	bl	8000210 <__aeabi_dsub>
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	f7fb faa2 	bl	8000a8c <__aeabi_dcmpge>
 8005548:	2800      	cmp	r0, #0
 800554a:	f43f aef3 	beq.w	8005334 <__ieee754_pow+0x7ac>
 800554e:	e7e9      	b.n	8005524 <__ieee754_pow+0x99c>
 8005550:	f04f 0a00 	mov.w	sl, #0
 8005554:	e71a      	b.n	800538c <__ieee754_pow+0x804>
 8005556:	ec51 0b10 	vmov	r0, r1, d0
 800555a:	4619      	mov	r1, r3
 800555c:	e7d4      	b.n	8005508 <__ieee754_pow+0x980>
 800555e:	491c      	ldr	r1, [pc, #112]	; (80055d0 <__ieee754_pow+0xa48>)
 8005560:	2000      	movs	r0, #0
 8005562:	f7ff bb30 	b.w	8004bc6 <__ieee754_pow+0x3e>
 8005566:	2000      	movs	r0, #0
 8005568:	2100      	movs	r1, #0
 800556a:	f7ff bb2c 	b.w	8004bc6 <__ieee754_pow+0x3e>
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7ff bb28 	b.w	8004bc6 <__ieee754_pow+0x3e>
 8005576:	9204      	str	r2, [sp, #16]
 8005578:	f7ff bb7a 	b.w	8004c70 <__ieee754_pow+0xe8>
 800557c:	2300      	movs	r3, #0
 800557e:	f7ff bb64 	b.w	8004c4a <__ieee754_pow+0xc2>
 8005582:	bf00      	nop
 8005584:	f3af 8000 	nop.w
 8005588:	00000000 	.word	0x00000000
 800558c:	3fe62e43 	.word	0x3fe62e43
 8005590:	fefa39ef 	.word	0xfefa39ef
 8005594:	3fe62e42 	.word	0x3fe62e42
 8005598:	0ca86c39 	.word	0x0ca86c39
 800559c:	be205c61 	.word	0xbe205c61
 80055a0:	72bea4d0 	.word	0x72bea4d0
 80055a4:	3e663769 	.word	0x3e663769
 80055a8:	c5d26bf1 	.word	0xc5d26bf1
 80055ac:	3ebbbd41 	.word	0x3ebbbd41
 80055b0:	af25de2c 	.word	0xaf25de2c
 80055b4:	3f11566a 	.word	0x3f11566a
 80055b8:	16bebd93 	.word	0x16bebd93
 80055bc:	3f66c16c 	.word	0x3f66c16c
 80055c0:	5555553e 	.word	0x5555553e
 80055c4:	3fc55555 	.word	0x3fc55555
 80055c8:	3fe00000 	.word	0x3fe00000
 80055cc:	000fffff 	.word	0x000fffff
 80055d0:	3ff00000 	.word	0x3ff00000
 80055d4:	4090cbff 	.word	0x4090cbff
 80055d8:	3f6f3400 	.word	0x3f6f3400
 80055dc:	652b82fe 	.word	0x652b82fe
 80055e0:	3c971547 	.word	0x3c971547

080055e4 <__ieee754_sqrt>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	ec55 4b10 	vmov	r4, r5, d0
 80055ec:	4e55      	ldr	r6, [pc, #340]	; (8005744 <__ieee754_sqrt+0x160>)
 80055ee:	43ae      	bics	r6, r5
 80055f0:	ee10 0a10 	vmov	r0, s0
 80055f4:	ee10 3a10 	vmov	r3, s0
 80055f8:	462a      	mov	r2, r5
 80055fa:	4629      	mov	r1, r5
 80055fc:	d110      	bne.n	8005620 <__ieee754_sqrt+0x3c>
 80055fe:	ee10 2a10 	vmov	r2, s0
 8005602:	462b      	mov	r3, r5
 8005604:	f7fa ffbc 	bl	8000580 <__aeabi_dmul>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa fe00 	bl	8000214 <__adddf3>
 8005614:	4604      	mov	r4, r0
 8005616:	460d      	mov	r5, r1
 8005618:	ec45 4b10 	vmov	d0, r4, r5
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	2d00      	cmp	r5, #0
 8005622:	dc10      	bgt.n	8005646 <__ieee754_sqrt+0x62>
 8005624:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005628:	4330      	orrs	r0, r6
 800562a:	d0f5      	beq.n	8005618 <__ieee754_sqrt+0x34>
 800562c:	b15d      	cbz	r5, 8005646 <__ieee754_sqrt+0x62>
 800562e:	ee10 2a10 	vmov	r2, s0
 8005632:	462b      	mov	r3, r5
 8005634:	ee10 0a10 	vmov	r0, s0
 8005638:	f7fa fdea 	bl	8000210 <__aeabi_dsub>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	f7fb f8c8 	bl	80007d4 <__aeabi_ddiv>
 8005644:	e7e6      	b.n	8005614 <__ieee754_sqrt+0x30>
 8005646:	1512      	asrs	r2, r2, #20
 8005648:	d074      	beq.n	8005734 <__ieee754_sqrt+0x150>
 800564a:	07d4      	lsls	r4, r2, #31
 800564c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005650:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005658:	bf5e      	ittt	pl
 800565a:	0fda      	lsrpl	r2, r3, #31
 800565c:	005b      	lslpl	r3, r3, #1
 800565e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005662:	2400      	movs	r4, #0
 8005664:	0fda      	lsrs	r2, r3, #31
 8005666:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800566a:	107f      	asrs	r7, r7, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2516      	movs	r5, #22
 8005670:	4620      	mov	r0, r4
 8005672:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005676:	1886      	adds	r6, r0, r2
 8005678:	428e      	cmp	r6, r1
 800567a:	bfde      	ittt	le
 800567c:	1b89      	suble	r1, r1, r6
 800567e:	18b0      	addle	r0, r6, r2
 8005680:	18a4      	addle	r4, r4, r2
 8005682:	0049      	lsls	r1, r1, #1
 8005684:	3d01      	subs	r5, #1
 8005686:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800568a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800568e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005692:	d1f0      	bne.n	8005676 <__ieee754_sqrt+0x92>
 8005694:	462a      	mov	r2, r5
 8005696:	f04f 0e20 	mov.w	lr, #32
 800569a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800569e:	4281      	cmp	r1, r0
 80056a0:	eb06 0c05 	add.w	ip, r6, r5
 80056a4:	dc02      	bgt.n	80056ac <__ieee754_sqrt+0xc8>
 80056a6:	d113      	bne.n	80056d0 <__ieee754_sqrt+0xec>
 80056a8:	459c      	cmp	ip, r3
 80056aa:	d811      	bhi.n	80056d0 <__ieee754_sqrt+0xec>
 80056ac:	f1bc 0f00 	cmp.w	ip, #0
 80056b0:	eb0c 0506 	add.w	r5, ip, r6
 80056b4:	da43      	bge.n	800573e <__ieee754_sqrt+0x15a>
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	db41      	blt.n	800573e <__ieee754_sqrt+0x15a>
 80056ba:	f100 0801 	add.w	r8, r0, #1
 80056be:	1a09      	subs	r1, r1, r0
 80056c0:	459c      	cmp	ip, r3
 80056c2:	bf88      	it	hi
 80056c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80056c8:	eba3 030c 	sub.w	r3, r3, ip
 80056cc:	4432      	add	r2, r6
 80056ce:	4640      	mov	r0, r8
 80056d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80056d4:	f1be 0e01 	subs.w	lr, lr, #1
 80056d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80056dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80056e4:	d1db      	bne.n	800569e <__ieee754_sqrt+0xba>
 80056e6:	430b      	orrs	r3, r1
 80056e8:	d006      	beq.n	80056f8 <__ieee754_sqrt+0x114>
 80056ea:	1c50      	adds	r0, r2, #1
 80056ec:	bf13      	iteet	ne
 80056ee:	3201      	addne	r2, #1
 80056f0:	3401      	addeq	r4, #1
 80056f2:	4672      	moveq	r2, lr
 80056f4:	f022 0201 	bicne.w	r2, r2, #1
 80056f8:	1063      	asrs	r3, r4, #1
 80056fa:	0852      	lsrs	r2, r2, #1
 80056fc:	07e1      	lsls	r1, r4, #31
 80056fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005702:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005706:	bf48      	it	mi
 8005708:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800570c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005710:	4614      	mov	r4, r2
 8005712:	e781      	b.n	8005618 <__ieee754_sqrt+0x34>
 8005714:	0ad9      	lsrs	r1, r3, #11
 8005716:	3815      	subs	r0, #21
 8005718:	055b      	lsls	r3, r3, #21
 800571a:	2900      	cmp	r1, #0
 800571c:	d0fa      	beq.n	8005714 <__ieee754_sqrt+0x130>
 800571e:	02cd      	lsls	r5, r1, #11
 8005720:	d50a      	bpl.n	8005738 <__ieee754_sqrt+0x154>
 8005722:	f1c2 0420 	rsb	r4, r2, #32
 8005726:	fa23 f404 	lsr.w	r4, r3, r4
 800572a:	1e55      	subs	r5, r2, #1
 800572c:	4093      	lsls	r3, r2
 800572e:	4321      	orrs	r1, r4
 8005730:	1b42      	subs	r2, r0, r5
 8005732:	e78a      	b.n	800564a <__ieee754_sqrt+0x66>
 8005734:	4610      	mov	r0, r2
 8005736:	e7f0      	b.n	800571a <__ieee754_sqrt+0x136>
 8005738:	0049      	lsls	r1, r1, #1
 800573a:	3201      	adds	r2, #1
 800573c:	e7ef      	b.n	800571e <__ieee754_sqrt+0x13a>
 800573e:	4680      	mov	r8, r0
 8005740:	e7bd      	b.n	80056be <__ieee754_sqrt+0xda>
 8005742:	bf00      	nop
 8005744:	7ff00000 	.word	0x7ff00000

08005748 <__ieee754_sqrtf>:
 8005748:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800574c:	4770      	bx	lr

0800574e <with_errno>:
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	460d      	mov	r5, r1
 8005754:	4616      	mov	r6, r2
 8005756:	f7ff f955 	bl	8004a04 <__errno>
 800575a:	4629      	mov	r1, r5
 800575c:	6006      	str	r6, [r0, #0]
 800575e:	4620      	mov	r0, r4
 8005760:	bd70      	pop	{r4, r5, r6, pc}

08005762 <xflow>:
 8005762:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005764:	4614      	mov	r4, r2
 8005766:	461d      	mov	r5, r3
 8005768:	b108      	cbz	r0, 800576e <xflow+0xc>
 800576a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800576e:	e9cd 2300 	strd	r2, r3, [sp]
 8005772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fa ff01 	bl	8000580 <__aeabi_dmul>
 800577e:	2222      	movs	r2, #34	; 0x22
 8005780:	b003      	add	sp, #12
 8005782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005786:	f7ff bfe2 	b.w	800574e <with_errno>

0800578a <__math_uflow>:
 800578a:	b508      	push	{r3, lr}
 800578c:	2200      	movs	r2, #0
 800578e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005792:	f7ff ffe6 	bl	8005762 <xflow>
 8005796:	ec41 0b10 	vmov	d0, r0, r1
 800579a:	bd08      	pop	{r3, pc}

0800579c <__math_oflow>:
 800579c:	b508      	push	{r3, lr}
 800579e:	2200      	movs	r2, #0
 80057a0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80057a4:	f7ff ffdd 	bl	8005762 <xflow>
 80057a8:	ec41 0b10 	vmov	d0, r0, r1
 80057ac:	bd08      	pop	{r3, pc}

080057ae <fabs>:
 80057ae:	ec51 0b10 	vmov	r0, r1, d0
 80057b2:	ee10 2a10 	vmov	r2, s0
 80057b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057ba:	ec43 2b10 	vmov	d0, r2, r3
 80057be:	4770      	bx	lr

080057c0 <finite>:
 80057c0:	b082      	sub	sp, #8
 80057c2:	ed8d 0b00 	vstr	d0, [sp]
 80057c6:	9801      	ldr	r0, [sp, #4]
 80057c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80057cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80057d0:	0fc0      	lsrs	r0, r0, #31
 80057d2:	b002      	add	sp, #8
 80057d4:	4770      	bx	lr
	...

080057d8 <scalbn>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	ec55 4b10 	vmov	r4, r5, d0
 80057de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80057e2:	4606      	mov	r6, r0
 80057e4:	462b      	mov	r3, r5
 80057e6:	b99a      	cbnz	r2, 8005810 <scalbn+0x38>
 80057e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80057ec:	4323      	orrs	r3, r4
 80057ee:	d036      	beq.n	800585e <scalbn+0x86>
 80057f0:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <scalbn+0x100>)
 80057f2:	4629      	mov	r1, r5
 80057f4:	ee10 0a10 	vmov	r0, s0
 80057f8:	2200      	movs	r2, #0
 80057fa:	f7fa fec1 	bl	8000580 <__aeabi_dmul>
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <scalbn+0x104>)
 8005800:	429e      	cmp	r6, r3
 8005802:	4604      	mov	r4, r0
 8005804:	460d      	mov	r5, r1
 8005806:	da10      	bge.n	800582a <scalbn+0x52>
 8005808:	a32b      	add	r3, pc, #172	; (adr r3, 80058b8 <scalbn+0xe0>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	e03a      	b.n	8005886 <scalbn+0xae>
 8005810:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005814:	428a      	cmp	r2, r1
 8005816:	d10c      	bne.n	8005832 <scalbn+0x5a>
 8005818:	ee10 2a10 	vmov	r2, s0
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fa fcf8 	bl	8000214 <__adddf3>
 8005824:	4604      	mov	r4, r0
 8005826:	460d      	mov	r5, r1
 8005828:	e019      	b.n	800585e <scalbn+0x86>
 800582a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800582e:	460b      	mov	r3, r1
 8005830:	3a36      	subs	r2, #54	; 0x36
 8005832:	4432      	add	r2, r6
 8005834:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005838:	428a      	cmp	r2, r1
 800583a:	dd08      	ble.n	800584e <scalbn+0x76>
 800583c:	2d00      	cmp	r5, #0
 800583e:	a120      	add	r1, pc, #128	; (adr r1, 80058c0 <scalbn+0xe8>)
 8005840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005844:	da1c      	bge.n	8005880 <scalbn+0xa8>
 8005846:	a120      	add	r1, pc, #128	; (adr r1, 80058c8 <scalbn+0xf0>)
 8005848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800584c:	e018      	b.n	8005880 <scalbn+0xa8>
 800584e:	2a00      	cmp	r2, #0
 8005850:	dd08      	ble.n	8005864 <scalbn+0x8c>
 8005852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800585a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800585e:	ec45 4b10 	vmov	d0, r4, r5
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005868:	da19      	bge.n	800589e <scalbn+0xc6>
 800586a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800586e:	429e      	cmp	r6, r3
 8005870:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005874:	dd0a      	ble.n	800588c <scalbn+0xb4>
 8005876:	a112      	add	r1, pc, #72	; (adr r1, 80058c0 <scalbn+0xe8>)
 8005878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e2      	bne.n	8005846 <scalbn+0x6e>
 8005880:	a30f      	add	r3, pc, #60	; (adr r3, 80058c0 <scalbn+0xe8>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fe7b 	bl	8000580 <__aeabi_dmul>
 800588a:	e7cb      	b.n	8005824 <scalbn+0x4c>
 800588c:	a10a      	add	r1, pc, #40	; (adr r1, 80058b8 <scalbn+0xe0>)
 800588e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0b8      	beq.n	8005808 <scalbn+0x30>
 8005896:	a10e      	add	r1, pc, #56	; (adr r1, 80058d0 <scalbn+0xf8>)
 8005898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800589c:	e7b4      	b.n	8005808 <scalbn+0x30>
 800589e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058a2:	3236      	adds	r2, #54	; 0x36
 80058a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80058ac:	4620      	mov	r0, r4
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <scalbn+0x108>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	e7e8      	b.n	8005886 <scalbn+0xae>
 80058b4:	f3af 8000 	nop.w
 80058b8:	c2f8f359 	.word	0xc2f8f359
 80058bc:	01a56e1f 	.word	0x01a56e1f
 80058c0:	8800759c 	.word	0x8800759c
 80058c4:	7e37e43c 	.word	0x7e37e43c
 80058c8:	8800759c 	.word	0x8800759c
 80058cc:	fe37e43c 	.word	0xfe37e43c
 80058d0:	c2f8f359 	.word	0xc2f8f359
 80058d4:	81a56e1f 	.word	0x81a56e1f
 80058d8:	43500000 	.word	0x43500000
 80058dc:	ffff3cb0 	.word	0xffff3cb0
 80058e0:	3c900000 	.word	0x3c900000

080058e4 <_init>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	bf00      	nop
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr

080058f0 <_fini>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr
