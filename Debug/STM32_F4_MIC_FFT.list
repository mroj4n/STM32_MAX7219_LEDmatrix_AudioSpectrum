
STM32_F4_MIC_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015508  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801958c  0801958c  000301b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801958c  0801958c  0002958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019594  08019594  000301b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019594  08019594  00029594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019598  08019598  00029598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0801959c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003124  200001b4  08019750  000301b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032d8  08019750  000332d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001755b  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c86  00000000  00000000  0004773f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0004a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0004ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bef  00000000  00000000  0004b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4b7  00000000  00000000  0006e4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8d09  00000000  00000000  0007d976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  0015667f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a88  00000000  00000000  00156748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002d92  00000000  00000000  001591d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001b4 	.word	0x200001b4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800406c 	.word	0x0800406c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001b8 	.word	0x200001b8
 8000200:	0800406c 	.word	0x0800406c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	f5ad 4dc0 	sub.w	sp, sp, #24576	; 0x6000
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fc93 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f893 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f9af 	bl	800087c <MX_GPIO_Init>
  MX_ADC1_Init();
 800051e:	f000 f8fb 	bl	8000718 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f981 	bl	8000828 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000526:	f000 f949 	bl	80007bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  max_init();
 800052a:	f000 faad 	bl	8000a88 <max_init>
  uint32_t configtime = HAL_GetTick();
 800052e:	f000 fceb 	bl	8000f08 <HAL_GetTick>
 8000532:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000536:	6018      	str	r0, [r3, #0]
  uint32_t g_ADCValueARRAY[BUFFER_SIZE];
  int g_MeasurementNumber;

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000538:	483a      	ldr	r0, [pc, #232]	; (8000624 <main+0x11c>)
 800053a:	f000 fd59 	bl	8000ff0 <HAL_ADC_Start>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <main+0x40>
  {
    Error_Handler();
 8000544:	f000 fa4e 	bl	80009e4 <Error_Handler>
  }

  for (i = 1; i < 9; i++)
 8000548:	4b37      	ldr	r3, [pc, #220]	; (8000628 <main+0x120>)
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	e00f      	b.n	8000570 <main+0x68>
  {
    write_max(i, display_matrix[i - 1]);
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <main+0x120>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b34      	ldr	r3, [pc, #208]	; (8000628 <main+0x120>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4934      	ldr	r1, [pc, #208]	; (800062c <main+0x124>)
 800055c:	5ccb      	ldrb	r3, [r1, r3]
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f000 fa71 	bl	8000a48 <write_max>
  for (i = 1; i < 9; i++)
 8000566:	4b30      	ldr	r3, [pc, #192]	; (8000628 <main+0x120>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a2e      	ldr	r2, [pc, #184]	; (8000628 <main+0x120>)
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <main+0x120>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b08      	cmp	r3, #8
 8000576:	ddeb      	ble.n	8000550 <main+0x48>
  }
  write_string("ABCD");
 8000578:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0x128>)
 800057a:	f000 fa9d 	bl	8000ab8 <write_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800057e:	2120      	movs	r1, #32
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <main+0x12c>)
 8000582:	f001 fb60 	bl	8001c46 <HAL_GPIO_TogglePin>
  while (1)
  {
    configtime = HAL_GetTick();
 8000586:	f000 fcbf 	bl	8000f08 <HAL_GetTick>
 800058a:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 800058e:	6018      	str	r0, [r3, #0]
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4823      	ldr	r0, [pc, #140]	; (8000624 <main+0x11c>)
 8000596:	f000 fdfd 	bl	8001194 <HAL_ADC_PollForConversion>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d12e      	bne.n	80005fe <main+0xf6>
    {
      for (i = 0; i < BUFFER_SIZE; i++)
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x120>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e012      	b.n	80005ce <main+0xc6>
      {
    	  testInput_f32_10khz[i] = HAL_ADC_GetValue(&hadc1);
 80005a8:	481e      	ldr	r0, [pc, #120]	; (8000624 <main+0x11c>)
 80005aa:	f000 fe7e 	bl	80012aa <HAL_ADC_GetValue>
 80005ae:	ee07 0a90 	vmov	s15, r0
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0x120>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <main+0x130>)
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i < BUFFER_SIZE; i++)
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0x120>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <main+0x120>)
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <main+0x120>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005d6:	dbe7      	blt.n	80005a8 <main+0xa0>
    	 
      }
      g_ADCValue = HAL_ADC_GetValue(&hadc1); // 4096-0 returns
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <main+0x11c>)
 80005da:	f000 fe66 	bl	80012aa <HAL_ADC_GetValue>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <main+0x134>)
 80005e2:	6013      	str	r3, [r2, #0]
      fft();
 80005e4:	f000 f9b8 	bl	8000958 <fft>
      g_MeasurementNumber++;
 80005e8:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 80005ec:	f103 0304 	add.w	r3, r3, #4
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
 80005f8:	f102 0204 	add.w	r2, r2, #4
 80005fc:	6013      	str	r3, [r2, #0]
    }
    configtime = HAL_GetTick() - configtime;
 80005fe:	f000 fc83 	bl	8000f08 <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
 8000610:	6013      	str	r3, [r2, #0]
//	{
//		write_max(i + 1, 0x00);
//	}
    //write_string("ABCD");

    HAL_Delay(500);
 8000612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000616:	f000 fc83 	bl	8000f20 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800061a:	2120      	movs	r1, #32
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0x12c>)
 800061e:	f001 fb12 	bl	8001c46 <HAL_GPIO_TogglePin>
    configtime = HAL_GetTick();
 8000622:	e7b0      	b.n	8000586 <main+0x7e>
 8000624:	200001d0 	.word	0x200001d0
 8000628:	200032d0 	.word	0x200032d0
 800062c:	20000000 	.word	0x20000000
 8000630:	08004084 	.word	0x08004084
 8000634:	40020000 	.word	0x40020000
 8000638:	200002b4 	.word	0x200002b4
 800063c:	200032cc 	.word	0x200032cc

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fce2 	bl	8004018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <SystemClock_Config+0xd0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xd4>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 164;
 80006b4:	23a4      	movs	r3, #164	; 0xa4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fe21 	bl	8002310 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d4:	f000 f986 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fac0 	bl	8001c7c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f000 f96f 	bl	80009e4 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x98>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x9c>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000732:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000736:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_ADC1_Init+0x98>)
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xa0>)
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_ADC1_Init+0x98>)
 800077a:	f000 fbf5 	bl	8000f68 <HAL_ADC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 f92e 	bl	80009e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC1_Init+0x98>)
 800079a:	f000 fd93 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 f91e 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200001d0 	.word	0x200001d0
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001

080007bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_SPI2_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_SPI2_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI2_Init+0x64>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI2_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_SPI2_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI2_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI2_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI2_Init+0x64>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI2_Init+0x64>)
 80007f0:	2210      	movs	r2, #16
 80007f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_SPI2_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI2_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_SPI2_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI2_Init+0x64>)
 8000808:	220a      	movs	r2, #10
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_SPI2_Init+0x64>)
 800080e:	f002 f81d 	bl	800284c <HAL_SPI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 f8e4 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000218 	.word	0x20000218
 8000824:	40003800 	.word	0x40003800

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f002 f87d 	bl	800295e <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f8bb 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000270 	.word	0x20000270
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	; (800094c <MX_GPIO_Init+0xd0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, clock_Pin|LD2_Pin|cs_Pin|DATA_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	21f0      	movs	r1, #240	; 0xf0
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_GPIO_Init+0xd4>)
 8000908:	f001 f984 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000912:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_GPIO_Init+0xd8>)
 8000924:	f000 ffe2 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : clock_Pin LD2_Pin cs_Pin DATA_Pin */
  GPIO_InitStruct.Pin = clock_Pin|LD2_Pin|cs_Pin|DATA_Pin;
 8000928:	23f0      	movs	r3, #240	; 0xf0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0xd4>)
 8000940:	f000 ffd4 	bl	80018ec <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020800 	.word	0x40020800

08000958 <fft>:

/* USER CODE BEGIN 4 */
void fft(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  arm_status status;
  float32_t maxValue;
  status = ARM_MATH_SUCCESS;
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
  status=arm_cfft_init_f32(&varInstCfftF32,fftSize);
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <fft+0x6c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	4817      	ldr	r0, [pc, #92]	; (80009c8 <fft+0x70>)
 800096c:	f002 fb28 	bl	8002fc0 <arm_cfft_init_f32>
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  /* Process the data through the CFFT/CIFFT module */
  arm_cfft_f32(&varInstCfftF32, testInput_f32_10khz, ifftFlag, doBitReverse);
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <fft+0x74>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <fft+0x78>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4914      	ldr	r1, [pc, #80]	; (80009d4 <fft+0x7c>)
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <fft+0x70>)
 8000984:	f002 fe96 	bl	80036b4 <arm_cfft_f32>
  /* Process the data through the Complex Magnitude Module for
  calculating the magnitude at each bin */
  arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <fft+0x6c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4912      	ldr	r1, [pc, #72]	; (80009d8 <fft+0x80>)
 8000990:	4810      	ldr	r0, [pc, #64]	; (80009d4 <fft+0x7c>)
 8000992:	f002 ff27 	bl	80037e4 <arm_cmplx_mag_f32>
  /* Calculates maxValue and returns corresponding BIN value */
  arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <fft+0x6c>)
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	463a      	mov	r2, r7
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <fft+0x84>)
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <fft+0x80>)
 80009a0:	f002 fa9e 	bl	8002ee0 <arm_max_f32>
  status = (testIndex != refIndex) ? ARM_MATH_TEST_FAILURE : ARM_MATH_SUCCESS;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <fft+0x84>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <fft+0x88>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d002      	beq.n	80009b6 <fft+0x5e>
 80009b0:	f06f 0305 	mvn.w	r3, #5
 80009b4:	e000      	b.n	80009b8 <fft+0x60>
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
  {
#if defined (SEMIHOSTING)
    printf("SUCCESS\n");                          /* main function does not return */
#endif
  }
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	200032b8 	.word	0x200032b8
 80009cc:	200032b4 	.word	0x200032b4
 80009d0:	2000000c 	.word	0x2000000c
 80009d4:	200002b4 	.word	0x200002b4
 80009d8:	200022b4 	.word	0x200022b4
 80009dc:	200032c8 	.word	0x200032c8
 80009e0:	20000010 	.word	0x20000010

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <write_byte>:
{0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y
{0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F},//Z
};

void write_byte (uint8_t byte)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e018      	b.n	8000a32 <write_byte+0x42>
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, 0);  // pull the clock pin low
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <write_byte+0x54>)
 8000a06:	f001 f905 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, byte&0x80);  // write the MSB bit to the data pin
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <write_byte+0x54>)
 8000a18:	f001 f8fc 	bl	8001c14 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, 1);  // pull the clock pin HIGH
 8000a22:	2201      	movs	r2, #1
 8000a24:	2110      	movs	r1, #16
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <write_byte+0x54>)
 8000a28:	f001 f8f4 	bl	8001c14 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	dde3      	ble.n	8000a00 <write_byte+0x10>
	}
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40020000 	.word	0x40020000

08000a48 <write_max>:

void write_max (uint8_t address, uint8_t data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 0);  // pull the CS pin LOW
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <write_max+0x3c>)
 8000a5e:	f001 f8d9 	bl	8001c14 <HAL_GPIO_WritePin>
	write_byte (address);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffc3 	bl	80009f0 <write_byte>
	write_byte (data); 
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffbf 	bl	80009f0 <write_byte>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 1);  // pull the CS pin HIGH
 8000a72:	2201      	movs	r2, #1
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <write_max+0x3c>)
 8000a78:	f001 f8cc 	bl	8001c14 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40020000 	.word	0x40020000

08000a88 <max_init>:

void max_init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
 write_max(0x09, 0x00);       //  no decoding
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2009      	movs	r0, #9
 8000a90:	f7ff ffda 	bl	8000a48 <write_max>
 write_max(0x0a, 0x03);       //  brightness intensity
 8000a94:	2103      	movs	r1, #3
 8000a96:	200a      	movs	r0, #10
 8000a98:	f7ff ffd6 	bl	8000a48 <write_max>
 write_max(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f7ff ffd2 	bl	8000a48 <write_max>
 write_max(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	200c      	movs	r0, #12
 8000aa8:	f7ff ffce 	bl	8000a48 <write_max>
 write_max(0x0f, 0x00);       //  no test display
 8000aac:	2100      	movs	r1, #0
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff ffca 	bl	8000a48 <write_max>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <write_string>:

void write_string (char *str)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	while (*str)
 8000ac0:	e01f      	b.n	8000b02 <write_string+0x4a>
	{
		for(int i=1;i<9;i++)
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e012      	b.n	8000aee <write_string+0x36>
			   {
			       write_max (i,disp1ay[(*str - 55)][i-1]);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	b2d8      	uxtb	r0, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	490e      	ldr	r1, [pc, #56]	; (8000b14 <write_string+0x5c>)
 8000ada:	00d2      	lsls	r2, r2, #3
 8000adc:	440a      	add	r2, r1
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f7ff ffb0 	bl	8000a48 <write_max>
		for(int i=1;i<9;i++)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	dde9      	ble.n	8000ac8 <write_string+0x10>
			   }
		*str++;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
		HAL_Delay (500);
 8000afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afe:	f000 fa0f 	bl	8000f20 <HAL_Delay>
	while (*str)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1db      	bne.n	8000ac2 <write_string+0xa>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000014 	.word	0x20000014

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b56:	2007      	movs	r0, #7
 8000b58:	f000 fe94 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_ADC_MspInit+0x7c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d127      	bne.n	8000bda <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MIC_IN_Pin;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_IN_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_ADC_MspInit+0x84>)
 8000bd6:	f000 fe89 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40012000 	.word	0x40012000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <HAL_SPI_MspInit+0xe0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d15a      	bne.n	8000cc8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_SPI_MspInit+0xe4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0xe8>)
 8000c82:	f000 fe33 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c86:	2304      	movs	r3, #4
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <HAL_SPI_MspInit+0xe8>)
 8000ca2:	f000 fe23 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <HAL_SPI_MspInit+0xec>)
 8000cc4:	f000 fe12 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_UART_MspInit+0x8c>)
 8000d56:	f000 fdc9 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f890 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f003 f8db 	bl	8003fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb75 	bl	8000508 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8000e2c:	0801959c 	.word	0x0801959c
  ldr r2, =_sbss
 8000e30:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000e34:	200032d8 	.word	0x200032d8

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fd0d 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe52 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fd17 	bl	80018d2 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 fced 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000144 	.word	0x20000144
 8000ed8:	2000014c 	.word	0x2000014c
 8000edc:	20000148 	.word	0x20000148

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000014c 	.word	0x2000014c
 8000f04:	200032d4 	.word	0x200032d4

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200032d4 	.word	0x200032d4

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000014c 	.word	0x2000014c

08000f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e033      	b.n	8000fe6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fdee 	bl	8000b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d118      	bne.n	8000fd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fae:	f023 0302 	bic.w	r3, r3, #2
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fab4 	bl	8001528 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	e001      	b.n	8000fdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_ADC_Start+0x1a>
 8001006:	2302      	movs	r3, #2
 8001008:	e0b2      	b.n	8001170 <HAL_ADC_Start+0x180>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d018      	beq.n	8001052 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001030:	4b52      	ldr	r3, [pc, #328]	; (800117c <HAL_ADC_Start+0x18c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_ADC_Start+0x190>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9a      	lsrs	r2, r3, #18
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001044:	e002      	b.n	800104c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3b01      	subs	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f9      	bne.n	8001046 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d17a      	bne.n	8001156 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800109e:	d106      	bne.n	80010ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f023 0206 	bic.w	r2, r3, #6
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44
 80010ac:	e002      	b.n	80010b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <HAL_ADC_Start+0x194>)
 80010be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d12a      	bne.n	800112c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2b      	ldr	r2, [pc, #172]	; (8001188 <HAL_ADC_Start+0x198>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d015      	beq.n	800110c <HAL_ADC_Start+0x11c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_ADC_Start+0x19c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d105      	bne.n	80010f6 <HAL_ADC_Start+0x106>
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_ADC_Start+0x194>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00a      	beq.n	800110c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <HAL_ADC_Start+0x1a0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d136      	bne.n	800116e <HAL_ADC_Start+0x17e>
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_ADC_Start+0x194>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d130      	bne.n	800116e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d129      	bne.n	800116e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	e020      	b.n	800116e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_ADC_Start+0x198>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d11b      	bne.n	800116e <HAL_ADC_Start+0x17e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d114      	bne.n	800116e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e00b      	b.n	800116e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f043 0210 	orr.w	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000144 	.word	0x20000144
 8001180:	431bde83 	.word	0x431bde83
 8001184:	40012300 	.word	0x40012300
 8001188:	40012000 	.word	0x40012000
 800118c:	40012100 	.word	0x40012100
 8001190:	40012200 	.word	0x40012200

08001194 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	d113      	bne.n	80011da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c0:	d10b      	bne.n	80011da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f043 0220 	orr.w	r2, r3, #32
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e063      	b.n	80012a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011da:	f7ff fe95 	bl	8000f08 <HAL_GetTick>
 80011de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011e0:	e021      	b.n	8001226 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d01d      	beq.n	8001226 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_ADC_PollForConversion+0x6c>
 80011f0:	f7ff fe8a 	bl	8000f08 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d212      	bcs.n	8001226 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b02      	cmp	r3, #2
 800120c:	d00b      	beq.n	8001226 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f043 0204 	orr.w	r2, r3, #4
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e03d      	b.n	80012a2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b02      	cmp	r3, #2
 8001232:	d1d6      	bne.n	80011e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f06f 0212 	mvn.w	r2, #18
 800123c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d123      	bne.n	80012a0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800125c:	2b00      	cmp	r3, #0
 800125e:	d11f      	bne.n	80012a0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001278:	2b00      	cmp	r3, #0
 800127a:	d111      	bne.n	80012a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1c>
 80012dc:	2302      	movs	r3, #2
 80012de:	e113      	b.n	8001508 <HAL_ADC_ConfigChannel+0x244>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d925      	bls.n	800133c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	3b1e      	subs	r3, #30
 8001306:	2207      	movs	r2, #7
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43da      	mvns	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68d9      	ldr	r1, [r3, #12]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	4603      	mov	r3, r0
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4403      	add	r3, r0
 800132e:	3b1e      	subs	r3, #30
 8001330:	409a      	lsls	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	e022      	b.n	8001382 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6919      	ldr	r1, [r3, #16]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	2207      	movs	r2, #7
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	400a      	ands	r2, r1
 800135e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	4603      	mov	r3, r0
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4403      	add	r3, r0
 8001378:	409a      	lsls	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b06      	cmp	r3, #6
 8001388:	d824      	bhi.n	80013d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b05      	subs	r3, #5
 800139c:	221f      	movs	r2, #31
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	400a      	ands	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b05      	subs	r3, #5
 80013c6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
 80013d2:	e04c      	b.n	800146e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b0c      	cmp	r3, #12
 80013da:	d824      	bhi.n	8001426 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	3b23      	subs	r3, #35	; 0x23
 80013ee:	221f      	movs	r2, #31
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43da      	mvns	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b23      	subs	r3, #35	; 0x23
 8001418:	fa00 f203 	lsl.w	r2, r0, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
 8001424:	e023      	b.n	800146e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	3b41      	subs	r3, #65	; 0x41
 8001438:	221f      	movs	r2, #31
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	3b41      	subs	r3, #65	; 0x41
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146e:	4b29      	ldr	r3, [pc, #164]	; (8001514 <HAL_ADC_ConfigChannel+0x250>)
 8001470:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_ADC_ConfigChannel+0x254>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d10f      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1d8>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d10b      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_ADC_ConfigChannel+0x254>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_ADC_ConfigChannel+0x258>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d003      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0x1f4>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d122      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_ADC_ConfigChannel+0x258>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d111      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_ADC_ConfigChannel+0x25c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_ADC_ConfigChannel+0x260>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9a      	lsrs	r2, r3, #18
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40012300 	.word	0x40012300
 8001518:	40012000 	.word	0x40012000
 800151c:	10000012 	.word	0x10000012
 8001520:	20000144 	.word	0x20000144
 8001524:	431bde83 	.word	0x431bde83

08001528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001530:	4b79      	ldr	r3, [pc, #484]	; (8001718 <ADC_Init+0x1f0>)
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	431a      	orrs	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	021a      	lsls	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	4a58      	ldr	r2, [pc, #352]	; (800171c <ADC_Init+0x1f4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d022      	beq.n	8001606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e00f      	b.n	8001626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001624:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0202 	bic.w	r2, r2, #2
 8001634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01b      	beq.n	800168c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001662:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	3b01      	subs	r3, #1
 8001680:	035a      	lsls	r2, r3, #13
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	e007      	b.n	800169c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	051a      	lsls	r2, r3, #20
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016de:	025a      	lsls	r2, r3, #9
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	029a      	lsls	r2, r3, #10
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40012300 	.word	0x40012300
 800171c:	0f000001 	.word	0x0f000001

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff47 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff5c 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffb0 	bl	8001840 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e165      	b.n	8001bd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8154 	bne.w	8001bce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d005      	beq.n	800193e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	2b02      	cmp	r3, #2
 800193c:	d130      	bne.n	80019a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ae 	beq.w	8001bce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_GPIO_Init+0x304>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_GPIO_Init+0x308>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d025      	beq.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4e      	ldr	r2, [pc, #312]	; (8001bf8 <HAL_GPIO_Init+0x30c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01f      	beq.n	8001b02 <HAL_GPIO_Init+0x216>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_GPIO_Init+0x310>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0x212>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <HAL_GPIO_Init+0x314>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x20e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <HAL_GPIO_Init+0x318>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x20a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <HAL_GPIO_Init+0x31c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x206>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a49      	ldr	r2, [pc, #292]	; (8001c0c <HAL_GPIO_Init+0x320>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x202>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e00c      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001aee:	2307      	movs	r3, #7
 8001af0:	e00a      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e008      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e004      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_GPIO_Init+0x21c>
 8001b06:	2300      	movs	r3, #0
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f002 0203 	and.w	r2, r2, #3
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	4093      	lsls	r3, r2
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b18:	4935      	ldr	r1, [pc, #212]	; (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	f67f ae96 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40021400 	.word	0x40021400
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	041a      	lsls	r2, r3, #16
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	400b      	ands	r3, r1
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0cc      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b68      	ldr	r3, [pc, #416]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d90c      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0b8      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	494d      	ldr	r1, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d044      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d119      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e07f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3a:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e067      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4934      	ldr	r1, [pc, #208]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7ff f8cc 	bl	8000f08 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff f8c8 	bl	8000f08 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e04f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d20c      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e032      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4916      	ldr	r1, [pc, #88]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e02:	f000 f855 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	490a      	ldr	r1, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f82c 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800408c 	.word	0x0800408c
 8001e40:	20000144 	.word	0x20000144
 8001e44:	20000148 	.word	0x20000148

08001e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000144 	.word	0x20000144

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0a9b      	lsrs	r3, r3, #10
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4903      	ldr	r1, [pc, #12]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	0800409c 	.word	0x0800409c

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e8c:	f7ff ffdc 	bl	8001e48 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0b5b      	lsrs	r3, r3, #13
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	0800409c 	.word	0x0800409c

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb4:	b0ae      	sub	sp, #184	; 0xb8
 8001eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed6:	4bcb      	ldr	r3, [pc, #812]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	f200 8206 	bhi.w	80022f0 <HAL_RCC_GetSysClockFreq+0x440>
 8001ee4:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001f21 	.word	0x08001f21
 8001ef0:	080022f1 	.word	0x080022f1
 8001ef4:	080022f1 	.word	0x080022f1
 8001ef8:	080022f1 	.word	0x080022f1
 8001efc:	08001f29 	.word	0x08001f29
 8001f00:	080022f1 	.word	0x080022f1
 8001f04:	080022f1 	.word	0x080022f1
 8001f08:	080022f1 	.word	0x080022f1
 8001f0c:	08001f31 	.word	0x08001f31
 8001f10:	080022f1 	.word	0x080022f1
 8001f14:	080022f1 	.word	0x080022f1
 8001f18:	080022f1 	.word	0x080022f1
 8001f1c:	08002121 	.word	0x08002121
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4bb9      	ldr	r3, [pc, #740]	; (8002208 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f26:	e1e7      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f28:	4bb8      	ldr	r3, [pc, #736]	; (800220c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f2e:	e1e3      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f30:	4bb4      	ldr	r3, [pc, #720]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3c:	4bb1      	ldr	r3, [pc, #708]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d071      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f48:	4bae      	ldr	r3, [pc, #696]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f6e:	4622      	mov	r2, r4
 8001f70:	462b      	mov	r3, r5
 8001f72:	f04f 0000 	mov.w	r0, #0
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	0159      	lsls	r1, r3, #5
 8001f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f80:	0150      	lsls	r0, r2, #5
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4621      	mov	r1, r4
 8001f88:	1a51      	subs	r1, r2, r1
 8001f8a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f92:	647b      	str	r3, [r7, #68]	; 0x44
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	018b      	lsls	r3, r1, #6
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001faa:	4641      	mov	r1, r8
 8001fac:	018a      	lsls	r2, r1, #6
 8001fae:	4641      	mov	r1, r8
 8001fb0:	1a51      	subs	r1, r2, r1
 8001fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001fc8:	4649      	mov	r1, r9
 8001fca:	00cb      	lsls	r3, r1, #3
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fd2:	4641      	mov	r1, r8
 8001fd4:	00ca      	lsls	r2, r1, #3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4622      	mov	r2, r4
 8001fde:	189b      	adds	r3, r3, r2
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	eb42 0303 	adc.w	r3, r2, r3
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	024b      	lsls	r3, r1, #9
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002002:	4621      	mov	r1, r4
 8002004:	024a      	lsls	r2, r1, #9
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800200e:	2200      	movs	r2, #0
 8002010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002014:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002018:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800201c:	f7fe f8f2 	bl	8000204 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800202a:	e067      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202c:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	2200      	movs	r2, #0
 8002034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002038:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800203c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002044:	67bb      	str	r3, [r7, #120]	; 0x78
 8002046:	2300      	movs	r3, #0
 8002048:	67fb      	str	r3, [r7, #124]	; 0x7c
 800204a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800204e:	4622      	mov	r2, r4
 8002050:	462b      	mov	r3, r5
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	0159      	lsls	r1, r3, #5
 800205c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002060:	0150      	lsls	r0, r2, #5
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4621      	mov	r1, r4
 8002068:	1a51      	subs	r1, r2, r1
 800206a:	62b9      	str	r1, [r7, #40]	; 0x28
 800206c:	4629      	mov	r1, r5
 800206e:	eb63 0301 	sbc.w	r3, r3, r1
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002080:	4649      	mov	r1, r9
 8002082:	018b      	lsls	r3, r1, #6
 8002084:	4641      	mov	r1, r8
 8002086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800208a:	4641      	mov	r1, r8
 800208c:	018a      	lsls	r2, r1, #6
 800208e:	4641      	mov	r1, r8
 8002090:	ebb2 0a01 	subs.w	sl, r2, r1
 8002094:	4649      	mov	r1, r9
 8002096:	eb63 0b01 	sbc.w	fp, r3, r1
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ae:	4692      	mov	sl, r2
 80020b0:	469b      	mov	fp, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	eb1a 0303 	adds.w	r3, sl, r3
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	462b      	mov	r3, r5
 80020bc:	eb4b 0303 	adc.w	r3, fp, r3
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020ce:	4629      	mov	r1, r5
 80020d0:	028b      	lsls	r3, r1, #10
 80020d2:	4621      	mov	r1, r4
 80020d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d8:	4621      	mov	r1, r4
 80020da:	028a      	lsls	r2, r1, #10
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e4:	2200      	movs	r2, #0
 80020e6:	673b      	str	r3, [r7, #112]	; 0x70
 80020e8:	677a      	str	r2, [r7, #116]	; 0x74
 80020ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020ee:	f7fe f889 	bl	8000204 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4613      	mov	r3, r2
 80020f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	3301      	adds	r3, #1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800210e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800211e:	e0eb      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d06b      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCC_GetSysClockFreq+0x354>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	2200      	movs	r2, #0
 8002140:	66bb      	str	r3, [r7, #104]	; 0x68
 8002142:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214a:	663b      	str	r3, [r7, #96]	; 0x60
 800214c:	2300      	movs	r3, #0
 800214e:	667b      	str	r3, [r7, #100]	; 0x64
 8002150:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002154:	4622      	mov	r2, r4
 8002156:	462b      	mov	r3, r5
 8002158:	f04f 0000 	mov.w	r0, #0
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	0159      	lsls	r1, r3, #5
 8002162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002166:	0150      	lsls	r0, r2, #5
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4621      	mov	r1, r4
 800216e:	1a51      	subs	r1, r2, r1
 8002170:	61b9      	str	r1, [r7, #24]
 8002172:	4629      	mov	r1, r5
 8002174:	eb63 0301 	sbc.w	r3, r3, r1
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002186:	4659      	mov	r1, fp
 8002188:	018b      	lsls	r3, r1, #6
 800218a:	4651      	mov	r1, sl
 800218c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002190:	4651      	mov	r1, sl
 8002192:	018a      	lsls	r2, r1, #6
 8002194:	4651      	mov	r1, sl
 8002196:	ebb2 0801 	subs.w	r8, r2, r1
 800219a:	4659      	mov	r1, fp
 800219c:	eb63 0901 	sbc.w	r9, r3, r1
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b4:	4690      	mov	r8, r2
 80021b6:	4699      	mov	r9, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	eb18 0303 	adds.w	r3, r8, r3
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	462b      	mov	r3, r5
 80021c2:	eb49 0303 	adc.w	r3, r9, r3
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021d4:	4629      	mov	r1, r5
 80021d6:	024b      	lsls	r3, r1, #9
 80021d8:	4621      	mov	r1, r4
 80021da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021de:	4621      	mov	r1, r4
 80021e0:	024a      	lsls	r2, r1, #9
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021ea:	2200      	movs	r2, #0
 80021ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80021ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021f4:	f7fe f806 	bl	8000204 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4613      	mov	r3, r2
 80021fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002202:	e065      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x420>
 8002204:	40023800 	.word	0x40023800
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_GetSysClockFreq+0x458>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	2200      	movs	r2, #0
 8002218:	4618      	mov	r0, r3
 800221a:	4611      	mov	r1, r2
 800221c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002220:	653b      	str	r3, [r7, #80]	; 0x50
 8002222:	2300      	movs	r3, #0
 8002224:	657b      	str	r3, [r7, #84]	; 0x54
 8002226:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800222a:	4642      	mov	r2, r8
 800222c:	464b      	mov	r3, r9
 800222e:	f04f 0000 	mov.w	r0, #0
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	0159      	lsls	r1, r3, #5
 8002238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223c:	0150      	lsls	r0, r2, #5
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4641      	mov	r1, r8
 8002244:	1a51      	subs	r1, r2, r1
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	4649      	mov	r1, r9
 800224a:	eb63 0301 	sbc.w	r3, r3, r1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800225c:	4659      	mov	r1, fp
 800225e:	018b      	lsls	r3, r1, #6
 8002260:	4651      	mov	r1, sl
 8002262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002266:	4651      	mov	r1, sl
 8002268:	018a      	lsls	r2, r1, #6
 800226a:	4651      	mov	r1, sl
 800226c:	1a54      	subs	r4, r2, r1
 800226e:	4659      	mov	r1, fp
 8002270:	eb63 0501 	sbc.w	r5, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	00eb      	lsls	r3, r5, #3
 800227e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002282:	00e2      	lsls	r2, r4, #3
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
 8002288:	4643      	mov	r3, r8
 800228a:	18e3      	adds	r3, r4, r3
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	464b      	mov	r3, r9
 8002290:	eb45 0303 	adc.w	r3, r5, r3
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a2:	4629      	mov	r1, r5
 80022a4:	028b      	lsls	r3, r1, #10
 80022a6:	4621      	mov	r1, r4
 80022a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ac:	4621      	mov	r1, r4
 80022ae:	028a      	lsls	r2, r1, #10
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022b8:	2200      	movs	r2, #0
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80022bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80022be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022c2:	f7fd ff9f 	bl	8000204 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4613      	mov	r3, r2
 80022cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_RCC_GetSysClockFreq+0x458>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0f1b      	lsrs	r3, r3, #28
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80022de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022ee:	e003      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetSysClockFreq+0x45c>)
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	37b8      	adds	r7, #184	; 0xb8
 8002300:	46bd      	mov	sp, r7
 8002302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	00f42400 	.word	0x00f42400

08002310 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e28d      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8083 	beq.w	8002436 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002330:	4b94      	ldr	r3, [pc, #592]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d019      	beq.n	8002370 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800233c:	4b91      	ldr	r3, [pc, #580]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002344:	2b08      	cmp	r3, #8
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002348:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002354:	d00c      	beq.n	8002370 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d112      	bne.n	8002388 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236e:	d10b      	bne.n	8002388 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05b      	beq.n	8002434 <HAL_RCC_OscConfig+0x124>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d157      	bne.n	8002434 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e25a      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d106      	bne.n	80023a0 <HAL_RCC_OscConfig+0x90>
 8002392:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7b      	ldr	r2, [pc, #492]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xcc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xb4>
 80023aa:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a75      	ldr	r2, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b73      	ldr	r3, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a72      	ldr	r2, [pc, #456]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xcc>
 80023c4:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b6c      	ldr	r3, [pc, #432]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a6b      	ldr	r2, [pc, #428]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe fd90 	bl	8000f08 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fd8c 	bl	8000f08 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e21f      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xdc>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fd7c 	bl	8000f08 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fd78 	bl	8000f08 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e20b      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b57      	ldr	r3, [pc, #348]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x104>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d06f      	beq.n	8002522 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002442:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d017      	beq.n	800247e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800244e:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002456:	2b08      	cmp	r3, #8
 8002458:	d105      	bne.n	8002466 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002472:	4b44      	ldr	r3, [pc, #272]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x186>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1d3      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e03a      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_OscConfig+0x278>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fd25 	bl	8000f08 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fd21 	bl	8000f08 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1b4      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4925      	ldr	r1, [pc, #148]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_OscConfig+0x278>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fd04 	bl	8000f08 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe fd00 	bl	8000f08 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e193      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d036      	beq.n	800259c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d016      	beq.n	8002564 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_RCC_OscConfig+0x27c>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fce4 	bl	8000f08 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fce0 	bl	8000f08 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e173      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x234>
 8002562:	e01b      	b.n	800259c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_OscConfig+0x27c>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fccd 	bl	8000f08 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	e00e      	b.n	8002590 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002572:	f7fe fcc9 	bl	8000f08 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d907      	bls.n	8002590 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e15c      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
 8002584:	40023800 	.word	0x40023800
 8002588:	42470000 	.word	0x42470000
 800258c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b8a      	ldr	r3, [pc, #552]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ea      	bne.n	8002572 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8097 	beq.w	80026d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b83      	ldr	r3, [pc, #524]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <HAL_RCC_OscConfig+0x4b0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <HAL_RCC_OscConfig+0x4b0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a75      	ldr	r2, [pc, #468]	; (80027c0 <HAL_RCC_OscConfig+0x4b0>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fc89 	bl	8000f08 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe fc85 	bl	8000f08 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e118      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <HAL_RCC_OscConfig+0x4b0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x31e>
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a65      	ldr	r2, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x358>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b05      	cmp	r3, #5
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x340>
 8002636:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a60      	ldr	r2, [pc, #384]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
 8002642:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0x358>
 8002650:	4b5a      	ldr	r3, [pc, #360]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a59      	ldr	r2, [pc, #356]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	4b57      	ldr	r3, [pc, #348]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002662:	f023 0304 	bic.w	r3, r3, #4
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7fe fc4a 	bl	8000f08 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002676:	e00a      	b.n	800268e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7fe fc46 	bl	8000f08 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0d7      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0ee      	beq.n	8002678 <HAL_RCC_OscConfig+0x368>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fc34 	bl	8000f08 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe fc30 	bl	8000f08 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0c1      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ba:	4b40      	ldr	r3, [pc, #256]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ee      	bne.n	80026a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80ad 	beq.w	800283c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d060      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d145      	bne.n	8002782 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x4b4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fc04 	bl	8000f08 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fc00 	bl	8000f08 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e093      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	019b      	lsls	r3, r3, #6
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	3b01      	subs	r3, #1
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	071b      	lsls	r3, r3, #28
 800274e:	491b      	ldr	r1, [pc, #108]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x4b4>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fbd5 	bl	8000f08 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe fbd1 	bl	8000f08 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e064      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x452>
 8002780:	e05c      	b.n	800283c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_OscConfig+0x4b4>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fbbe 	bl	8000f08 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fbba 	bl	8000f08 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e04d      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x480>
 80027ae:	e045      	b.n	800283c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e040      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000
 80027c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c8:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <HAL_RCC_OscConfig+0x538>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d030      	beq.n	8002838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d129      	bne.n	8002838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d122      	bne.n	8002838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	4293      	cmp	r3, r2
 8002802:	d119      	bne.n	8002838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d10f      	bne.n	8002838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07b      	b.n	8002956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d009      	beq.n	8002884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
 8002876:	e005      	b.n	8002884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe f9a6 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0104 	and.w	r1, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	f003 0210 	and.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e03f      	b.n	80029f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fe f9ab 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f828 	bl	80029f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029fc:	b0c0      	sub	sp, #256	; 0x100
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	68d9      	ldr	r1, [r3, #12]
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	ea40 0301 	orr.w	r3, r0, r1
 8002a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a50:	f021 010c 	bic.w	r1, r1, #12
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a72:	6999      	ldr	r1, [r3, #24]
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	ea40 0301 	orr.w	r3, r0, r1
 8002a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b8f      	ldr	r3, [pc, #572]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d005      	beq.n	8002a98 <UART_SetConfig+0xa0>
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <UART_SetConfig+0x2d0>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d104      	bne.n	8002aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7ff f9f6 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8002a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002aa0:	e003      	b.n	8002aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aa2:	f7ff f9dd 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8002aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab4:	f040 810c 	bne.w	8002cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002abc:	2200      	movs	r2, #0
 8002abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	1891      	adds	r1, r2, r2
 8002ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ad2:	415b      	adcs	r3, r3
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ada:	4621      	mov	r1, r4
 8002adc:	eb12 0801 	adds.w	r8, r2, r1
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	eb43 0901 	adc.w	r9, r3, r1
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002afa:	4690      	mov	r8, r2
 8002afc:	4699      	mov	r9, r3
 8002afe:	4623      	mov	r3, r4
 8002b00:	eb18 0303 	adds.w	r3, r8, r3
 8002b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b08:	462b      	mov	r3, r5
 8002b0a:	eb49 0303 	adc.w	r3, r9, r3
 8002b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b26:	460b      	mov	r3, r1
 8002b28:	18db      	adds	r3, r3, r3
 8002b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	eb42 0303 	adc.w	r3, r2, r3
 8002b32:	657b      	str	r3, [r7, #84]	; 0x54
 8002b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b3c:	f7fd fb62 	bl	8000204 <__aeabi_uldivmod>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <UART_SetConfig+0x2d4>)
 8002b46:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	011c      	lsls	r4, r3, #4
 8002b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b60:	4642      	mov	r2, r8
 8002b62:	464b      	mov	r3, r9
 8002b64:	1891      	adds	r1, r2, r2
 8002b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b68:	415b      	adcs	r3, r3
 8002b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b70:	4641      	mov	r1, r8
 8002b72:	eb12 0a01 	adds.w	sl, r2, r1
 8002b76:	4649      	mov	r1, r9
 8002b78:	eb43 0b01 	adc.w	fp, r3, r1
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b90:	4692      	mov	sl, r2
 8002b92:	469b      	mov	fp, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	eb1a 0303 	adds.w	r3, sl, r3
 8002b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	18db      	adds	r3, r3, r3
 8002bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	eb42 0303 	adc.w	r3, r2, r3
 8002bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bd2:	f7fd fb17 	bl	8000204 <__aeabi_uldivmod>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <UART_SetConfig+0x2d4>)
 8002bde:	fba3 2301 	umull	r2, r3, r3, r1
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2264      	movs	r2, #100	; 0x64
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	1acb      	subs	r3, r1, r3
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bf2:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <UART_SetConfig+0x2d4>)
 8002bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c00:	441c      	add	r4, r3
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	1891      	adds	r1, r2, r2
 8002c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c24:	4641      	mov	r1, r8
 8002c26:	1851      	adds	r1, r2, r1
 8002c28:	6339      	str	r1, [r7, #48]	; 0x30
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	414b      	adcs	r3, r1
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	00cb      	lsls	r3, r1, #3
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c46:	4651      	mov	r1, sl
 8002c48:	00ca      	lsls	r2, r1, #3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4642      	mov	r2, r8
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c58:	464b      	mov	r3, r9
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	eb42 0303 	adc.w	r3, r2, r3
 8002c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c78:	460b      	mov	r3, r1
 8002c7a:	18db      	adds	r3, r3, r3
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7e:	4613      	mov	r3, r2
 8002c80:	eb42 0303 	adc.w	r3, r2, r3
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c8e:	f7fd fab9 	bl	8000204 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <UART_SetConfig+0x2d4>)
 8002c98:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	2164      	movs	r1, #100	; 0x64
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	3332      	adds	r3, #50	; 0x32
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <UART_SetConfig+0x2d4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	f003 0207 	and.w	r2, r3, #7
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4422      	add	r2, r4
 8002cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cc0:	e105      	b.n	8002ece <UART_SetConfig+0x4d6>
 8002cc2:	bf00      	nop
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	40011400 	.word	0x40011400
 8002ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ce2:	4642      	mov	r2, r8
 8002ce4:	464b      	mov	r3, r9
 8002ce6:	1891      	adds	r1, r2, r2
 8002ce8:	6239      	str	r1, [r7, #32]
 8002cea:	415b      	adcs	r3, r3
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	1854      	adds	r4, r2, r1
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	eb43 0501 	adc.w	r5, r3, r1
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	00eb      	lsls	r3, r5, #3
 8002d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0a:	00e2      	lsls	r2, r4, #3
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	461d      	mov	r5, r3
 8002d10:	4643      	mov	r3, r8
 8002d12:	18e3      	adds	r3, r4, r3
 8002d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d18:	464b      	mov	r3, r9
 8002d1a:	eb45 0303 	adc.w	r3, r5, r3
 8002d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d3e:	4629      	mov	r1, r5
 8002d40:	008b      	lsls	r3, r1, #2
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d48:	4621      	mov	r1, r4
 8002d4a:	008a      	lsls	r2, r1, #2
 8002d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d50:	f7fd fa58 	bl	8000204 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4b60      	ldr	r3, [pc, #384]	; (8002edc <UART_SetConfig+0x4e4>)
 8002d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	011c      	lsls	r4, r3, #4
 8002d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d74:	4642      	mov	r2, r8
 8002d76:	464b      	mov	r3, r9
 8002d78:	1891      	adds	r1, r2, r2
 8002d7a:	61b9      	str	r1, [r7, #24]
 8002d7c:	415b      	adcs	r3, r3
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d84:	4641      	mov	r1, r8
 8002d86:	1851      	adds	r1, r2, r1
 8002d88:	6139      	str	r1, [r7, #16]
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	414b      	adcs	r3, r1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	00cb      	lsls	r3, r1, #3
 8002da0:	4651      	mov	r1, sl
 8002da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da6:	4651      	mov	r1, sl
 8002da8:	00ca      	lsls	r2, r1, #3
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	4642      	mov	r2, r8
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db8:	464b      	mov	r3, r9
 8002dba:	460a      	mov	r2, r1
 8002dbc:	eb42 0303 	adc.w	r3, r2, r3
 8002dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ddc:	4649      	mov	r1, r9
 8002dde:	008b      	lsls	r3, r1, #2
 8002de0:	4641      	mov	r1, r8
 8002de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de6:	4641      	mov	r1, r8
 8002de8:	008a      	lsls	r2, r1, #2
 8002dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dee:	f7fd fa09 	bl	8000204 <__aeabi_uldivmod>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <UART_SetConfig+0x4e4>)
 8002df8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	2164      	movs	r1, #100	; 0x64
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	3332      	adds	r3, #50	; 0x32
 8002e0a:	4a34      	ldr	r2, [pc, #208]	; (8002edc <UART_SetConfig+0x4e4>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e16:	441c      	add	r4, r3
 8002e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e20:	677a      	str	r2, [r7, #116]	; 0x74
 8002e22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e26:	4642      	mov	r2, r8
 8002e28:	464b      	mov	r3, r9
 8002e2a:	1891      	adds	r1, r2, r2
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	415b      	adcs	r3, r3
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e36:	4641      	mov	r1, r8
 8002e38:	1851      	adds	r1, r2, r1
 8002e3a:	6039      	str	r1, [r7, #0]
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	414b      	adcs	r3, r1
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e4e:	4659      	mov	r1, fp
 8002e50:	00cb      	lsls	r3, r1, #3
 8002e52:	4651      	mov	r1, sl
 8002e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e58:	4651      	mov	r1, sl
 8002e5a:	00ca      	lsls	r2, r1, #3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4603      	mov	r3, r0
 8002e62:	4642      	mov	r2, r8
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e68:	464b      	mov	r3, r9
 8002e6a:	460a      	mov	r2, r1
 8002e6c:	eb42 0303 	adc.w	r3, r2, r3
 8002e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	008b      	lsls	r3, r1, #2
 8002e8e:	4641      	mov	r1, r8
 8002e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e94:	4641      	mov	r1, r8
 8002e96:	008a      	lsls	r2, r1, #2
 8002e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e9c:	f7fd f9b2 	bl	8000204 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <UART_SetConfig+0x4e4>)
 8002ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2164      	movs	r1, #100	; 0x64
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	3332      	adds	r3, #50	; 0x32
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <UART_SetConfig+0x4e4>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4422      	add	r2, r4
 8002ecc:	609a      	str	r2, [r3, #8]
}
 8002ece:	bf00      	nop
 8002ed0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop
 8002edc:	51eb851f 	.word	0x51eb851f

08002ee0 <arm_max_f32>:
 8002ee0:	f101 3cff 	add.w	ip, r1, #4294967295
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	4607      	mov	r7, r0
 8002ee8:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8002eec:	ecf7 7a01 	vldmia	r7!, {s15}
 8002ef0:	d063      	beq.n	8002fba <arm_max_f32+0xda>
 8002ef2:	f10e 0601 	add.w	r6, lr, #1
 8002ef6:	3014      	adds	r0, #20
 8002ef8:	00b6      	lsls	r6, r6, #2
 8002efa:	2404      	movs	r4, #4
 8002efc:	2500      	movs	r5, #0
 8002efe:	ed10 7a04 	vldr	s14, [r0, #-16]
 8002f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0a:	bf48      	it	mi
 8002f0c:	eef0 7a47 	vmovmi.f32	s15, s14
 8002f10:	ed10 7a03 	vldr	s14, [r0, #-12]
 8002f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f18:	bf48      	it	mi
 8002f1a:	1ee5      	submi	r5, r4, #3
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	bf48      	it	mi
 8002f22:	eef0 7a47 	vmovmi.f32	s15, s14
 8002f26:	ed10 7a02 	vldr	s14, [r0, #-8]
 8002f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2e:	bf48      	it	mi
 8002f30:	1ea5      	submi	r5, r4, #2
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	bf48      	it	mi
 8002f38:	eef0 7a47 	vmovmi.f32	s15, s14
 8002f3c:	ed10 7a01 	vldr	s14, [r0, #-4]
 8002f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f44:	bf48      	it	mi
 8002f46:	f104 35ff 	addmi.w	r5, r4, #4294967295
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	bf48      	it	mi
 8002f50:	4625      	movmi	r5, r4
 8002f52:	f104 0404 	add.w	r4, r4, #4
 8002f56:	bf48      	it	mi
 8002f58:	eef0 7a47 	vmovmi.f32	s15, s14
 8002f5c:	42b4      	cmp	r4, r6
 8002f5e:	f100 0010 	add.w	r0, r0, #16
 8002f62:	d1cc      	bne.n	8002efe <arm_max_f32+0x1e>
 8002f64:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8002f68:	f01c 0003 	ands.w	r0, ip, #3
 8002f6c:	d021      	beq.n	8002fb2 <arm_max_f32+0xd2>
 8002f6e:	ed97 7a00 	vldr	s14, [r7]
 8002f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	bfc4      	itt	gt
 8002f7c:	eef0 7a47 	vmovgt.f32	s15, s14
 8002f80:	1a0d      	subgt	r5, r1, r0
 8002f82:	3801      	subs	r0, #1
 8002f84:	d015      	beq.n	8002fb2 <arm_max_f32+0xd2>
 8002f86:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	bf44      	itt	mi
 8002f94:	eef0 7a47 	vmovmi.f32	s15, s14
 8002f98:	1a0d      	submi	r5, r1, r0
 8002f9a:	2801      	cmp	r0, #1
 8002f9c:	d009      	beq.n	8002fb2 <arm_max_f32+0xd2>
 8002f9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	bf44      	itt	mi
 8002fac:	eef0 7a47 	vmovmi.f32	s15, s14
 8002fb0:	4665      	movmi	r5, ip
 8002fb2:	edc2 7a00 	vstr	s15, [r2]
 8002fb6:	601d      	str	r5, [r3, #0]
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fba:	4675      	mov	r5, lr
 8002fbc:	e7d4      	b.n	8002f68 <arm_max_f32+0x88>
 8002fbe:	bf00      	nop

08002fc0 <arm_cfft_init_f32>:
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	b410      	push	{r4}
 8002fcc:	8019      	strh	r1, [r3, #0]
 8002fce:	6058      	str	r0, [r3, #4]
 8002fd0:	d033      	beq.n	800303a <arm_cfft_init_f32+0x7a>
 8002fd2:	d918      	bls.n	8003006 <arm_cfft_init_f32+0x46>
 8002fd4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002fd8:	d027      	beq.n	800302a <arm_cfft_init_f32+0x6a>
 8002fda:	d90c      	bls.n	8002ff6 <arm_cfft_init_f32+0x36>
 8002fdc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002fe0:	d11e      	bne.n	8003020 <arm_cfft_init_f32+0x60>
 8002fe2:	4a17      	ldr	r2, [pc, #92]	; (8003040 <arm_cfft_init_f32+0x80>)
 8002fe4:	8994      	ldrh	r4, [r2, #12]
 8002fe6:	819c      	strh	r4, [r3, #12]
 8002fe8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8002fec:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8002ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002ffa:	d018      	beq.n	800302e <arm_cfft_init_f32+0x6e>
 8002ffc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003000:	d10e      	bne.n	8003020 <arm_cfft_init_f32+0x60>
 8003002:	4a10      	ldr	r2, [pc, #64]	; (8003044 <arm_cfft_init_f32+0x84>)
 8003004:	e7ee      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 8003006:	2940      	cmp	r1, #64	; 0x40
 8003008:	d013      	beq.n	8003032 <arm_cfft_init_f32+0x72>
 800300a:	d903      	bls.n	8003014 <arm_cfft_init_f32+0x54>
 800300c:	2980      	cmp	r1, #128	; 0x80
 800300e:	d107      	bne.n	8003020 <arm_cfft_init_f32+0x60>
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <arm_cfft_init_f32+0x88>)
 8003012:	e7e7      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 8003014:	2910      	cmp	r1, #16
 8003016:	d00e      	beq.n	8003036 <arm_cfft_init_f32+0x76>
 8003018:	2920      	cmp	r1, #32
 800301a:	d101      	bne.n	8003020 <arm_cfft_init_f32+0x60>
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <arm_cfft_init_f32+0x8c>)
 800301e:	e7e1      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <arm_cfft_init_f32+0x90>)
 800302c:	e7da      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <arm_cfft_init_f32+0x94>)
 8003030:	e7d8      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <arm_cfft_init_f32+0x98>)
 8003034:	e7d6      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <arm_cfft_init_f32+0x9c>)
 8003038:	e7d4      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 800303a:	4a09      	ldr	r2, [pc, #36]	; (8003060 <arm_cfft_init_f32+0xa0>)
 800303c:	e7d2      	b.n	8002fe4 <arm_cfft_init_f32+0x24>
 800303e:	bf00      	nop
 8003040:	08004104 	.word	0x08004104
 8003044:	080040a4 	.word	0x080040a4
 8003048:	080040b4 	.word	0x080040b4
 800304c:	080040f4 	.word	0x080040f4
 8003050:	080040d4 	.word	0x080040d4
 8003054:	08004114 	.word	0x08004114
 8003058:	08004124 	.word	0x08004124
 800305c:	080040c4 	.word	0x080040c4
 8003060:	080040e4 	.word	0x080040e4

08003064 <arm_cfft_radix8by2_f32>:
 8003064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003068:	ed2d 8b08 	vpush	{d8-d11}
 800306c:	f8b0 c000 	ldrh.w	ip, [r0]
 8003070:	6842      	ldr	r2, [r0, #4]
 8003072:	4607      	mov	r7, r0
 8003074:	4608      	mov	r0, r1
 8003076:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800307a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800307e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003082:	b082      	sub	sp, #8
 8003084:	f000 80b0 	beq.w	80031e8 <arm_cfft_radix8by2_f32+0x184>
 8003088:	008c      	lsls	r4, r1, #2
 800308a:	3410      	adds	r4, #16
 800308c:	f100 0310 	add.w	r3, r0, #16
 8003090:	1906      	adds	r6, r0, r4
 8003092:	3210      	adds	r2, #16
 8003094:	4444      	add	r4, r8
 8003096:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800309a:	f108 0510 	add.w	r5, r8, #16
 800309e:	ed15 2a04 	vldr	s4, [r5, #-16]
 80030a2:	ed55 2a03 	vldr	s5, [r5, #-12]
 80030a6:	ed54 4a04 	vldr	s9, [r4, #-16]
 80030aa:	ed14 4a03 	vldr	s8, [r4, #-12]
 80030ae:	ed14 6a02 	vldr	s12, [r4, #-8]
 80030b2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80030b6:	ed53 3a04 	vldr	s7, [r3, #-16]
 80030ba:	ed15 0a02 	vldr	s0, [r5, #-8]
 80030be:	ed55 0a01 	vldr	s1, [r5, #-4]
 80030c2:	ed56 6a04 	vldr	s13, [r6, #-16]
 80030c6:	ed16 3a03 	vldr	s6, [r6, #-12]
 80030ca:	ed13 7a03 	vldr	s14, [r3, #-12]
 80030ce:	ed13 5a02 	vldr	s10, [r3, #-8]
 80030d2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80030d6:	ed16 1a02 	vldr	s2, [r6, #-8]
 80030da:	ed56 1a01 	vldr	s3, [r6, #-4]
 80030de:	ee73 ba82 	vadd.f32	s23, s7, s4
 80030e2:	ee37 ba22 	vadd.f32	s22, s14, s5
 80030e6:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80030ea:	ee33 9a04 	vadd.f32	s18, s6, s8
 80030ee:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80030f2:	ee75 aa00 	vadd.f32	s21, s10, s0
 80030f6:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80030fa:	ee71 8a06 	vadd.f32	s17, s2, s12
 80030fe:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003102:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003106:	ed43 aa02 	vstr	s21, [r3, #-8]
 800310a:	ed03 aa01 	vstr	s20, [r3, #-4]
 800310e:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003112:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003116:	ed06 9a03 	vstr	s18, [r6, #-12]
 800311a:	ed46 8a02 	vstr	s17, [r6, #-8]
 800311e:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003122:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003126:	ee34 4a43 	vsub.f32	s8, s8, s6
 800312a:	ed52 6a03 	vldr	s13, [r2, #-12]
 800312e:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003132:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003136:	ee27 8a26 	vmul.f32	s16, s14, s13
 800313a:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800313e:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003142:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003146:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800314a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800314e:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003152:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003156:	ee37 7a63 	vsub.f32	s14, s14, s7
 800315a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800315e:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003162:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003166:	ed05 7a03 	vstr	s14, [r5, #-12]
 800316a:	ed05 3a04 	vstr	s6, [r5, #-16]
 800316e:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003172:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003176:	ed12 7a01 	vldr	s14, [r2, #-4]
 800317a:	ee76 6a41 	vsub.f32	s13, s12, s2
 800317e:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003182:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003186:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800318a:	ed52 5a02 	vldr	s11, [r2, #-8]
 800318e:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003192:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003196:	ee25 4a25 	vmul.f32	s8, s10, s11
 800319a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800319e:	ee25 5a07 	vmul.f32	s10, s10, s14
 80031a2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80031a6:	ee26 7a07 	vmul.f32	s14, s12, s14
 80031aa:	ee26 6a25 	vmul.f32	s12, s12, s11
 80031ae:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80031b2:	ee74 5a23 	vadd.f32	s11, s8, s7
 80031b6:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80031ba:	ee37 7a26 	vadd.f32	s14, s14, s13
 80031be:	3310      	adds	r3, #16
 80031c0:	4563      	cmp	r3, ip
 80031c2:	ed45 5a02 	vstr	s11, [r5, #-8]
 80031c6:	f106 0610 	add.w	r6, r6, #16
 80031ca:	ed45 7a01 	vstr	s15, [r5, #-4]
 80031ce:	f102 0210 	add.w	r2, r2, #16
 80031d2:	ed04 6a02 	vstr	s12, [r4, #-8]
 80031d6:	ed04 7a01 	vstr	s14, [r4, #-4]
 80031da:	f105 0510 	add.w	r5, r5, #16
 80031de:	f104 0410 	add.w	r4, r4, #16
 80031e2:	f47f af5c 	bne.w	800309e <arm_cfft_radix8by2_f32+0x3a>
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	b289      	uxth	r1, r1
 80031ea:	2302      	movs	r3, #2
 80031ec:	9101      	str	r1, [sp, #4]
 80031ee:	f000 fc1d 	bl	8003a2c <arm_radix8_butterfly_f32>
 80031f2:	9901      	ldr	r1, [sp, #4]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4640      	mov	r0, r8
 80031f8:	2302      	movs	r3, #2
 80031fa:	b002      	add	sp, #8
 80031fc:	ecbd 8b08 	vpop	{d8-d11}
 8003200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003204:	f000 bc12 	b.w	8003a2c <arm_radix8_butterfly_f32>

08003208 <arm_cfft_radix8by4_f32>:
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	ed2d 8b0a 	vpush	{d8-d12}
 8003210:	8803      	ldrh	r3, [r0, #0]
 8003212:	6842      	ldr	r2, [r0, #4]
 8003214:	b08d      	sub	sp, #52	; 0x34
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	900a      	str	r0, [sp, #40]	; 0x28
 800321a:	4608      	mov	r0, r1
 800321c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003220:	edd1 5a00 	vldr	s11, [r1]
 8003224:	edd0 7a00 	vldr	s15, [r0]
 8003228:	edd1 3a01 	vldr	s7, [r1, #4]
 800322c:	ed90 5a01 	vldr	s10, [r0, #4]
 8003230:	9108      	str	r1, [sp, #32]
 8003232:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8003236:	ed96 7a00 	vldr	s14, [r6]
 800323a:	ed96 4a01 	vldr	s8, [r6, #4]
 800323e:	9607      	str	r6, [sp, #28]
 8003240:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003244:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8003248:	edd8 4a00 	vldr	s9, [r8]
 800324c:	ed98 3a01 	vldr	s6, [r8, #4]
 8003250:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003254:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003258:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800325c:	4604      	mov	r4, r0
 800325e:	edc0 6a00 	vstr	s13, [r0]
 8003262:	edd6 5a01 	vldr	s11, [r6, #4]
 8003266:	edd8 2a01 	vldr	s5, [r8, #4]
 800326a:	ee75 6a23 	vadd.f32	s13, s10, s7
 800326e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003272:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003276:	ee74 3a27 	vadd.f32	s7, s8, s15
 800327a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800327e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003282:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003286:	3408      	adds	r4, #8
 8003288:	ee35 4a47 	vsub.f32	s8, s10, s14
 800328c:	460d      	mov	r5, r1
 800328e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003292:	4637      	mov	r7, r6
 8003294:	9402      	str	r4, [sp, #8]
 8003296:	3708      	adds	r7, #8
 8003298:	460c      	mov	r4, r1
 800329a:	3508      	adds	r5, #8
 800329c:	0859      	lsrs	r1, r3, #1
 800329e:	9109      	str	r1, [sp, #36]	; 0x24
 80032a0:	9706      	str	r7, [sp, #24]
 80032a2:	9505      	str	r5, [sp, #20]
 80032a4:	f102 0708 	add.w	r7, r2, #8
 80032a8:	ee36 6a64 	vsub.f32	s12, s12, s9
 80032ac:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80032b0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80032b4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80032b8:	ee77 7a83 	vadd.f32	s15, s15, s6
 80032bc:	ee34 5a24 	vadd.f32	s10, s8, s9
 80032c0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80032c4:	3902      	subs	r1, #2
 80032c6:	4645      	mov	r5, r8
 80032c8:	9701      	str	r7, [sp, #4]
 80032ca:	f102 0c18 	add.w	ip, r2, #24
 80032ce:	f102 0710 	add.w	r7, r2, #16
 80032d2:	3508      	adds	r5, #8
 80032d4:	0849      	lsrs	r1, r1, #1
 80032d6:	edc0 5a01 	vstr	s11, [r0, #4]
 80032da:	9703      	str	r7, [sp, #12]
 80032dc:	edc6 3a00 	vstr	s7, [r6]
 80032e0:	ed86 5a01 	vstr	s10, [r6, #4]
 80032e4:	f8cd c000 	str.w	ip, [sp]
 80032e8:	ed84 6a00 	vstr	s12, [r4]
 80032ec:	edc4 6a01 	vstr	s13, [r4, #4]
 80032f0:	9504      	str	r5, [sp, #16]
 80032f2:	edc8 7a00 	vstr	s15, [r8]
 80032f6:	ed88 7a01 	vstr	s14, [r8, #4]
 80032fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80032fc:	f000 8138 	beq.w	8003570 <arm_cfft_radix8by4_f32+0x368>
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	3b0c      	subs	r3, #12
 8003304:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003308:	f106 0510 	add.w	r5, r6, #16
 800330c:	4626      	mov	r6, r4
 800330e:	46bb      	mov	fp, r7
 8003310:	f102 0a20 	add.w	sl, r2, #32
 8003314:	f102 0930 	add.w	r9, r2, #48	; 0x30
 8003318:	f106 0710 	add.w	r7, r6, #16
 800331c:	4443      	add	r3, r8
 800331e:	f100 0e10 	add.w	lr, r0, #16
 8003322:	3c0c      	subs	r4, #12
 8003324:	f1a8 060c 	sub.w	r6, r8, #12
 8003328:	f108 0210 	add.w	r2, r8, #16
 800332c:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003330:	ed57 5a02 	vldr	s11, [r7, #-8]
 8003334:	ed55 7a02 	vldr	s15, [r5, #-8]
 8003338:	ed52 1a02 	vldr	s3, [r2, #-8]
 800333c:	ed57 6a01 	vldr	s13, [r7, #-4]
 8003340:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003344:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003348:	ed15 8a01 	vldr	s16, [r5, #-4]
 800334c:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003350:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003354:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003358:	ee30 0a66 	vsub.f32	s0, s0, s13
 800335c:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003360:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003364:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003368:	ed15 7a01 	vldr	s14, [r5, #-4]
 800336c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003370:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003374:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003378:	ee37 7a26 	vadd.f32	s14, s14, s13
 800337c:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003380:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003384:	ed96 7a02 	vldr	s14, [r6, #8]
 8003388:	ed9c 2a02 	vldr	s4, [ip, #8]
 800338c:	ed94 ba02 	vldr	s22, [r4, #8]
 8003390:	edd3 9a02 	vldr	s19, [r3, #8]
 8003394:	edd6 2a01 	vldr	s5, [r6, #4]
 8003398:	ed9c 9a01 	vldr	s18, [ip, #4]
 800339c:	ed93 5a01 	vldr	s10, [r3, #4]
 80033a0:	edd4 0a01 	vldr	s1, [r4, #4]
 80033a4:	ee72 6a07 	vadd.f32	s13, s4, s14
 80033a8:	ee32 2a47 	vsub.f32	s4, s4, s14
 80033ac:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80033b0:	ee79 4a22 	vadd.f32	s9, s18, s5
 80033b4:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80033b8:	ee79 2a62 	vsub.f32	s5, s18, s5
 80033bc:	ed8c 7a02 	vstr	s14, [ip, #8]
 80033c0:	ed94 7a01 	vldr	s14, [r4, #4]
 80033c4:	edd3 8a01 	vldr	s17, [r3, #4]
 80033c8:	ee34 7a87 	vadd.f32	s14, s9, s14
 80033cc:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80033d0:	ee37 7a28 	vadd.f32	s14, s14, s17
 80033d4:	ee32 9a60 	vsub.f32	s18, s4, s1
 80033d8:	ed8c 7a01 	vstr	s14, [ip, #4]
 80033dc:	ed1b 7a01 	vldr	s14, [fp, #-4]
 80033e0:	ed1b aa02 	vldr	s20, [fp, #-8]
 80033e4:	ee73 8a22 	vadd.f32	s17, s6, s5
 80033e8:	ee39 9a05 	vadd.f32	s18, s18, s10
 80033ec:	ee7a aac1 	vsub.f32	s21, s21, s2
 80033f0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80033f4:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80033f8:	ee69 ba07 	vmul.f32	s23, s18, s14
 80033fc:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003400:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003404:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003408:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800340c:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003410:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003414:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003418:	ee78 8a89 	vadd.f32	s17, s17, s18
 800341c:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003420:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003424:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003428:	ee76 6acb 	vsub.f32	s13, s13, s22
 800342c:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003430:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003434:	ed05 7a02 	vstr	s14, [r5, #-8]
 8003438:	ed45 3a01 	vstr	s7, [r5, #-4]
 800343c:	edc4 8a01 	vstr	s17, [r4, #4]
 8003440:	ed84 aa02 	vstr	s20, [r4, #8]
 8003444:	ed5a 3a04 	vldr	s7, [sl, #-16]
 8003448:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800344c:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003450:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8003454:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003458:	ee36 6a41 	vsub.f32	s12, s12, s2
 800345c:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003460:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003464:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003468:	ee26 6a23 	vmul.f32	s12, s12, s7
 800346c:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003470:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003474:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003478:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800347c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003480:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003484:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003488:	ee79 3a29 	vadd.f32	s7, s18, s19
 800348c:	ee75 6a60 	vsub.f32	s13, s10, s1
 8003490:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8003494:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003498:	ed47 3a02 	vstr	s7, [r7, #-8]
 800349c:	ed07 6a01 	vstr	s12, [r7, #-4]
 80034a0:	ed86 7a01 	vstr	s14, [r6, #4]
 80034a4:	ed86 4a02 	vstr	s8, [r6, #8]
 80034a8:	ee35 6a81 	vadd.f32	s12, s11, s2
 80034ac:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80034b0:	ed59 5a06 	vldr	s11, [r9, #-24]	; 0xffffffe8
 80034b4:	ed59 6a05 	vldr	s13, [r9, #-20]	; 0xffffffec
 80034b8:	ee33 3a62 	vsub.f32	s6, s6, s5
 80034bc:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80034c0:	ee67 2a26 	vmul.f32	s5, s14, s13
 80034c4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80034c8:	ee26 5a25 	vmul.f32	s10, s12, s11
 80034cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80034d0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80034d4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80034d8:	ee63 6a26 	vmul.f32	s13, s6, s13
 80034dc:	ee23 3a25 	vmul.f32	s6, s6, s11
 80034e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80034e4:	ee75 5a24 	vadd.f32	s11, s10, s9
 80034e8:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80034ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80034f0:	3901      	subs	r1, #1
 80034f2:	ed42 5a02 	vstr	s11, [r2, #-8]
 80034f6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80034fa:	f10e 0e08 	add.w	lr, lr, #8
 80034fe:	ed83 3a02 	vstr	s6, [r3, #8]
 8003502:	ed83 7a01 	vstr	s14, [r3, #4]
 8003506:	f1ac 0c08 	sub.w	ip, ip, #8
 800350a:	f10b 0b08 	add.w	fp, fp, #8
 800350e:	f105 0508 	add.w	r5, r5, #8
 8003512:	f1a4 0408 	sub.w	r4, r4, #8
 8003516:	f10a 0a10 	add.w	sl, sl, #16
 800351a:	f107 0708 	add.w	r7, r7, #8
 800351e:	f1a6 0608 	sub.w	r6, r6, #8
 8003522:	f109 0918 	add.w	r9, r9, #24
 8003526:	f102 0208 	add.w	r2, r2, #8
 800352a:	f1a3 0308 	sub.w	r3, r3, #8
 800352e:	f47f aefd 	bne.w	800332c <arm_cfft_radix8by4_f32+0x124>
 8003532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003534:	9902      	ldr	r1, [sp, #8]
 8003536:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800353a:	9102      	str	r1, [sp, #8]
 800353c:	9901      	ldr	r1, [sp, #4]
 800353e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003542:	9101      	str	r1, [sp, #4]
 8003544:	9906      	ldr	r1, [sp, #24]
 8003546:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800354a:	9106      	str	r1, [sp, #24]
 800354c:	9903      	ldr	r1, [sp, #12]
 800354e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003552:	9103      	str	r1, [sp, #12]
 8003554:	9905      	ldr	r1, [sp, #20]
 8003556:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800355a:	9105      	str	r1, [sp, #20]
 800355c:	9904      	ldr	r1, [sp, #16]
 800355e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003562:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003566:	9204      	str	r2, [sp, #16]
 8003568:	9a00      	ldr	r2, [sp, #0]
 800356a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	9902      	ldr	r1, [sp, #8]
 8003572:	9d05      	ldr	r5, [sp, #20]
 8003574:	ed91 4a00 	vldr	s8, [r1]
 8003578:	edd5 6a00 	vldr	s13, [r5]
 800357c:	9b06      	ldr	r3, [sp, #24]
 800357e:	9c04      	ldr	r4, [sp, #16]
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ed94 3a00 	vldr	s6, [r4]
 8003588:	edd5 4a01 	vldr	s9, [r5, #4]
 800358c:	edd1 3a01 	vldr	s7, [r1, #4]
 8003590:	ed94 2a01 	vldr	s4, [r4, #4]
 8003594:	ed93 7a01 	vldr	s14, [r3, #4]
 8003598:	9a01      	ldr	r2, [sp, #4]
 800359a:	ee34 6a26 	vadd.f32	s12, s8, s13
 800359e:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80035a2:	ee37 5a86 	vadd.f32	s10, s15, s12
 80035a6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80035aa:	ee35 5a03 	vadd.f32	s10, s10, s6
 80035ae:	ee74 6a66 	vsub.f32	s13, s8, s13
 80035b2:	ed81 5a00 	vstr	s10, [r1]
 80035b6:	ed93 5a01 	vldr	s10, [r3, #4]
 80035ba:	edd4 4a01 	vldr	s9, [r4, #4]
 80035be:	ee35 5a85 	vadd.f32	s10, s11, s10
 80035c2:	ee37 4a26 	vadd.f32	s8, s14, s13
 80035c6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80035ca:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80035ce:	ed81 5a01 	vstr	s10, [r1, #4]
 80035d2:	edd2 1a00 	vldr	s3, [r2]
 80035d6:	edd2 2a01 	vldr	s5, [r2, #4]
 80035da:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80035de:	ee34 5a83 	vadd.f32	s10, s9, s6
 80035e2:	ee34 4a42 	vsub.f32	s8, s8, s4
 80035e6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80035ea:	ee64 4a21 	vmul.f32	s9, s8, s3
 80035ee:	ee24 4a22 	vmul.f32	s8, s8, s5
 80035f2:	ee65 2a22 	vmul.f32	s5, s10, s5
 80035f6:	ee25 5a21 	vmul.f32	s10, s10, s3
 80035fa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80035fe:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003602:	edc3 2a00 	vstr	s5, [r3]
 8003606:	ed83 5a01 	vstr	s10, [r3, #4]
 800360a:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003614:	ed93 4a01 	vldr	s8, [r3, #4]
 8003618:	ed93 5a00 	vldr	s10, [r3]
 800361c:	9b00      	ldr	r3, [sp, #0]
 800361e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003622:	ee66 4a05 	vmul.f32	s9, s12, s10
 8003626:	ee25 5a85 	vmul.f32	s10, s11, s10
 800362a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800362e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003632:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003636:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800363a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800363e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003642:	ed85 6a01 	vstr	s12, [r5, #4]
 8003646:	edc5 5a00 	vstr	s11, [r5]
 800364a:	edd3 5a01 	vldr	s11, [r3, #4]
 800364e:	edd3 6a00 	vldr	s13, [r3]
 8003652:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003656:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800365a:	ee27 6a26 	vmul.f32	s12, s14, s13
 800365e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003662:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003666:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800366a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800366e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003672:	ed84 7a01 	vstr	s14, [r4, #4]
 8003676:	edc4 7a00 	vstr	s15, [r4]
 800367a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800367c:	9100      	str	r1, [sp, #0]
 800367e:	6862      	ldr	r2, [r4, #4]
 8003680:	2304      	movs	r3, #4
 8003682:	f000 f9d3 	bl	8003a2c <arm_radix8_butterfly_f32>
 8003686:	9807      	ldr	r0, [sp, #28]
 8003688:	9900      	ldr	r1, [sp, #0]
 800368a:	6862      	ldr	r2, [r4, #4]
 800368c:	2304      	movs	r3, #4
 800368e:	f000 f9cd 	bl	8003a2c <arm_radix8_butterfly_f32>
 8003692:	9808      	ldr	r0, [sp, #32]
 8003694:	9900      	ldr	r1, [sp, #0]
 8003696:	6862      	ldr	r2, [r4, #4]
 8003698:	2304      	movs	r3, #4
 800369a:	f000 f9c7 	bl	8003a2c <arm_radix8_butterfly_f32>
 800369e:	9900      	ldr	r1, [sp, #0]
 80036a0:	6862      	ldr	r2, [r4, #4]
 80036a2:	4640      	mov	r0, r8
 80036a4:	2304      	movs	r3, #4
 80036a6:	b00d      	add	sp, #52	; 0x34
 80036a8:	ecbd 8b0a 	vpop	{d8-d12}
 80036ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	f000 b9bc 	b.w	8003a2c <arm_radix8_butterfly_f32>

080036b4 <arm_cfft_f32>:
 80036b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036b8:	2a01      	cmp	r2, #1
 80036ba:	8805      	ldrh	r5, [r0, #0]
 80036bc:	4607      	mov	r7, r0
 80036be:	4690      	mov	r8, r2
 80036c0:	460c      	mov	r4, r1
 80036c2:	4699      	mov	r9, r3
 80036c4:	d05c      	beq.n	8003780 <arm_cfft_f32+0xcc>
 80036c6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80036ca:	d054      	beq.n	8003776 <arm_cfft_f32+0xc2>
 80036cc:	d810      	bhi.n	80036f0 <arm_cfft_f32+0x3c>
 80036ce:	2d40      	cmp	r5, #64	; 0x40
 80036d0:	d015      	beq.n	80036fe <arm_cfft_f32+0x4a>
 80036d2:	d94c      	bls.n	800376e <arm_cfft_f32+0xba>
 80036d4:	2d80      	cmp	r5, #128	; 0x80
 80036d6:	d103      	bne.n	80036e0 <arm_cfft_f32+0x2c>
 80036d8:	4621      	mov	r1, r4
 80036da:	4638      	mov	r0, r7
 80036dc:	f7ff fcc2 	bl	8003064 <arm_cfft_radix8by2_f32>
 80036e0:	f1b9 0f00 	cmp.w	r9, #0
 80036e4:	d114      	bne.n	8003710 <arm_cfft_f32+0x5c>
 80036e6:	f1b8 0f01 	cmp.w	r8, #1
 80036ea:	d019      	beq.n	8003720 <arm_cfft_f32+0x6c>
 80036ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80036f4:	d03f      	beq.n	8003776 <arm_cfft_f32+0xc2>
 80036f6:	d933      	bls.n	8003760 <arm_cfft_f32+0xac>
 80036f8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80036fc:	d1f0      	bne.n	80036e0 <arm_cfft_f32+0x2c>
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	2301      	movs	r3, #1
 8003702:	4629      	mov	r1, r5
 8003704:	4620      	mov	r0, r4
 8003706:	f000 f991 	bl	8003a2c <arm_radix8_butterfly_f32>
 800370a:	f1b9 0f00 	cmp.w	r9, #0
 800370e:	d0ea      	beq.n	80036e6 <arm_cfft_f32+0x32>
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	89b9      	ldrh	r1, [r7, #12]
 8003714:	4620      	mov	r0, r4
 8003716:	f000 f845 	bl	80037a4 <arm_bitreversal_32>
 800371a:	f1b8 0f01 	cmp.w	r8, #1
 800371e:	d1e5      	bne.n	80036ec <arm_cfft_f32+0x38>
 8003720:	ee07 5a90 	vmov	s15, r5
 8003724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800372c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003730:	2d00      	cmp	r5, #0
 8003732:	d0db      	beq.n	80036ec <arm_cfft_f32+0x38>
 8003734:	f104 0108 	add.w	r1, r4, #8
 8003738:	2300      	movs	r3, #0
 800373a:	3301      	adds	r3, #1
 800373c:	429d      	cmp	r5, r3
 800373e:	f101 0108 	add.w	r1, r1, #8
 8003742:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003746:	ed51 7a03 	vldr	s15, [r1, #-12]
 800374a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800374e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003752:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003756:	ed41 7a03 	vstr	s15, [r1, #-12]
 800375a:	d1ee      	bne.n	800373a <arm_cfft_f32+0x86>
 800375c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003760:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003764:	d0cb      	beq.n	80036fe <arm_cfft_f32+0x4a>
 8003766:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800376a:	d0b5      	beq.n	80036d8 <arm_cfft_f32+0x24>
 800376c:	e7b8      	b.n	80036e0 <arm_cfft_f32+0x2c>
 800376e:	2d10      	cmp	r5, #16
 8003770:	d0b2      	beq.n	80036d8 <arm_cfft_f32+0x24>
 8003772:	2d20      	cmp	r5, #32
 8003774:	d1b4      	bne.n	80036e0 <arm_cfft_f32+0x2c>
 8003776:	4621      	mov	r1, r4
 8003778:	4638      	mov	r0, r7
 800377a:	f7ff fd45 	bl	8003208 <arm_cfft_radix8by4_f32>
 800377e:	e7af      	b.n	80036e0 <arm_cfft_f32+0x2c>
 8003780:	b16d      	cbz	r5, 800379e <arm_cfft_f32+0xea>
 8003782:	310c      	adds	r1, #12
 8003784:	2600      	movs	r6, #0
 8003786:	ed51 7a02 	vldr	s15, [r1, #-8]
 800378a:	3601      	adds	r6, #1
 800378c:	eef1 7a67 	vneg.f32	s15, s15
 8003790:	42b5      	cmp	r5, r6
 8003792:	ed41 7a02 	vstr	s15, [r1, #-8]
 8003796:	f101 0108 	add.w	r1, r1, #8
 800379a:	d1f4      	bne.n	8003786 <arm_cfft_f32+0xd2>
 800379c:	e793      	b.n	80036c6 <arm_cfft_f32+0x12>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0a4      	beq.n	80036ec <arm_cfft_f32+0x38>
 80037a2:	e7b5      	b.n	8003710 <arm_cfft_f32+0x5c>

080037a4 <arm_bitreversal_32>:
 80037a4:	b1e9      	cbz	r1, 80037e2 <arm_bitreversal_32+0x3e>
 80037a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a8:	2500      	movs	r5, #0
 80037aa:	f102 0e02 	add.w	lr, r2, #2
 80037ae:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80037b2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80037b6:	08a4      	lsrs	r4, r4, #2
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80037be:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80037c2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80037c6:	00a6      	lsls	r6, r4, #2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80037ce:	3304      	adds	r3, #4
 80037d0:	1d34      	adds	r4, r6, #4
 80037d2:	3502      	adds	r5, #2
 80037d4:	58c6      	ldr	r6, [r0, r3]
 80037d6:	5907      	ldr	r7, [r0, r4]
 80037d8:	50c7      	str	r7, [r0, r3]
 80037da:	428d      	cmp	r5, r1
 80037dc:	5106      	str	r6, [r0, r4]
 80037de:	d3e6      	bcc.n	80037ae <arm_bitreversal_32+0xa>
 80037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e2:	4770      	bx	lr

080037e4 <arm_cmplx_mag_f32>:
 80037e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e8:	ed2d 8b02 	vpush	{d8}
 80037ec:	0897      	lsrs	r7, r2, #2
 80037ee:	b084      	sub	sp, #16
 80037f0:	d077      	beq.n	80038e2 <arm_cmplx_mag_f32+0xfe>
 80037f2:	f04f 0800 	mov.w	r8, #0
 80037f6:	f100 0420 	add.w	r4, r0, #32
 80037fa:	f101 0510 	add.w	r5, r1, #16
 80037fe:	463e      	mov	r6, r7
 8003800:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8003804:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8003808:	ee20 0a00 	vmul.f32	s0, s0, s0
 800380c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003810:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003814:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	f2c0 80c5 	blt.w	80039aa <arm_cmplx_mag_f32+0x1c6>
 8003820:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800382c:	f100 80cb 	bmi.w	80039c6 <arm_cmplx_mag_f32+0x1e2>
 8003830:	ed05 8a04 	vstr	s16, [r5, #-16]
 8003834:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8003838:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800383c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003840:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003844:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003848:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	f2c0 80a8 	blt.w	80039a4 <arm_cmplx_mag_f32+0x1c0>
 8003854:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003860:	f100 80a8 	bmi.w	80039b4 <arm_cmplx_mag_f32+0x1d0>
 8003864:	ed05 8a03 	vstr	s16, [r5, #-12]
 8003868:	ed14 0a04 	vldr	s0, [r4, #-16]
 800386c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8003870:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003874:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003878:	ee30 0a27 	vadd.f32	s0, s0, s15
 800387c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	f2c0 808b 	blt.w	800399e <arm_cmplx_mag_f32+0x1ba>
 8003888:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003894:	f100 80a9 	bmi.w	80039ea <arm_cmplx_mag_f32+0x206>
 8003898:	ed05 8a02 	vstr	s16, [r5, #-8]
 800389c:	ed14 0a02 	vldr	s0, [r4, #-8]
 80038a0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80038a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80038a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80038b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80038b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b8:	db6e      	blt.n	8003998 <arm_cmplx_mag_f32+0x1b4>
 80038ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80038c6:	f100 8087 	bmi.w	80039d8 <arm_cmplx_mag_f32+0x1f4>
 80038ca:	ed05 8a01 	vstr	s16, [r5, #-4]
 80038ce:	3e01      	subs	r6, #1
 80038d0:	f104 0420 	add.w	r4, r4, #32
 80038d4:	f105 0510 	add.w	r5, r5, #16
 80038d8:	d192      	bne.n	8003800 <arm_cmplx_mag_f32+0x1c>
 80038da:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80038de:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80038e2:	f012 0203 	ands.w	r2, r2, #3
 80038e6:	d052      	beq.n	800398e <arm_cmplx_mag_f32+0x1aa>
 80038e8:	ed90 0a00 	vldr	s0, [r0]
 80038ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80038f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80038f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038f8:	2300      	movs	r3, #0
 80038fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 80038fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	bfb8      	it	lt
 8003908:	600b      	strlt	r3, [r1, #0]
 800390a:	db08      	blt.n	800391e <arm_cmplx_mag_f32+0x13a>
 800390c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003918:	d479      	bmi.n	8003a0e <arm_cmplx_mag_f32+0x22a>
 800391a:	ed81 8a00 	vstr	s16, [r1]
 800391e:	3a01      	subs	r2, #1
 8003920:	d035      	beq.n	800398e <arm_cmplx_mag_f32+0x1aa>
 8003922:	ed90 0a02 	vldr	s0, [r0, #8]
 8003926:	edd0 7a03 	vldr	s15, [r0, #12]
 800392a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800392e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003932:	2300      	movs	r3, #0
 8003934:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003938:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	bfb8      	it	lt
 8003942:	604b      	strlt	r3, [r1, #4]
 8003944:	db08      	blt.n	8003958 <arm_cmplx_mag_f32+0x174>
 8003946:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003952:	d453      	bmi.n	80039fc <arm_cmplx_mag_f32+0x218>
 8003954:	ed81 8a01 	vstr	s16, [r1, #4]
 8003958:	2a01      	cmp	r2, #1
 800395a:	d018      	beq.n	800398e <arm_cmplx_mag_f32+0x1aa>
 800395c:	ed90 0a04 	vldr	s0, [r0, #16]
 8003960:	edd0 7a05 	vldr	s15, [r0, #20]
 8003964:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800396c:	2300      	movs	r3, #0
 800396e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003972:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397a:	db19      	blt.n	80039b0 <arm_cmplx_mag_f32+0x1cc>
 800397c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003984:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003988:	d44a      	bmi.n	8003a20 <arm_cmplx_mag_f32+0x23c>
 800398a:	ed81 8a02 	vstr	s16, [r1, #8]
 800398e:	b004      	add	sp, #16
 8003990:	ecbd 8b02 	vpop	{d8}
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003998:	f845 8c04 	str.w	r8, [r5, #-4]
 800399c:	e797      	b.n	80038ce <arm_cmplx_mag_f32+0xea>
 800399e:	f845 8c08 	str.w	r8, [r5, #-8]
 80039a2:	e77b      	b.n	800389c <arm_cmplx_mag_f32+0xb8>
 80039a4:	f845 8c0c 	str.w	r8, [r5, #-12]
 80039a8:	e75e      	b.n	8003868 <arm_cmplx_mag_f32+0x84>
 80039aa:	f845 8c10 	str.w	r8, [r5, #-16]
 80039ae:	e741      	b.n	8003834 <arm_cmplx_mag_f32+0x50>
 80039b0:	608b      	str	r3, [r1, #8]
 80039b2:	e7ec      	b.n	800398e <arm_cmplx_mag_f32+0x1aa>
 80039b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80039b8:	9001      	str	r0, [sp, #4]
 80039ba:	f000 fb35 	bl	8004028 <sqrtf>
 80039be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80039c2:	9801      	ldr	r0, [sp, #4]
 80039c4:	e74e      	b.n	8003864 <arm_cmplx_mag_f32+0x80>
 80039c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80039ca:	9001      	str	r0, [sp, #4]
 80039cc:	f000 fb2c 	bl	8004028 <sqrtf>
 80039d0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80039d4:	9801      	ldr	r0, [sp, #4]
 80039d6:	e72b      	b.n	8003830 <arm_cmplx_mag_f32+0x4c>
 80039d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80039dc:	9001      	str	r0, [sp, #4]
 80039de:	f000 fb23 	bl	8004028 <sqrtf>
 80039e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80039e6:	9801      	ldr	r0, [sp, #4]
 80039e8:	e76f      	b.n	80038ca <arm_cmplx_mag_f32+0xe6>
 80039ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80039ee:	9001      	str	r0, [sp, #4]
 80039f0:	f000 fb1a 	bl	8004028 <sqrtf>
 80039f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80039f8:	9801      	ldr	r0, [sp, #4]
 80039fa:	e74d      	b.n	8003898 <arm_cmplx_mag_f32+0xb4>
 80039fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a00:	9201      	str	r2, [sp, #4]
 8003a02:	f000 fb11 	bl	8004028 <sqrtf>
 8003a06:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003a0a:	9903      	ldr	r1, [sp, #12]
 8003a0c:	e7a2      	b.n	8003954 <arm_cmplx_mag_f32+0x170>
 8003a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a12:	9201      	str	r2, [sp, #4]
 8003a14:	f000 fb08 	bl	8004028 <sqrtf>
 8003a18:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003a1c:	9903      	ldr	r1, [sp, #12]
 8003a1e:	e77c      	b.n	800391a <arm_cmplx_mag_f32+0x136>
 8003a20:	9101      	str	r1, [sp, #4]
 8003a22:	f000 fb01 	bl	8004028 <sqrtf>
 8003a26:	9901      	ldr	r1, [sp, #4]
 8003a28:	e7af      	b.n	800398a <arm_cmplx_mag_f32+0x1a6>
 8003a2a:	bf00      	nop

08003a2c <arm_radix8_butterfly_f32>:
 8003a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a30:	ed2d 8b10 	vpush	{d8-d15}
 8003a34:	b093      	sub	sp, #76	; 0x4c
 8003a36:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	ed9f bac0 	vldr	s22, [pc, #768]	; 8003d40 <arm_radix8_butterfly_f32+0x314>
 8003a42:	9010      	str	r0, [sp, #64]	; 0x40
 8003a44:	468b      	mov	fp, r1
 8003a46:	9311      	str	r3, [sp, #68]	; 0x44
 8003a48:	4689      	mov	r9, r1
 8003a4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003a4c:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8003a50:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8003a54:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8003a58:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8003a5c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8003a60:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8003a64:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8003a68:	9100      	str	r1, [sp, #0]
 8003a6a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8003a6e:	f108 0004 	add.w	r0, r8, #4
 8003a72:	f10e 0104 	add.w	r1, lr, #4
 8003a76:	462e      	mov	r6, r5
 8003a78:	4420      	add	r0, r4
 8003a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a7e:	4421      	add	r1, r4
 8003a80:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8003a84:	960d      	str	r6, [sp, #52]	; 0x34
 8003a86:	9402      	str	r4, [sp, #8]
 8003a88:	012c      	lsls	r4, r5, #4
 8003a8a:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8003a8e:	9403      	str	r4, [sp, #12]
 8003a90:	00ec      	lsls	r4, r5, #3
 8003a92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003a94:	9404      	str	r4, [sp, #16]
 8003a96:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8003a9a:	9405      	str	r4, [sp, #20]
 8003a9c:	016c      	lsls	r4, r5, #5
 8003a9e:	9401      	str	r4, [sp, #4]
 8003aa0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003aa2:	9c00      	ldr	r4, [sp, #0]
 8003aa4:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8003aa8:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8003aac:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003ab0:	f04f 0c00 	mov.w	ip, #0
 8003ab4:	edd6 6a00 	vldr	s13, [r6]
 8003ab8:	edd7 1a00 	vldr	s3, [r7]
 8003abc:	ed15 aa01 	vldr	s20, [r5, #-4]
 8003ac0:	edd2 5a00 	vldr	s11, [r2]
 8003ac4:	ed51 9a01 	vldr	s19, [r1, #-4]
 8003ac8:	ed94 6a00 	vldr	s12, [r4]
 8003acc:	ed50 7a01 	vldr	s15, [r0, #-4]
 8003ad0:	ed93 3a00 	vldr	s6, [r3]
 8003ad4:	ee39 0a86 	vadd.f32	s0, s19, s12
 8003ad8:	ee33 2a21 	vadd.f32	s4, s6, s3
 8003adc:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8003ae0:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8003ae4:	ee35 7a02 	vadd.f32	s14, s10, s4
 8003ae8:	ee34 4a80 	vadd.f32	s8, s9, s0
 8003aec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003af0:	ee74 6a07 	vadd.f32	s13, s8, s14
 8003af4:	ee34 4a47 	vsub.f32	s8, s8, s14
 8003af8:	ed45 6a01 	vstr	s13, [r5, #-4]
 8003afc:	ed82 4a00 	vstr	s8, [r2]
 8003b00:	edd0 6a00 	vldr	s13, [r0]
 8003b04:	ed96 9a01 	vldr	s18, [r6, #4]
 8003b08:	edd3 2a01 	vldr	s5, [r3, #4]
 8003b0c:	edd7 8a01 	vldr	s17, [r7, #4]
 8003b10:	edd5 0a00 	vldr	s1, [r5]
 8003b14:	edd2 3a01 	vldr	s7, [r2, #4]
 8003b18:	ed94 8a01 	vldr	s16, [r4, #4]
 8003b1c:	ed91 7a00 	vldr	s14, [r1]
 8003b20:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003b24:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8003b28:	ee72 aae8 	vsub.f32	s21, s5, s17
 8003b2c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8003b30:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8003b34:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003b38:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8003b3c:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8003b40:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8003b44:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8003b48:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8003b4c:	ee77 0a08 	vadd.f32	s1, s14, s16
 8003b50:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8003b54:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003b58:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8003b5c:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8003b60:	ee76 6a89 	vadd.f32	s13, s13, s18
 8003b64:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8003b68:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003b6c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003b70:	ee35 5a42 	vsub.f32	s10, s10, s4
 8003b74:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8003b78:	ee33 2a20 	vadd.f32	s4, s6, s1
 8003b7c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003b80:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003b84:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8003b88:	ee77 0a01 	vadd.f32	s1, s14, s2
 8003b8c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8003b90:	ee37 7a41 	vsub.f32	s14, s14, s2
 8003b94:	ee73 1a84 	vadd.f32	s3, s7, s8
 8003b98:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003b9c:	ee76 3a27 	vadd.f32	s7, s12, s15
 8003ba0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ba4:	ee32 8a00 	vadd.f32	s16, s4, s0
 8003ba8:	ee33 1a45 	vsub.f32	s2, s6, s10
 8003bac:	ee32 2a40 	vsub.f32	s4, s4, s0
 8003bb0:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003bb4:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8003bb8:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8003bbc:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8003bc0:	ee34 6a67 	vsub.f32	s12, s8, s15
 8003bc4:	ee75 4a87 	vadd.f32	s9, s11, s14
 8003bc8:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8003bcc:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003bd0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003bd4:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8003bd8:	44dc      	add	ip, fp
 8003bda:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003bde:	45e1      	cmp	r9, ip
 8003be0:	ed85 8a00 	vstr	s16, [r5]
 8003be4:	ed82 2a01 	vstr	s4, [r2, #4]
 8003be8:	4455      	add	r5, sl
 8003bea:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003bee:	4452      	add	r2, sl
 8003bf0:	edc4 6a00 	vstr	s13, [r4]
 8003bf4:	ed81 1a00 	vstr	s2, [r1]
 8003bf8:	ed84 5a01 	vstr	s10, [r4, #4]
 8003bfc:	4451      	add	r1, sl
 8003bfe:	ed00 3a01 	vstr	s6, [r0, #-4]
 8003c02:	4454      	add	r4, sl
 8003c04:	edc7 2a00 	vstr	s5, [r7]
 8003c08:	edc6 4a00 	vstr	s9, [r6]
 8003c0c:	ed83 7a00 	vstr	s14, [r3]
 8003c10:	edc0 5a00 	vstr	s11, [r0]
 8003c14:	edc7 3a01 	vstr	s7, [r7, #4]
 8003c18:	4450      	add	r0, sl
 8003c1a:	ed86 6a01 	vstr	s12, [r6, #4]
 8003c1e:	4457      	add	r7, sl
 8003c20:	edc3 7a01 	vstr	s15, [r3, #4]
 8003c24:	4456      	add	r6, sl
 8003c26:	4453      	add	r3, sl
 8003c28:	f63f af44 	bhi.w	8003ab4 <arm_radix8_butterfly_f32+0x88>
 8003c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c2e:	2b07      	cmp	r3, #7
 8003c30:	f240 81c3 	bls.w	8003fba <arm_radix8_butterfly_f32+0x58e>
 8003c34:	9805      	ldr	r0, [sp, #20]
 8003c36:	9a01      	ldr	r2, [sp, #4]
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	9d04      	ldr	r5, [sp, #16]
 8003c3c:	9902      	ldr	r1, [sp, #8]
 8003c3e:	f100 0c08 	add.w	ip, r0, #8
 8003c42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003c44:	3208      	adds	r2, #8
 8003c46:	1882      	adds	r2, r0, r2
 8003c48:	3308      	adds	r3, #8
 8003c4a:	920a      	str	r2, [sp, #40]	; 0x28
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	18d3      	adds	r3, r2, r3
 8003c50:	3108      	adds	r1, #8
 8003c52:	3508      	adds	r5, #8
 8003c54:	1851      	adds	r1, r2, r1
 8003c56:	9307      	str	r3, [sp, #28]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	442a      	add	r2, r5
 8003c5c:	9206      	str	r2, [sp, #24]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4462      	add	r2, ip
 8003c62:	f10e 0e0c 	add.w	lr, lr, #12
 8003c66:	9205      	str	r2, [sp, #20]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4472      	add	r2, lr
 8003c6c:	f108 0808 	add.w	r8, r8, #8
 8003c70:	330c      	adds	r3, #12
 8003c72:	4440      	add	r0, r8
 8003c74:	f04f 0e00 	mov.w	lr, #0
 8003c78:	9203      	str	r2, [sp, #12]
 8003c7a:	9304      	str	r3, [sp, #16]
 8003c7c:	465a      	mov	r2, fp
 8003c7e:	464b      	mov	r3, r9
 8003c80:	46f3      	mov	fp, lr
 8003c82:	46d1      	mov	r9, sl
 8003c84:	9009      	str	r0, [sp, #36]	; 0x24
 8003c86:	9108      	str	r1, [sp, #32]
 8003c88:	f04f 0801 	mov.w	r8, #1
 8003c8c:	469a      	mov	sl, r3
 8003c8e:	4696      	mov	lr, r2
 8003c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c92:	449b      	add	fp, r3
 8003c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c96:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003c9a:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8003c9e:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8003ca2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8003ca6:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 8003caa:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8003cae:	930c      	str	r3, [sp, #48]	; 0x30
 8003cb0:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8003cb4:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8003cb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cba:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 8003cbe:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8003cc2:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8003cc6:	9202      	str	r2, [sp, #8]
 8003cc8:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	edd3 da01 	vldr	s27, [r3, #4]
 8003cd4:	9b01      	ldr	r3, [sp, #4]
 8003cd6:	edd0 7a00 	vldr	s15, [r0]
 8003cda:	ed93 da01 	vldr	s26, [r3, #4]
 8003cde:	9b02      	ldr	r3, [sp, #8]
 8003ce0:	edcd 7a02 	vstr	s15, [sp, #8]
 8003ce4:	ed93 ca01 	vldr	s24, [r3, #4]
 8003ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cea:	eddc ca01 	vldr	s25, [ip, #4]
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cf4:	edcd 7a01 	vstr	s15, [sp, #4]
 8003cf8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8003cfc:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8003d00:	9200      	str	r2, [sp, #0]
 8003d02:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ed92 fa01 	vldr	s30, [r2, #4]
 8003d0e:	9a00      	ldr	r2, [sp, #0]
 8003d10:	edd1 ea01 	vldr	s29, [r1, #4]
 8003d14:	ed92 ea01 	vldr	s28, [r2, #4]
 8003d18:	edd7 ba00 	vldr	s23, [r7]
 8003d1c:	edd6 aa00 	vldr	s21, [r6]
 8003d20:	ed95 aa00 	vldr	s20, [r5]
 8003d24:	edd4 9a00 	vldr	s19, [r4]
 8003d28:	edcd 7a00 	vstr	s15, [sp]
 8003d2c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8003d30:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8003d34:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8003d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d3c:	46c4      	mov	ip, r8
 8003d3e:	e001      	b.n	8003d44 <arm_radix8_butterfly_f32+0x318>
 8003d40:	3f3504f3 	.word	0x3f3504f3
 8003d44:	ed91 6a00 	vldr	s12, [r1]
 8003d48:	ed93 5a00 	vldr	s10, [r3]
 8003d4c:	edd0 fa00 	vldr	s31, [r0]
 8003d50:	edd4 7a00 	vldr	s15, [r4]
 8003d54:	ed95 7a00 	vldr	s14, [r5]
 8003d58:	ed56 3a01 	vldr	s7, [r6, #-4]
 8003d5c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8003d60:	ed92 2a00 	vldr	s4, [r2]
 8003d64:	ed96 0a00 	vldr	s0, [r6]
 8003d68:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003d6c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003d70:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8003d74:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003d78:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003d7c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003d80:	ee32 2a46 	vsub.f32	s4, s4, s12
 8003d84:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8003d88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d8c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8003d90:	edd4 8a01 	vldr	s17, [r4, #4]
 8003d94:	ed92 9a01 	vldr	s18, [r2, #4]
 8003d98:	edd7 0a00 	vldr	s1, [r7]
 8003d9c:	edd1 2a01 	vldr	s5, [r1, #4]
 8003da0:	ed95 7a01 	vldr	s14, [r5, #4]
 8003da4:	ed93 6a01 	vldr	s12, [r3, #4]
 8003da8:	edd0 5a01 	vldr	s11, [r0, #4]
 8003dac:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003db0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8003db4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8003db8:	ee78 fac7 	vsub.f32	s31, s17, s14
 8003dbc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8003dc0:	ee38 7a87 	vadd.f32	s14, s17, s14
 8003dc4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8003dc8:	ee79 2a22 	vadd.f32	s5, s18, s5
 8003dcc:	ee32 9a27 	vadd.f32	s18, s4, s15
 8003dd0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8003dd4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8003dd8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8003ddc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8003de0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8003de4:	ee32 1a08 	vadd.f32	s2, s4, s16
 8003de8:	ee72 fa87 	vadd.f32	s31, s5, s14
 8003dec:	ee32 2a48 	vsub.f32	s4, s4, s16
 8003df0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003df4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8003df8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003dfc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8003e00:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8003e04:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8003e08:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8003e0c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003e10:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003e14:	ee74 0a22 	vadd.f32	s1, s8, s5
 8003e18:	ee36 0a28 	vadd.f32	s0, s12, s17
 8003e1c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003e20:	ee36 6a68 	vsub.f32	s12, s12, s17
 8003e24:	ee32 4a64 	vsub.f32	s8, s4, s9
 8003e28:	ee73 8a09 	vadd.f32	s17, s6, s18
 8003e2c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8003e30:	ee33 9a49 	vsub.f32	s18, s6, s18
 8003e34:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8003e38:	ee35 3a85 	vadd.f32	s6, s11, s10
 8003e3c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8003e40:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8003e44:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003e48:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8003e4c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8003e50:	ee35 8a03 	vadd.f32	s16, s10, s6
 8003e54:	ee38 0a80 	vadd.f32	s0, s17, s0
 8003e58:	ee73 3a82 	vadd.f32	s7, s7, s4
 8003e5c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8003e60:	ed9d 2a00 	vldr	s4, [sp]
 8003e64:	eddd 1a01 	vldr	s3, [sp, #4]
 8003e68:	ee35 5a43 	vsub.f32	s10, s10, s6
 8003e6c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8003e70:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8003e74:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8003e78:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003e7c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8003e80:	ee76 5a49 	vsub.f32	s11, s12, s18
 8003e84:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8003e88:	ee39 6a06 	vadd.f32	s12, s18, s12
 8003e8c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8003e90:	ee21 4a84 	vmul.f32	s8, s3, s8
 8003e94:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8003e98:	ee22 7a07 	vmul.f32	s14, s4, s14
 8003e9c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8003ea0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8003ea4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8003ea8:	ee31 1a09 	vadd.f32	s2, s2, s18
 8003eac:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8003eb0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8003eb4:	ee74 0a60 	vsub.f32	s1, s8, s1
 8003eb8:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003ebc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8003ec0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8003ec4:	ee72 1a21 	vadd.f32	s3, s4, s3
 8003ec8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8003ecc:	ee38 2a89 	vadd.f32	s4, s17, s18
 8003ed0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8003ed4:	ee38 8a04 	vadd.f32	s16, s16, s8
 8003ed8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8003edc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8003ee0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8003ee4:	eddd 5a02 	vldr	s11, [sp, #8]
 8003ee8:	edc6 fa00 	vstr	s31, [r6]
 8003eec:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8003ef0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8003ef4:	ee30 0a45 	vsub.f32	s0, s0, s10
 8003ef8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8003efc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8003f00:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8003f04:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8003f08:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8003f0c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8003f10:	ee74 4a89 	vadd.f32	s9, s9, s18
 8003f14:	ee34 3a43 	vsub.f32	s6, s8, s6
 8003f18:	ee78 8a85 	vadd.f32	s17, s17, s10
 8003f1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f20:	44f4      	add	ip, lr
 8003f22:	45e2      	cmp	sl, ip
 8003f24:	edc3 3a00 	vstr	s7, [r3]
 8003f28:	edc3 6a01 	vstr	s13, [r3, #4]
 8003f2c:	444e      	add	r6, r9
 8003f2e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8003f32:	edc7 0a00 	vstr	s1, [r7]
 8003f36:	444b      	add	r3, r9
 8003f38:	ed80 2a00 	vstr	s4, [r0]
 8003f3c:	edc0 2a01 	vstr	s5, [r0, #4]
 8003f40:	444f      	add	r7, r9
 8003f42:	edc2 1a00 	vstr	s3, [r2]
 8003f46:	ed82 7a01 	vstr	s14, [r2, #4]
 8003f4a:	4448      	add	r0, r9
 8003f4c:	ed85 8a00 	vstr	s16, [r5]
 8003f50:	ed85 0a01 	vstr	s0, [r5, #4]
 8003f54:	444a      	add	r2, r9
 8003f56:	edc1 4a00 	vstr	s9, [r1]
 8003f5a:	444d      	add	r5, r9
 8003f5c:	ed81 3a01 	vstr	s6, [r1, #4]
 8003f60:	edc4 8a00 	vstr	s17, [r4]
 8003f64:	ed84 6a01 	vstr	s12, [r4, #4]
 8003f68:	4449      	add	r1, r9
 8003f6a:	444c      	add	r4, r9
 8003f6c:	f63f aeea 	bhi.w	8003d44 <arm_radix8_butterfly_f32+0x318>
 8003f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f72:	3308      	adds	r3, #8
 8003f74:	930a      	str	r3, [sp, #40]	; 0x28
 8003f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f78:	3308      	adds	r3, #8
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7c:	9b08      	ldr	r3, [sp, #32]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	9308      	str	r3, [sp, #32]
 8003f82:	9b07      	ldr	r3, [sp, #28]
 8003f84:	3308      	adds	r3, #8
 8003f86:	9307      	str	r3, [sp, #28]
 8003f88:	9b06      	ldr	r3, [sp, #24]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	9306      	str	r3, [sp, #24]
 8003f8e:	9b05      	ldr	r3, [sp, #20]
 8003f90:	3308      	adds	r3, #8
 8003f92:	9305      	str	r3, [sp, #20]
 8003f94:	9b04      	ldr	r3, [sp, #16]
 8003f96:	3308      	adds	r3, #8
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fa2:	f108 0801 	add.w	r8, r8, #1
 8003fa6:	4543      	cmp	r3, r8
 8003fa8:	f47f ae72 	bne.w	8003c90 <arm_radix8_butterfly_f32+0x264>
 8003fac:	469b      	mov	fp, r3
 8003fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	46d1      	mov	r9, sl
 8003fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8003fb8:	e547      	b.n	8003a4a <arm_radix8_butterfly_f32+0x1e>
 8003fba:	b013      	add	sp, #76	; 0x4c
 8003fbc:	ecbd 8b10 	vpop	{d8-d15}
 8003fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003fc4 <__errno>:
 8003fc4:	4b01      	ldr	r3, [pc, #4]	; (8003fcc <__errno+0x8>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000150 	.word	0x20000150

08003fd0 <__libc_init_array>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	4d0d      	ldr	r5, [pc, #52]	; (8004008 <__libc_init_array+0x38>)
 8003fd4:	4c0d      	ldr	r4, [pc, #52]	; (800400c <__libc_init_array+0x3c>)
 8003fd6:	1b64      	subs	r4, r4, r5
 8003fd8:	10a4      	asrs	r4, r4, #2
 8003fda:	2600      	movs	r6, #0
 8003fdc:	42a6      	cmp	r6, r4
 8003fde:	d109      	bne.n	8003ff4 <__libc_init_array+0x24>
 8003fe0:	4d0b      	ldr	r5, [pc, #44]	; (8004010 <__libc_init_array+0x40>)
 8003fe2:	4c0c      	ldr	r4, [pc, #48]	; (8004014 <__libc_init_array+0x44>)
 8003fe4:	f000 f842 	bl	800406c <_init>
 8003fe8:	1b64      	subs	r4, r4, r5
 8003fea:	10a4      	asrs	r4, r4, #2
 8003fec:	2600      	movs	r6, #0
 8003fee:	42a6      	cmp	r6, r4
 8003ff0:	d105      	bne.n	8003ffe <__libc_init_array+0x2e>
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff8:	4798      	blx	r3
 8003ffa:	3601      	adds	r6, #1
 8003ffc:	e7ee      	b.n	8003fdc <__libc_init_array+0xc>
 8003ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004002:	4798      	blx	r3
 8004004:	3601      	adds	r6, #1
 8004006:	e7f2      	b.n	8003fee <__libc_init_array+0x1e>
 8004008:	08019594 	.word	0x08019594
 800400c:	08019594 	.word	0x08019594
 8004010:	08019594 	.word	0x08019594
 8004014:	08019598 	.word	0x08019598

08004018 <memset>:
 8004018:	4402      	add	r2, r0
 800401a:	4603      	mov	r3, r0
 800401c:	4293      	cmp	r3, r2
 800401e:	d100      	bne.n	8004022 <memset+0xa>
 8004020:	4770      	bx	lr
 8004022:	f803 1b01 	strb.w	r1, [r3], #1
 8004026:	e7f9      	b.n	800401c <memset+0x4>

08004028 <sqrtf>:
 8004028:	b508      	push	{r3, lr}
 800402a:	ed2d 8b02 	vpush	{d8}
 800402e:	eeb0 8a40 	vmov.f32	s16, s0
 8004032:	f000 f817 	bl	8004064 <__ieee754_sqrtf>
 8004036:	eeb4 8a48 	vcmp.f32	s16, s16
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	d60c      	bvs.n	800405a <sqrtf+0x32>
 8004040:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004060 <sqrtf+0x38>
 8004044:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	d505      	bpl.n	800405a <sqrtf+0x32>
 800404e:	f7ff ffb9 	bl	8003fc4 <__errno>
 8004052:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004056:	2321      	movs	r3, #33	; 0x21
 8004058:	6003      	str	r3, [r0, #0]
 800405a:	ecbd 8b02 	vpop	{d8}
 800405e:	bd08      	pop	{r3, pc}
 8004060:	00000000 	.word	0x00000000

08004064 <__ieee754_sqrtf>:
 8004064:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004068:	4770      	bx	lr
	...

0800406c <_init>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr

08004078 <_fini>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr
